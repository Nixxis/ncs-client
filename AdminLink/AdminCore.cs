using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Linq;
using System.Xml.Schema;
using System.Collections.Specialized;
using System.Globalization;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Net;
using System.IO;
using System.Configuration;
using System.Text;
using System.Threading;
using Nixxis;
using System.Xml.XPath;
using System.Net.NetworkInformation;
using System.Windows;
using System.Data;
using ContactRoute;
using Nixxis.Admin;

namespace Nixxis.Client.Admin
{
    public class AdminValidationException : Exception
    {
        public XmlDocument ValidationErrors = null;

        public AdminValidationException(XmlDocument validationErrors)
        {
            ValidationErrors = validationErrors;
        }
    }


    public class MultiIndexedCollection
    {
        private class XmlNodeListHelper
        {
            private bool m_Loaded;
            private List<XmlNode> m_ListNodes;

            public XmlNodeListHelper(bool b,  List<XmlNode> list)
            {
                m_Loaded = b;
                m_ListNodes = list;
            }
            public bool Loaded
            {
                get
                {
                    return m_Loaded;
                }
                set
                {
                    m_Loaded = value;
                }
            }
            public List<XmlNode> XmlNodeList
            {
                get
                {
                    return m_ListNodes;
                }
            }
        }

        public SortedList<string, string> NotLoadedYet
        {
            get
            {
                SortedList<string, string> retValue = new SortedList<string,string>();
                for (int i = 0; i < m_Indexes["id"].Count; i++)
                {
                    if (!m_Indexes["id"].Values[i].Loaded && !string.IsNullOrEmpty(m_Indexes["id"].Keys[i]) )
                        retValue.Add(m_Indexes["id"].Keys[i], m_Indexes["id"].Values[i].XmlNodeList.First().Name);
                }
                return retValue;
            }
        }

        private Dictionary<string, SortedList<string, XmlNodeListHelper>> m_Indexes = new Dictionary<string, SortedList<string, XmlNodeListHelper>>();
        public MultiIndexedCollection(XmlNode node)
        {
            m_ProgressCounter = 0;
            LoadMultiIndexCollection(node);
        }
        internal void LoadMultiIndexCollection(XmlNode node)
        {
            if (node.Attributes != null)
            {
                string strtemp = null;
                if(AdminCore.MainObjects.TryGetValue(node.Name, out strtemp) && strtemp.Equals(node.ParentNode.Name))
                    m_ProgressCounter++;

                Dictionary<string, string> temp = new Dictionary<string, string>();
                foreach (XmlAttribute att in node.Attributes)
                {
                    if (!att.Name.Equals("timestamp") &&
                        !att.Name.Equals("state") &&
                        !att.Name.Equals("creator") &&
                        !att.Name.Equals("created") &&
                        !att.Name.Equals("modificator") &&
                        !att.Name.Equals("modified")
                        ) 
                    {
                        temp.Add(att.Name, att.Value);
                    }
                }
                if (temp.Count > 0)
                    Add(node, temp);
                foreach (XmlNode nde in node.ChildNodes)
                    LoadMultiIndexCollection(nde);
            }
        }
        public void Add(XmlNode obj, IDictionary<string, string> indexes)
        {
            foreach (KeyValuePair<string, string> kvp in indexes)
            {
                if (!m_Indexes.ContainsKey(kvp.Key))
                    m_Indexes.Add(kvp.Key, new SortedList<string, XmlNodeListHelper>(1000));

                if (!m_Indexes[kvp.Key].ContainsKey(kvp.Value))
                    m_Indexes[kvp.Key].Add(kvp.Value, new XmlNodeListHelper(false, new List<XmlNode>(1000)));

                m_Indexes[kvp.Key][kvp.Value].XmlNodeList.Add(obj);
            }
        }

        public IEnumerable<XmlNode> Get(string indexName, string value)
        {
            if (m_Indexes.ContainsKey(indexName) && m_Indexes[indexName].ContainsKey(value))
                return m_Indexes[indexName][value].XmlNodeList;
            return null;
        }
        public IEnumerable<XmlNode> Get(string xPath)
        {
            int opening = xPath.IndexOf("[");
            if (opening > -1)
            {
                int closing = xPath.IndexOf("]", opening);
                int slash = -1;
                while ((slash = xPath.IndexOf("/", opening)) > -1 && slash < closing)
                {
                    xPath = string.Concat(xPath.Substring(0, slash), "%", xPath.Substring(slash+1));
                }
            }

            string[] parts = xPath.Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries);

            string searchFor = null;
            List<string> tempParts = new List<string>();
            int lastIndex = -1;
            for (int i = 0; i < parts.Length; i++)
            {                
                if (parts[i].Contains('[') && parts[i].Contains(']'))
                {

                    searchFor = parts[i].Replace('%', '/');
                    lastIndex = i;
                    break;
                }

                tempParts.Add(parts[i]);
            }
            if(searchFor==null)
                throw new FormatException();

            string[] searchForParts = searchFor.Split(new char[] { '[', ']' });
            if (searchForParts.Length <= 1 || !searchForParts[1].StartsWith("@"))
                throw new FormatException();
            tempParts.Add(searchForParts[0]);
            string attEqualValue = searchForParts[1].Substring(1);
            string[] attEqualValueParts = attEqualValue.Split(new char[] { '=' });
            IEnumerable<XmlNode> tempResult = Get(attEqualValueParts[0], attEqualValueParts[1].Trim(new char[] { '"' }));
            if (tempResult == null)
                return null;
            else
            {
                List<string> strList = new List<string>();
                for (int i = lastIndex + 1; i < parts.Length; i++)
                    strList.Add(parts[i]);
                if (strList.Count > 0)
                {
                    List<XmlNode> nl = new List<XmlNode>();
                    foreach (XmlNode n in tempResult.Where((obj) => CheckPath(obj, tempParts)))
                    {
                        foreach (XmlNode nde in n.SelectNodes(string.Concat("./", string.Join("/", strList))))
                            nl.Add(nde);
                    }
                    return nl;
                }
                else
                    return tempResult.Where((obj) => CheckPath(obj, tempParts));
            }
        }

        public XmlNode GetSingle(string indexName, string value)
        {
            IEnumerable<XmlNode> retval = Get(indexName, value);
            if (retval == null || retval.Count()==0)
                return null;
            if (retval.Count() == 1)
                return retval.FirstOrDefault();
            throw new InvalidOperationException();
        }
        public XmlNode GetSingle(string xPath)
        {
            IEnumerable<XmlNode> retval = Get(xPath);
            if (retval == null || retval.Count() == 0)
                return null;
            if (retval.Count() == 1)
                return retval.FirstOrDefault();
            throw new InvalidOperationException();
        }

        public int GetTotalCount(string index)
        {
            if (m_Indexes.ContainsKey(index))
                return m_Indexes[index].Count;
            else
                return 0;
        }
        public int GetTotalCount(string index, string[] types)
        {
            if (m_Indexes.ContainsKey(index))
            {
                int count = 0;
                foreach (XmlNodeListHelper xnlh in m_Indexes[index].Values)
                {
                    foreach (XmlNode nde in xnlh.XmlNodeList)
                        if (types.Contains(nde.Name))
                            count++;
                }
                return count;
            }
            else
                return 0;
        }

        public bool Contains(string indexName, string value)
        {
            return m_Indexes.ContainsKey(indexName) && m_Indexes[indexName].ContainsKey(value);
        }
        private static bool CheckPath(XmlNode node, List<string> path)
        {
            for (int i = path.Count() - 1; i >= 0; i--)
            {
                if (!node.Name.Equals(path[i]))
                    return false;
                node = node.ParentNode;
            }
            return true;
        }
        int m_ProgressCounter = 0;
        public int ProgressCounter
        {
            get
            {
                return m_ProgressCounter;
            }
        }
    }

    public class AdminHidden : AdminObject
    {
        internal AdminHidden(AdminObject parent)
            : base(parent)
        {
        }

        public AdminObjectList<Agent> Agents
        {
            get;
            internal set;
        }
        public AdminObjectList<Qualification> Qualifications
        {
            get;
            internal set;
        }
        public AdminObjectList<Campaign> Campaigns
        {
            get;
            internal set;
        }
        public AdminObjectList<InboundActivity> InboundActivities
        {
            get;
            internal set;
        }
        public AdminObjectList<OutboundActivity> OutboundActivities
        {
            get;
            internal set;
        }
        public AdminObjectList<Language> Languages
        {
            get;
            internal set;
        }

    }

    public class QualificationLight : AdminObjectLight
    {
        public QualificationLight(string id, string description)
            : base(id, description)
        {
            
        }

        public QualificationLight(string id, string description, int state, string type, string[] related)
            : base(id, description, state, type, related)
        {
        }


        private ObservableCollection<AdminObjectLight> m_Children = new ObservableCollection<AdminObjectLight>();

        public int Positive { get; set; }
        public bool Argued { get; set; }
        public string CustomValue { get; set; }

        public ObservableCollection<AdminObjectLight> Children { get { return m_Children; } }

    }

    public class AdminObjectLight
    {
        public string Id { get; set; }
        public string Description { get; set; }
        public int State { get; set; }
        public string Type { get; set; }
        public string[] Related { get; set; }        

        public AdminObjectLight(string id, string description)
            : this(id, description, 10, null, null)
        {
        }
        public AdminObjectLight(string id, string description, int state, string type, string[] related)
        {
            Id = id;
            Description = description;
            State = state;
            Type = type;
            Related = related;
        }

        public override string ToString()
        {
            return Description;
        }

    }


    public class AdminLight
    {

        public ObservableCollection<AdminObjectLight> Teams = new ObservableCollection<AdminObjectLight>();
        public ObservableCollection<AdminObjectLight> Agents = new ObservableCollection<AdminObjectLight>();
        public ObservableCollection<AdminObjectLight> Campaigns = new ObservableCollection<AdminObjectLight>();
        public ObservableCollection<AdminObjectLight> Activities = new ObservableCollection<AdminObjectLight>();
        public ObservableCollection<QualificationLight> Qualifications = new ObservableCollection<QualificationLight>();
        public ObservableCollection<QualificationLight> FlatQualifications = new ObservableCollection<QualificationLight>();

        private string m_AdminUri;
        private string m_UserId;
        private bool m_HasBeenLoaded = false;

        public AdminLight(string user)
        {
            ISession session = ((ISession)AppDomain.CurrentDomain.GetData("SessionInfo"));
            if (session != null && session["admin"] != null)
            {
                m_AdminUri = session["admin"].Location;
            }

            m_UserId = user;
        }

        public void Load()
        {
            m_HasBeenLoaded = false;
            XmlDocument doc = new XmlDocument();

            try
            {
                doc.Load(string.Format("{0}?action=loadRecAdminObjects&account={1}&format=2.2", m_AdminUri, m_UserId));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine(ex.ToString());
            }
            if (doc != null)
            {
                if (doc.DocumentElement.Name == "Success")
                {
                    Load(doc.Decapsulate());
                    m_HasBeenLoaded = true;
                }
            }
        }
        private void Load(XmlDocument doc)
        {
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/Agents/Agent"))
            {
                Agents.Add(new AdminObjectLight(
                    node.Attributes["id"].Value, 
                    string.Format("{0}: {1} {2}", node.SelectSingleNode("Account").InnerText, node.SelectSingleNode("FirstName").InnerText, node.SelectSingleNode("LastName").InnerText ),
                    XmlConvert.ToInt32(node.Attributes["state"].Value), 
                    "Agent",
                    node.SelectNodes("Teams/Team").Cast<XmlNode>().Select( (a) => (a.Attributes["id"].Value) ).ToArray()
                    ));
            }
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/Teams/Team"))
            {
                Teams.Add(new AdminObjectLight(
                    node.Attributes["id"].Value,
                    node.SelectSingleNode("Description").InnerText,
                    XmlConvert.ToInt32(node.Attributes["state"].Value),
                    "Team",
                    null));
            }
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/Campaigns/Campaign"))
            {
                Campaigns.Add(new AdminObjectLight(
                    node.Attributes["id"].Value,
                    node.SelectSingleNode("Description").InnerText,
                    XmlConvert.ToInt32(node.Attributes["state"].Value),
                    "Campaign",
                    null));
            }
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/InboundActivities/InboundActivity"))
            {
                Activities.Add(new AdminObjectLight(
                    node.Attributes["id"].Value,
                    node.SelectSingleNode("Description").InnerText,
                    XmlConvert.ToInt32(node.Attributes["state"].Value),
                    "Inbound",
                    new string[]{node.Attributes["campaignid"].Value}));
            }
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/OutboundActivities/OutboundActivity"))
            {
                Activities.Add(new AdminObjectLight(
                    node.Attributes["id"].Value,
                    node.SelectSingleNode("Description").InnerText,
                    XmlConvert.ToInt32(node.Attributes["state"].Value),
                    "Outbound",
                    new string[] { node.Attributes["campaignid"].Value }));
            }

            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/Qualifications/Qualification"))
            {
                QualificationLight qfo = new QualificationLight(
                    node.Attributes["id"].Value,
                    node.SelectSingleNode("Description").InnerText,
                    XmlConvert.ToInt32(node.Attributes["state"].Value),
                    "Qualification",
                    new string[] { node.Attributes["campaignid"].Value, node.Attributes["parent"].Value });

                try
                {
                    qfo.Argued = System.Xml.XmlConvert.ToBoolean(node.SelectSingleNode("Argued").InnerText);
                }
                catch
                {
                }
                try
                {
                    qfo.Positive = System.Xml.XmlConvert.ToInt32(node.SelectSingleNode("Positive").InnerText);
                }
                catch
                {
                }
                try
                {
                    qfo.CustomValue = node.SelectSingleNode("CustomValue").InnerText;
                }
                catch
                {
                }

                Qualifications.Add(qfo);
            }



            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/Hidden/Agents/Agent"))
            {
                Agents.Add(new AdminObjectLight(
                    node.Attributes["id"].Value,
                    string.Format("{0}: {1} {2}", node.SelectSingleNode("Account").InnerText, node.SelectSingleNode("FirstName").InnerText, node.SelectSingleNode("LastName").InnerText),
                    XmlConvert.ToInt32(node.Attributes["state"].Value),
                    "Agent",
                    node.SelectNodes("Teams/Team").Cast<XmlNode>().Select((a) => (a.Attributes["id"].Value)).ToArray()
                    ));
            }
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/Hidden/Campaigns/Campaign"))
            {
                Campaigns.Add(new AdminObjectLight(
                    node.Attributes["id"].Value,
                    node.SelectSingleNode("Description").InnerText,
                    XmlConvert.ToInt32(node.Attributes["state"].Value),
                    "Campaign",
                    null));
            }
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/Hidden/InboundActivities/InboundActivity"))
            {
                Activities.Add(new AdminObjectLight(
                    node.Attributes["id"].Value,
                    node.SelectSingleNode("Description").InnerText,
                    XmlConvert.ToInt32(node.Attributes["state"].Value),
                    "Inbound",
                    new string[] { node.Attributes["campaignid"].Value }));

            }
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/Admin/Hidden/OutboundActivities/OutboundActivity"))
            {
                try
                {
                    Activities.Add(new AdminObjectLight(
                        node.Attributes["id"].Value,
                        node.SelectSingleNode("Description").InnerText,
                        XmlConvert.ToInt32(node.Attributes["state"].Value),
                        "Outbound",
                        new string[] { node.Attributes["campaignid"].Value }));
                }
                catch
                {

                }

            }

            List<QualificationLight> toKeepAsRoot = new List<QualificationLight>();
            foreach (QualificationLight rfo in Qualifications)
            {
                FlatQualifications.Add(rfo);

                QualificationLight temp = Qualifications.SingleOrDefault((q) => (q.Id == rfo.Related[1]));
                if (temp != null)
                {
                    temp.Children.Add(rfo);
                }
                else
                {
                    toKeepAsRoot.Add(rfo);
                }
            }

            for (int i = 0; i < Qualifications.Count; i++)
            {
                if (!toKeepAsRoot.Contains(Qualifications[i]))
                {
                    Qualifications.RemoveAt(i);
                    i--;
                }
            }

        }
        public string UserId
        {
            get
            {
                return m_UserId;
            }
        }
        public bool HasBeenLoaded
        {
            get
            {
                return m_HasBeenLoaded;
            }
        }
    }

    public class AdminCore : AdminObject
    {

        public static Dictionary<string, string> MainObjects = new Dictionary<string, string> {
            {"ActivityLanguage", "ActivitiesLanguages"},
            {"ActivitySkill", "ActivitiesSkills"},
            {"Agent", "Agents"},
            {"Campaign", "Campaigns"},
            {"Phone", "Phones"},
            {"Location", "Locations"},
            {"AgentTeam", "AgentsTeams"},
            {"AgentSkill", "AgentsSkills"},
            {"AgentLanguage", "AgentsLanguages"},
            {"Skill", "Skills"},
            {"Language", "Languages"},
            {"Team", "Teams"},
            {"QualificationExclusion", "QualificationsExclusions"},
            {"InboundActivity", "InboundActivities"},
            {"OutboundActivity", "OutboundActivities"}
        };

        private byte[] m_TimeStamp = new byte[]{0,0,0,0,0,0,0,0};
        private int m_TotalCount = 0;
        private int m_LoadCount= 0;
        private int m_LastPercentPublish = 0;
        private DateTime m_LastPublish = DateTime.MinValue;

        private void ResetLoadProgress()
        {
            m_LoadCount = 0;
            m_LastPercentPublish = 0;
            m_LastPublish = DateTime.MinValue;
        }

        
        public static string PathUpload { get; set; }
        public static string PathSounds { get; set; }
        public static string PathAttachments { get; set; }
        public static string PathImportExports { get; set; }


        public delegate void progressReportDelegate(int percent, string progressString);

        public void UploadFile(string LocalPath, string Path, long maxBytes)
        {
            UploadFile(LocalPath, Path, null, maxBytes);

        }


        public void UploadFile(string LocalPath, string Path)
        {
            UploadFile(LocalPath, Path, null, -1);

        }
        public void UploadFile(string LocalPath, string Path, progressReportDelegate progress)
        {
            UploadFile(LocalPath, Path, progress, -1);
        }
        public void UploadFile(string LocalPath, string Path, progressReportDelegate progress, long maxBytes)
        {
            if (Path.StartsWith("http://", StringComparison.OrdinalIgnoreCase) || Path.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
            {
                int lastProgress = 0;
                string progressFormat = string.Empty;
                double multiplicator = 1;
                DateTime lastProgressTime = DateTime.Now;
                
                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(string.Format(Path, AdminUploadServer) );
                webRequest.Headers.Add("Accept-Language", System.Threading.Thread.CurrentThread.CurrentUICulture.Name);
                webRequest.Method = WebRequestMethods.Http.Put;

                webRequest.SendChunked = true;

                // we don't want OOM!!!
                webRequest.AllowWriteStreamBuffering = false;

                using (Stream webRequestStream = webRequest.GetRequestStream())
                {
                    byte[] buffer = new byte[1024];
                    try
                    {
                        long totalBytes = 0;
                        if (progress != null)
                        {
                            totalBytes = (new FileInfo(LocalPath)).Length;
                            if (totalBytes > 1024 * 1024)
                            {
                                progressFormat = TranslationContext.Default.Translate("{0:N}/{1:N} Mb");
                                multiplicator = 1024 * 1024;

                            }
                            else if (totalBytes > 1024)
                            {
                                progressFormat = TranslationContext.Default.Translate("{0:N}/{1:N} Kb");
                                multiplicator = 1024;
                            }
                            else
                            {
                                progressFormat = TranslationContext.Default.Translate("{0}/{1} bytes");
                            }
                            progress(lastProgress, string.Format(progressFormat, 0, totalBytes / multiplicator));
                        }

                        long currentProgress = 0;

                        int count = 0;
                        using (System.IO.FileStream stream = new FileStream(LocalPath, FileMode.Open, FileAccess.Read, FileShare.Read))
                        {
                            BinaryReader reader = new BinaryReader(stream);
                            while (true)
                            {
                                count = reader.Read(buffer, 0, 1024);
                                if (count > 0 && ( maxBytes==-1 || currentProgress < maxBytes ))
                                {
                                    if(maxBytes==-1 || maxBytes-currentProgress > count)
                                        webRequestStream.Write(buffer, 0, count);
                                    else
                                        webRequestStream.Write(buffer, 0,(int)(maxBytes - currentProgress));
                                    
                                    currentProgress += count;
                                    
                                    if (progress != null)
                                    {
                                        
                                        long temp = currentProgress * 100 / totalBytes;
                                        if (lastProgress < temp || DateTime.Now.Subtract(lastProgressTime).TotalMilliseconds > 2000)
                                        {
                                            lastProgress = (int)temp;
                                            lastProgressTime = DateTime.Now;
                                            progress(lastProgress, string.Format(progressFormat, currentProgress / multiplicator, totalBytes / multiplicator));
                                        }
                                    }
                                }
                                if (count <= 0)
                                    break;
                            }
                            if (progress != null)
                            {
                                lastProgress = 100;
                                progress(lastProgress, string.Format(progressFormat, currentProgress / multiplicator, totalBytes / multiplicator));
                            }
                            reader.Close();
                        }
                    }
                    catch (Exception e)
                    {
                        System.Diagnostics.Trace.WriteLine(e.ToString());
                    }
                    webRequestStream.Close();
                }

                try
                {
                    using (HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse())
                    {
                        response.Close();
                    }
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine(ex.ToString());
                }
            }
            else
            {
                if(!Directory.Exists(System.IO.Path.GetDirectoryName(Path)))
                    Directory.CreateDirectory(System.IO.Path.GetDirectoryName(Path));
                File.Copy(LocalPath, Path);
            }
        }


        public void Load()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            XmlDocument doc = new XmlDocument();

            sw.Start();
            ReportProgress(TranslationContext.Default.Translate("Requesting data to server..."));
            try
            {                
                doc.Load(string.Format("{0}?action=loadXml&timestamp={1}&account={2}&format=2.2",m_AdminUri, System.Convert.ToBase64String(m_TimeStamp), m_CreatorId));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine(ex.ToString());
            }
            System.Diagnostics.Trace.WriteLine(string.Format("Admin document retrieved from server in {0} ms", sw.ElapsedMilliseconds),"Performances");
            sw.Restart();
            if (doc != null)
            {
                if(doc.DocumentElement.Name=="Success")
                {
                    Load(doc.Decapsulate());
                }
                else
                {
                    throw new AdminValidationException(doc);
                }
                
            }
            System.Diagnostics.Trace.WriteLine(string.Format("Admin document loaded in {0} ms", sw.ElapsedMilliseconds), "Performances");
            
        }

        public delegate void ObjectAddedDelegate(AdminObject added);
        public delegate void ObjectUpdatedDelegate(AdminObject oldobj, AdminObject newobj);
        public delegate void ObjectDeletedDelegate(AdminObject deleted);

        public event ObjectAddedDelegate ObjectAdded;
        public event ObjectUpdatedDelegate ObjectUpdated;
        public event ObjectDeletedDelegate ObjectDeleted;
        private Dictionary<string, AdminObject> m_AdminObjects = new Dictionary<string, AdminObject>();
        private SortedList<string, AdminObject> m_DeletedObjects = new SortedList<string, AdminObject>();
        private Dictionary<string, List<string>> m_ObjectReferences = new Dictionary<string, List<string>>();

        public int AdminObjectCount
        {
            get
            {
                lock (m_AdminObjects)
                {
                    return m_AdminObjects.Count;
                }
            }
        }
        public string GetCountByType()
        {
            StringBuilder builder = new StringBuilder(10000);
            SortedList<string, int> temp = new SortedList<string, int>();
            lock (m_AdminObjects)
            {
                foreach (AdminObject obj in m_AdminObjects.Values)
                {
                    string strType = obj.GetType().ToString();
                    if (temp.ContainsKey(strType))
                        temp[strType] = temp[strType] + 1;
                    else
                        temp.Add(strType, 1);
                }
            }
            for (int i = 0; i < temp.Count; i++)
            {
                builder.AppendFormat("{0}: {1}\n", temp.Keys[i], temp.Values[i]);
            }
            return builder.ToString();
        }
        public void HandleAdminObjectLoadProgress(string typeName)
        {
            if (AdminCore.MainObjects.ContainsKey(typeName))
            {
                m_LoadCount++;
                
                int newPercent = 100 * m_LoadCount / m_TotalCount;
                DateTime now = DateTime.Now;
                if (newPercent != m_LastPercentPublish || now.Subtract(m_LastPublish).TotalMilliseconds > 200)
                {
                    m_LastPublish = now;
                    m_LastPercentPublish = newPercent;
                    ReportDetailedProgress(m_LastPercentPublish, 
                        TranslationContext.Default.Translate("Loading objects..."), 
                        string.Format(TranslationContext.Default.Translate("{0}/{1} objects"), m_LoadCount, m_TotalCount));
                }
            }
        }

        private List<MediaProvider> m_PrivateMediaProviders = null;
        public List<MediaProvider> MediaProviders
        {
            get
            {
                return m_PrivateMediaProviders;
            }
        }

        public AdminObjectList<DynamicParameterDefinition> DynamicParameterDefinitions
        {
            get;
            internal set;
        }


        public AdminObjectList<Right> Rights
        {
            get;
            internal set;
        }

        public IEnumerable<Right> GlobalRights
        {
            get
            {
                return Rights.Where((a) => ((a.Applicability & 2) == 2));
            }
        }

        public IEnumerable<Right> ObjectsRights
        {
            get
            {
                return Rights.Where((a) => ((a.Applicability & 1) == 1));
            }
        }

        public AdminObjectList<ObjectSecurity> ObjectsSecurity
        {
            get;
            internal set;
        }


        private List<Language.SimpleLanguage> m_PrivateGuiLanguages = null;
        private AdminObjectList<QuotaField> m_QuotaFields = null;
        private AdminObjectList<SystemField> m_SystemFields = null;
        private AdminObjectList<CallbackRuleset> m_CallbackRulesets = null;
        private AdminObjectList<AmdSettings> m_AmdSettings = null;
        private AdminObjectList<Resource> m_Resources = null;
        private AdminObjectList<Carrier> m_Carriers = null;
        private AdminObjectList<Setting> m_Settings = null;
        private AdminObjectList<Location> m_Locations = null;
        private AdminObjectList<Planning> m_Plannings = null;
        private AdminObjectList<Prompt> m_Prompts = null;
        private AdminObjectList<Role> m_Roles = null;
        private AdminObjectList<SecurityContext> m_SecurityContexts = null;
        public LoginEncryption LoginEncrypter { get; set; }
        private AdminObjectList<Preprocessor> m_Preprocessors = null;

        private XmlDocument m_XmlAdminObjects;
        public MultiIndexedCollection m_MultiIndexedXml;
        public SortedList<string, Tuple<Type, AdminObject>> m_NotPreloaded;

        private bool m_Loading;
        private bool m_Saving;

        private string m_AdminUri;

        public string AdminUri
        {
            get
            {
                return m_AdminUri;
            }
        }
        private string m_AdminUploadUri;
        private string m_AdminUploadUriPatern;
        private string m_AdminUploadServer;


        public string AdminUploadUri
        {
            get
            {
                return m_AdminUploadUri;
            }
        }
        public string AdminUploadServer
        {
            get
            {
                return m_AdminUploadServer;
            }
        }

        public string AdminUploadUriPatern
        {
            get
            {
                return m_AdminUploadUriPatern;
            }
        }
        public AdminCore()
            : base((AdminCore)null)
        {


            ISession session = ((ISession)AppDomain.CurrentDomain.GetData("SessionInfo"));
            if (session != null && session["admin"]!=null)
            {
                m_AdminUri = session["admin"].Location;
                m_AdminUploadUri = session["adminupload"].Location;
                string proto = null;
                if (m_AdminUploadUri.StartsWith("https"))
                    proto = "https";
                else if (m_AdminUploadUri.StartsWith("http"))
                    proto = "http";
                string[] temp = m_AdminUploadUri.Split(new string[] { "http://", "/", "https://" }, StringSplitOptions.RemoveEmptyEntries);
                m_AdminUploadServer = temp[0];
                m_AdminUploadUriPatern = string.Concat(proto ?? "http", "://{0}/", String.Join("/", temp.Skip(1)), "/");
            }

            LoginEncrypter = new LoginEncryption(new byte[] { 0x06, 0x02, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x52, 0x53, 0x41, 0x31, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0xCB, 0x89, 0x08, 0xDB, 0xFB, 0x19, 0x4F, 0xE9, 0x2C, 0xAF, 0x81, 0xC4, 0x4F, 0x74, 0x47, 0x49, 0x38, 0x5F, 0xF3, 0x98, 0x22, 0x59, 0x09, 0x69, 0xD6, 0x07, 0x1A, 0x70, 0x4B, 0xD6, 0x29, 0xF8, 0x6C, 0xDB, 0x10, 0xC1, 0xA2, 0x3C, 0x86, 0x20, 0xEE, 0xDA, 0xAF, 0xEB, 0x1C, 0xC5, 0xE8, 0x6E, 0x9F, 0x14, 0xD2, 0x4B, 0x58, 0xF2, 0x98, 0x41, 0x58, 0x34, 0x46, 0xDA, 0x98, 0x67, 0x5A, 0xD7, 0x51, 0x8C, 0x3F, 0x8D, 0x5D, 0x60, 0x5C, 0x39, 0x1B, 0x03, 0xE4, 0x13, 0xB3, 0x02, 0xC7, 0x23, 0xAF, 0x83, 0x3E, 0x92, 0x07, 0x2D, 0xA6, 0xE1, 0x3C, 0xF6, 0x42, 0x11, 0xCC, 0xDE, 0x4D, 0x8A, 0xD8, 0xF7, 0x3B, 0xC3, 0x92, 0xCF, 0x58, 0x82, 0xB7, 0x09, 0x63, 0xDB, 0xCC, 0x8F, 0x82, 0xA4, 0xC3, 0x89, 0xCB, 0x6D, 0xF4, 0x10, 0xD3, 0x4D, 0x12, 0xD2, 0xB2, 0x7E, 0x8C, 0x2C, 0xF5, 0xAB });
            m_AdminObjects = new Dictionary<string, AdminObject>();
            m_Core = this;
            m_Id = "CORE";
            m_SystemFields = new AdminObjectList<SystemField>(this);
            m_QuotaFields = new AdminObjectList<QuotaField>(this);
            CallbackRulesets = new AdminObjectList<CallbackRuleset>(this);
            Resources = new AdminObjectList<Resource>(this);
            Locations = new AdminObjectList<Location>(this);
            Plannings = new AdminObjectList<Planning>(this);
            Preprocessors = new AdminObjectList<Preprocessor>(this);
            AmdSettings = new AdminObjectList<AmdSettings>(this);
            Pauses = new AdminObjectList<Pause>(this);
            Carriers = new AdminObjectList<Carrier>(this);
            NumberFormats = new AdminObjectList<NumberFormat>(this);
            // To ensure not null at campaign loading time
            Teams = new AdminObjectList<Team>(this);
            Roles = new AdminObjectList<Role>(this);
            SecurityContexts = new AdminObjectList<SecurityContext>(this);
            GlobalPrompts = (PromptRepository)SetAdminObject(new PromptRepository(this));

        }

        public AdminCore(string creator): this()
        {
            m_CreatorId = creator;
        }

        public AdminCore(object x)
            : base((AdminCore)null)
        {
            throw new NotImplementedException();
        }

        public bool HasAdminObject(string id, Type targetType)
        {
            if (m_Loading &&  m_MultiIndexedXml.Contains("id", id))
                return true;

            //TODO: Check only but don't load
            return (GetAdminObject(id, targetType, this) != null);
        }

        public bool HasAdminObject(string id)
        {
            lock (m_AdminObjects)
            {
                return m_AdminObjects.ContainsKey(id);
            }
        }

        public bool HasAdminObject<T>(string id) where T : AdminObject
        {
            return HasAdminObject(id, typeof(T));
        }

        public bool IsSaving
        {
            get
            {
                return m_Saving;
            }
        }
        public bool IsLoading
        {
            get
            {
                return m_Loading;
            }
        }
        public AdminObject GetAdminObject(string id, Type targetType)
        {
            return GetAdminObject(id, targetType, this);
        }

        private static XmlNode SelectSingleNodeFromId(string id, XmlNode currentNode)
        {
            if(currentNode == null)
                return null;

            if (currentNode.Attributes != null && currentNode.Attributes["id"] != null && id.Equals(currentNode.Attributes["id"].Value))
                return currentNode;

            foreach (XmlNode nde in currentNode.ChildNodes)
            {
                XmlNode result = SelectSingleNodeFromId(id, nde);
                if (result != null)
                    return result;
            }
            return null;
        }

        public AdminObject GetAdminObject(string id, Type targetType, AdminObject parent)
        {
            lock (m_AdminObjects)
            {

                AdminObject admobj = null;
                if (m_AdminObjects.TryGetValue(id, out admobj))
                    return admobj;


                if (m_DeletedObjects.ContainsKey(id))
                    return m_DeletedObjects[id];

                // to prevent creating objects when saving
                if (m_Saving)
                    return null;

                XmlNode Node = m_MultiIndexedXml.GetSingle(string.Concat("//", targetType.Name, "[@id=\"", id, "\"]"));



                if (Node == null && typeof(AdminObject).Equals(targetType))
                {
                    System.Diagnostics.Debug.WriteLine(string.Concat("Indirect load of unknown type for id ", id));


                    if (m_MultiIndexedXml.Contains("id", id))
                        Node = m_MultiIndexedXml.GetSingle("id", id);


                    if (Node != null)
                        targetType = Type.GetType(string.Concat(targetType.Namespace, ".", Node.Name), false, true);

                    System.Diagnostics.Debug.WriteLine(string.Concat("Target type changed to ", (targetType == null) ? "<null>" : targetType.Name));
                }

                if (Node == null)
                    return null;

                AdminObject NewObject = (AdminObject)Activator.CreateInstance(targetType, new object[] { parent });

                m_AdminObjects.Add(id, NewObject);

                HandleAdminObjectLoadProgress(Node.Name);
                

                NewObject.Load((XmlElement)Node);

                return NewObject;
            }
        }

        public T GetAdminObject<T>(string id) where T : AdminObject
        {
            return (T)GetAdminObject(id, typeof(T));
        }

        internal AdminObject SetAdminObject(AdminObject item)
        {
            lock (m_AdminObjects)
            {
                if (m_AdminObjects.ContainsKey(item.Id))
                {
                }
                else
                {
                    m_AdminObjects.Add(item.Id, item);

                    HandleAdminObjectLoadProgress(item.GetType().Name);

                    if (m_DeletedObjects.ContainsKey(item.Id))
                        m_DeletedObjects.Remove(item.Id);
                }
            }
            return item;
        }

        internal void RemoveAdminObject(AdminObject item)
        {
            lock (m_AdminObjects)
            {
                if (m_AdminObjects.ContainsKey(item.Id))
                {
                    m_AdminObjects.Remove(item.Id);
                }

                item.HasBeenDeleted = true;

                if (m_DeletedObjects.ContainsKey(item.Id))
                {
                    m_DeletedObjects.Remove(item.Id);
                }

                m_DeletedObjects.Add(item.Id, item);
            }

            if (item is IDisposable)
            {
                ((IDisposable)item).Dispose();
            }
        }

        public AdminObject RemoveDeletedObject(string id)
        {
            AdminObject Item = null;

            lock (m_AdminObjects)
            {
                if (m_DeletedObjects.ContainsKey(id))
                {
                    Item = m_DeletedObjects[id];
                    m_DeletedObjects.Remove(id);
                }
            }

            return Item;
        }

        public AdminObject GetAdminObject(string id)
        {
            // TODO: Load from XML if needed

            lock (m_AdminObjects)
            {
                AdminObject admobj = null;
                if (m_AdminObjects.TryGetValue(id, out admobj))
                    return admobj;

                if (m_DeletedObjects.ContainsKey(id))
                {


                    return m_DeletedObjects[id];
                }
            }

            return null;
        }

        public AdminObject GetDeletedObject(string id)
        {
            lock (m_AdminObjects)
            {
                if (m_DeletedObjects.ContainsKey(id))
                    return m_DeletedObjects[id];
            }

            return null;
        }

        internal void AddObjectReference(string parentId, string childId)
        {
            if (parentId == null || childId == null)
                throw new NullReferenceException();
            

            lock (m_ObjectReferences)
            {
                if (!m_ObjectReferences.ContainsKey(childId))
                    m_ObjectReferences.Add(childId, new List<string>());

                int index;
                if ((index = m_ObjectReferences[childId].BinarySearch(parentId)) < 0) 
                    m_ObjectReferences[childId].Insert(~index, parentId);
            }
        }

        internal void RemoveObjectReference(string parentId, string childId)
        {
            RemoveObjectReference(parentId, childId, false);
        }

        internal void RemoveObjectReference(string parentId, string childId, bool dontDeleteOnSave)
        {
            if (parentId == null || childId == null)
                throw new NullReferenceException();

            bool HasReferences = false;

            lock (m_ObjectReferences)
            {
                if (m_ObjectReferences.ContainsKey(childId))
                {
                    m_ObjectReferences[childId].Remove(parentId);

                    if (m_ObjectReferences[childId].Count == 0)
                        m_ObjectReferences.Remove(childId);
                    else
                        HasReferences = true;
                }
            }

            if (!HasReferences)
            {
                if (dontDeleteOnSave)
                {
                    lock (m_AdminObjects)
                    {
                        m_AdminObjects.Remove(childId);
                    }
                }
                else
                    Delete(GetDeletedObject(childId) ?? GetAdminObject(childId));
            }
        }

        internal AdminObject[] GetObjectReferences(string childId)
        {
            List<AdminObject> Refs = new List<AdminObject>();

            lock (m_ObjectReferences)
            {
                if (m_ObjectReferences.ContainsKey(childId))
                {
                    foreach (string parentId in m_ObjectReferences[childId])
                    {
                        AdminObject ParentObject = GetAdminObject(parentId);

                        if (!(ParentObject is AdminCore))
                            Refs.Add(ParentObject);
                    }
                }
            }

            return Refs.ToArray();
        }

        public string GetMacAddress()
        {
            const int MIN_MAC_ADDR_LENGTH = 12;
            string macAddress = string.Empty;
            long maxSpeed = -1;

            foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
            {
                string tempMac = nic.GetPhysicalAddress().ToString();
                if (nic.Speed > maxSpeed &&
                    !string.IsNullOrEmpty(tempMac) &&
                    tempMac.Length >= MIN_MAC_ADDR_LENGTH)
                {
                    maxSpeed = nic.Speed;
                    macAddress = tempMac;
                }
            }
            return macAddress;
        }

        public string GetSessionId(string userid)
        {
            return string.Concat(GetMacAddress(), userid);
        }

        public IEnumerable<string> CheckNumbers(string carrier, string session, IEnumerable<string> numbers, Nixxis.Client.Admin.progressReportDelegate progress)
        {
            if (ConfigurationManager.ConnectionStrings["admin"] == null || string.IsNullOrEmpty(ConfigurationManager.ConnectionStrings["admin"].ConnectionString))
            {
                if (progress != null)
                    progress(-1, "Verifying numbers...", string.Empty);
                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(string.Format("{0}?action=checkNumberingPlanEntries", Core.AdminUri));
                webRequest.Headers.Add("Accept-Language", System.Threading.Thread.CurrentThread.CurrentUICulture.Name);
                webRequest.Method = WebRequestMethods.Http.Post;
                webRequest.Timeout = 15 * 60000;
                webRequest.AllowWriteStreamBuffering = true;

                using (Stream webRequestStream = webRequest.GetRequestStream())
                {
                    using (StreamWriter tw = new StreamWriter(webRequestStream))
                    {
                                                   

                        tw.WriteLine(string.Format("carrier={0}", carrier));
                        tw.WriteLine(string.Format("session={0}", session ) );
                        tw.WriteLine(string.Format("numbers={0}", string.Join(";", numbers)));

                        tw.Close();
                    }

                    webRequestStream.Close();
                }

                try
                {
                    using (HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse())
                    {
                        webRequest.Timeout = 720000;

                        string strResponse = null;
                        using (Stream respStream = response.GetResponseStream())
                        {
                            using (StreamReader sr = new StreamReader(respStream))
                            {
                                string strProgress = null;
                                while ((strProgress = sr.ReadLine()) != null)
                                {
                                    // strProgress in format percent,description                                    
                                    string[] splitResult = strProgress.Split(new string[] { "," }, 3, StringSplitOptions.None);
                                    if (progress != null)
                                    {
                                        if (splitResult.Length == 3)
                                            progress(Int32.Parse(splitResult[0]), splitResult[1], splitResult[2]);
                                    }
                                    strResponse = splitResult[0];
                                }
                            }
                        }

                        if (strResponse != null)
                        {
                            return strResponse.Split(new string[] { ";" }, StringSplitOptions.None);
                        }
                    }
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine(ex.ToString());
                }
            }
            else
            {
                throw new NotImplementedException();
            }
            return null;
        }

        public void ClearReservations(string session)
        {
            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(string.Format("{0}?action=clearReservations", Core.AdminUri));
            webRequest.Headers.Add("Accept-Language", System.Threading.Thread.CurrentThread.CurrentUICulture.Name);
            webRequest.Method = WebRequestMethods.Http.Post;
            webRequest.Timeout = 15 * 60000;
            webRequest.AllowWriteStreamBuffering = true;

            using (Stream webRequestStream = webRequest.GetRequestStream())
            {
                using (StreamWriter tw = new StreamWriter(webRequestStream))
                {                    
                    tw.WriteLine(string.Format("session={0}", session));
                    tw.Close();
                }

                webRequestStream.Close();
            }
            try
            {
                using (HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse())
                {
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine(ex.ToString());
            }
        }

        public long UpdateNumbersFormat(string campaignId, string systemDataTableName, string oldNumberFormat, string newNumberFormat, Nixxis.Client.Admin.progressReportDelegate progress)
        {
            if (progress != null)
                progress(-1, "Generating export file...", string.Empty);
            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(string.Format("{0}?action=updateNumbersFormat", Core.AdminUri));
            webRequest.Headers.Add("Accept-Language", System.Threading.Thread.CurrentThread.CurrentUICulture.Name);
            webRequest.Method = WebRequestMethods.Http.Post;
            webRequest.Timeout = 15 * 60000;
            webRequest.AllowWriteStreamBuffering = true;

            using (Stream webRequestStream = webRequest.GetRequestStream())
            {
                using (StreamWriter tw = new StreamWriter(webRequestStream))
                {
                    tw.WriteLine(string.Format("user={0}", m_CreatorId));
                    tw.WriteLine(string.Format("campaignId={0}", campaignId));
                    tw.WriteLine(string.Format("oldNumberFormat={0}", oldNumberFormat));
                    tw.WriteLine(string.Format("newNumberFormat={0}", newNumberFormat));

                    tw.Close();
                }

                webRequestStream.Close();
            }

            try
            {
                using (HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse())
                {
                    webRequest.Timeout = 720000;

                    string strResponse = null;
                    using (Stream respStream = response.GetResponseStream())
                    {
                        using (StreamReader sr = new StreamReader(respStream))
                        {
                            string strProgress = null;
                            while ((strProgress = sr.ReadLine()) != null)
                            {
                                // strProgress in format percent,description                                    
                                string[] splitResult = strProgress.Split(new string[] { "," }, 3, StringSplitOptions.None);
                                if (progress != null)
                                {
                                    if (splitResult.Length == 3)
                                        progress(Int32.Parse(splitResult[0]), splitResult[1], splitResult[2]);
                                }
                                strResponse = splitResult[0];
                            }
                        }
                    }

                    if (strResponse != null)
                    {
                        return Int32.Parse(strResponse);
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine(ex.ToString());
            }
            return -1;
        }


        public XmlDocument Save(IEnumerable<XmlNode> extraOperations)
        {
            XmlDocument saveResult = new XmlDocument();
            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(string.Format("{0}?action=saveXml&account={1}", m_AdminUri, m_CreatorId));
            webRequest.Headers.Add("Accept-Language", System.Threading.Thread.CurrentThread.CurrentUICulture.Name);
            webRequest.Method = WebRequestMethods.Http.Post;

            webRequest.ServicePoint.Expect100Continue = false;

            webRequest.AllowWriteStreamBuffering = true;

            XmlDocument Doc = new XmlDocument();

            Save(Doc);

            foreach (XmlNode n in extraOperations)
                Doc.DocumentElement.AppendChild(Doc.ImportNode(n, true));

            using (Stream webRequestStream = webRequest.GetRequestStream())
            {

                Doc.Save(webRequestStream);

                webRequestStream.Close();
            }

            try
            {
                using (HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (Stream stream = response.GetResponseStream())
                    {
                        saveResult.Load(stream);
                    }
                    // TODO: handle statuscode and display warning...



                    response.Close();
                }
            }
            catch (WebException webex)
            {                   
                System.Diagnostics.Trace.WriteLine(webex.ToString());
                throw webex;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine(ex.ToString());
            }


            return saveResult;
        }


        public string HandleNumberFormat(string phoneNumber, string srcNumberFormat, string dstNumberFormat)
        {
            try
            {
                NumberFormat srcnf = GetAdminObject<NumberFormat>(srcNumberFormat);
                if (srcnf == null || srcnf.Engine == null)
                {
                    System.Diagnostics.Trace.WriteLine(string.Format("Cannot get number format {0} while converting phone number {1}", srcnf, phoneNumber), "AdminLink");
                    return phoneNumber;
                }

                if (string.IsNullOrEmpty(dstNumberFormat))
                {
                    System.Diagnostics.Trace.WriteLine(string.Format("No destination number format specified while converting phone number {0}", phoneNumber), "AdminLink");
                    return phoneNumber;
                }

                NumberFormat dstnf = GetAdminObject<NumberFormat>(dstNumberFormat);
                if (dstnf == null || dstnf.Engine == null)
                {
                    System.Diagnostics.Trace.WriteLine(string.Format("Cannot get number format {0} while converting phone number {1}", dstnf, phoneNumber), "AdminLink");
                    return phoneNumber;
                }


                if (srcnf.Engine.CanConvertTo(dstnf.Engine))
                    return srcnf.Engine.ConvertTo(phoneNumber, dstnf.Engine);
                else
                    System.Diagnostics.Trace.WriteLine(string.Format("Cannot convert {0} from {1} to {2}", phoneNumber, srcnf.Engine.Description, dstnf.Description), "AdminLink");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine(ex.ToString());
            }
            return phoneNumber;
        }


        public override void Save(XmlDocument Doc)
        {
            m_Saving = true;
            Doc.AppendChild(Doc.CreateElement("Admin"));

            XmlAttribute att = Doc.CreateAttribute("user");
            att.Value = m_CreatorId;
            Doc.DocumentElement.Attributes.Append(att);

            lock (m_AdminObjects)
            {
                foreach (AdminObject Obj in m_AdminObjects.Values)
                {

                    Obj.Save(Doc);
                    
                }
            }

            lock (m_DeletedObjects)
            {
                foreach (AdminObject Obj in m_DeletedObjects.Values)
                {
                    if (Obj.HasBeenLoaded && Obj.HasBeenDeleted)
                        Obj.Save(Doc);
                }
            }

            System.Diagnostics.Trace.WriteLine(Doc.OuterXml);


            m_Saving = false;

        }

        public AdminObject Create(Type objectType, AdminObject parent, string id)
        {
            if (objectType == null)
                throw new ArgumentNullException("objectType");

            AdminObject NewObject = Activator.CreateInstance(objectType, parent ?? this) as AdminObject;

            NewObject.m_CreatorId = m_CreatorId;


            NewObject.m_ModificatorId = m_CreatorId;

            if (!(NewObject is AdminObjectLink) && !(NewObject is AdminObjectList))
            {
                NewObject.Id = id ?? (Guid.NewGuid().ToString("N"));
            }

            if (NewObject is SecuredAdminObject)
            {
                ((SecuredAdminObject)NewObject).OwnerUser.TargetId = m_CreatorId;
            }

            NewObject.LoadChildLists(null, null);

            SetAdminObject(NewObject);

            return NewObject;
        }

        public T Create<T>(AdminObject parent, string id) where T : AdminObject
        {
            return (T)Create(typeof(T), parent, id);
        }

        public T Create<T>(string id) where T : AdminObject
        {
            return (T)Create(typeof(T), null, id);
        }

        public T Create<T>(AdminObject parent) where T : AdminObject
        {
            return (T)Create(typeof(T), parent, null);
        }

        public T Create<T>() where T : AdminObject
        {
            return (T)Create(typeof(T), null, null);
        }

        List<string> m_DeletingIds = new List<string>();

        public bool Delete(AdminObject item)
        {
            bool IsFirstDeleting = false;
            string[] ParentIds = null;

            if (item == null)
            {
                return false;
            }

            Monitor.Enter(m_DeletingIds);

            try
            {
                IsFirstDeleting = (m_DeletingIds.Count == 0);
                bool AlreadyDeleting = (m_DeletingIds.Contains(item.Id));

                if (!AlreadyDeleting)
                {
                    if (!string.IsNullOrEmpty(item.Id))
                        m_DeletingIds.Add(item.Id);

                    item.Clear();
                }

                lock (m_ObjectReferences)
                {
                    List<string> Parents = null;
                    if (m_ObjectReferences.TryGetValue(item.Id, out Parents))
                    {
                        ParentIds = Parents.ToArray();
                    }
                }

                if (ParentIds != null)
                {
                    foreach (string ParentId in ParentIds)
                    {
                        AdminObject ParentObject = ((ParentId == "CORE") ? this : GetDeletedObject(ParentId) ?? GetAdminObject(ParentId));

                        if (ParentObject == null)
                        {
                            System.Diagnostics.Trace.WriteLine(string.Format("Invalid object reference {0}", ParentId));
                            continue;
                        }

                        if (ParentObject is AdminObjectList)
                        {
                            ((AdminObjectList)ParentObject).Remove(item);
                        }
                        else if (ParentObject is AdminObjectReference)
                        {
                            ((AdminObjectReference)ParentObject).TargetId = null;
                        }
                        else
                        {
                            Type ParentType = ParentObject.GetType();
                            PropertyInfo[] Properties = ParentType.GetProperties();

                            foreach (PropertyInfo PInfo in Properties)
                            {
                                if (TypeHelper.GetAttributeOrDefault<AdminDeleteAttribute>(PInfo, true).SkipDelete)
                                    continue;

                                if (PInfo.PropertyType.IsSubclassOf(typeof(AdminObjectList)))
                                {
                                    AdminObjectList PValue = (AdminObjectList)PInfo.GetValue(ParentObject, null);

                                    if (PValue != null)
                                        PValue.Remove(item);
                                }
                                else if (PInfo.PropertyType.IsSubclassOf(typeof(AdminObjectReference)))
                                {
                                    AdminObjectReference PValue = (AdminObjectReference)PInfo.GetValue(ParentObject, null);

                                    if (PValue != null && PValue.TargetId == item.Id)
                                        PValue.TargetId = null;
                                }
                            }
                        }
                    }
                }

                if (item is AdminObjectReference)
                    ((AdminObjectReference)item).TargetId = null;

                item.Parent = null;
                RemoveAdminObject(item);
            }
            finally
            {
                if (IsFirstDeleting)
                    m_DeletingIds.Clear();

                Monitor.Exit(m_DeletingIds);
            }

            return true;
        }

        public void CreateDemoEntries(string label, string indestination, string outdestination, Action saveFunction, Action<string> displayWarning)
        {
            CreateDemoEntries(label, indestination, null, outdestination, saveFunction, displayWarning);
        }

        public void CreateDemoEntries(string label, NumberingPlanEntry numberingPlanEntry, string outdestination, Action saveFunction, Action<string> displayWarning)
        {
            CreateDemoEntries(label, null, numberingPlanEntry, outdestination, saveFunction, displayWarning);
        }

        public void CreateDemoEntries(string label, string indestination, NumberingPlanEntry numberingPlanEntry, string outdestination, Action saveFunction, Action<string> displayWarning )
        {
            NumberingPlanEntry createdNPE = null;

            Carrier c = GetAdminObject<Carrier>("defaultcarrier++++++++++++++++++");

            if(numberingPlanEntry!=null)
            {
                createdNPE = numberingPlanEntry;
            }
            else
            {
                createdNPE = c.CreateNumberingPlanEntry(indestination);

                if (createdNPE == null)
                {
                    if (displayWarning != null)
                        displayWarning(string.Format(TranslationContext.Default.Translate("The number {0} chosen for inbound is already defined. Please, use another code."), indestination));
                    return;
                }
            }

            Queue queue = Create<Queue>();
            queue.GroupKey = "Demo";
            queue.Description = label;
            Queues.Add(queue);

            Team team = Create<Team>();
            team.GroupKey = "Demo";
            team.Description = label;
            team.Queues.Add(queue);
            team.Agents.Add(GetAdminObject<Agent>("defaultagent++++++++++++++++++++"));
            Teams.Add(team);


            Campaign newCamp = Create<Campaign>();

            queue.OwnerId = newCamp.Id;

            newCamp.GroupKey = "Demo";
            newCamp.Description = label;

            // find out why !
            try
            {
                newCamp.NumberFormat.TargetId = GetAdminObject<Location>("defaultlocation+++++++++++++++++").NumberFormat.TargetId;
            }
            catch { }

            Campaigns.Add(newCamp);

            newCamp.HasSystemInboundActivity = true;

            InboundActivity inAct = newCamp.SystemInboundActivity;
            createdNPE.Activity.Target = inAct;
            inAct.Destination = createdNPE.Id;
            inAct.AutomaticRecording = true;


            #region Welcome.wav content
            byte[] welcomeContent = { 0x52,0x49,0x46,0x46,0x60,0xE9,0x0,0x0,0x57,0x41,0x56,0x45,0x66,0x6D,0x74,0x20,0x10,0x0,0x0,
0x0,0x1,0x0,0x1,0x0,0x40,0x1F,0x0,0x0,0x80,0x3E,0x0,0x0,0x2,
0x0,0x10,0x0,0x64,0x61,0x74,0x61,0x3C,0xE9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,
0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,
0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,
0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,
0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,
0x0,0xFF,0xFF,0x1,0x0,0xFE,0xFF,0x1,0x0,0xFE,0xFF,0x1,0x0,0xFE,0xFF,0x1,0x0,0xFF,0xFF,0x0,
0x0,0x0,0x0,0xFF,0xFF,0x1,0x0,0xFD,0xFF,0x3,0x0,0xFB,0xFF,0x5,
0x0,0xF9,0xFF,0x7,0x0,0xF7,0xFF,0x8,0x0,0xF6,0xFF,0x8,0x0,0xF7,0xFF,0x7,0x0,0xFA,0xFF,0x1,
0x0,0x2,0x0,0xF6,0xFF,0x13,0x0,0xD8,0xFF,0x57,0x0,0x9B,0xFC,0xB5,
0xF9,0x6A,0xF9,0x2A,0xF8,0xB5,0xF7,0xD9,0xF6,0x77,0xF6,0xFB,0xF5,0xEA,0xF5,0xF7,0xF5,0x3A,0xF6,0xAF,
0xF6,0x59,0xF7,0x5A,0xF8,0xCA,0xF9,0xDB,0xFB,0x70,0xFE,0x90,0x1,0xD8,
0x4,0x18,0x8,0xDD,0xA,0xF7,0xC,0x13,0xE,0x42,0xE,0x6F,0xD,0x1E,0xC,0xE8,0xA,0xF5,0x9,0x3C,
0x9,0x79,0x8,0x96,0x7,0xCA,0x6,0xFC,0x5,0x1B,0x5,0x1E,0x4,0xFA,
0x2,0xC8,0x1,0x6D,0x0,0xFC,0xFE,0x63,0xFD,0xB9,0xFB,0x2,0xFA,0x54,0xF8,0xD8,0xF6,0x70,0xF5,0x11,
0xF4,0xBC,0xF2,0x7B,0xF1,0x4D,0xF0,0x43,0xEF,0x62,0xEE,0xEA,0xED,0x49,
0xEE,0x8E,0xEF,0x97,0xF1,0x7F,0xF4,0x3E,0xF8,0x91,0xFC,0x5E,0x1,0x5D,0x6,0x28,0xB,0x4D,0xF,0x89,
0x12,0x74,0x14,0xAE,0x14,0x2,0x13,0x47,0x10,0x70,0xE,0x1A,0xE,0x68,
0xE,0x62,0xE,0xCF,0xD,0xB,0xD,0x34,0xC,0x56,0xB,0x61,0xA,0xF4,0x8,0x2A,0x7,0x1A,0x5,0xF2,
0x2,0xF7,0x0,0x39,0xFF,0xBF,0xFD,0x45,0xFC,0xC9,0xFA,0x44,0xF9,0x9A,
0xF7,0xCB,0xF5,0xF3,0xF3,0x16,0xF2,0x41,0xF0,0x76,0xEE,0xB2,0xEC,0xFD,0xEA,0x26,0xE9,0x79,0xE7,0xA0,
0xE6,0xE7,0xE6,0x58,0xE8,0x4C,0xEB,0xB1,0xEF,0x21,0xF5,0x65,0xFB,0x33,
0x2,0xDD,0x8,0x9C,0xE,0x4,0x13,0x93,0x15,0x2,0x16,0xD3,0x13,0xD7,0xF,0xAC,0xC,0xFD,0xB,0xC1,
0xC,0x8B,0xD,0xCE,0xD,0x82,0xD,0x5C,0xD,0xD,0xD,0x6E,0xC,0x9A,
0xB,0x91,0xA,0x3B,0x9,0x7F,0x7,0x8A,0x5,0x83,0x3,0xA9,0x1,0xE,0x0,0xA3,0xFE,0x43,0xFD,0xDB,
0xFB,0x72,0xFA,0x14,0xF9,0x97,0xF7,0xF1,0xF5,0x4,0xF4,0xAC,0xF1,0xFE,
0xEE,0x24,0xEC,0x64,0xE9,0xE2,0xE6,0x88,0xE4,0xB8,0xE2,0x1D,0xE2,0xF3,0xE2,0x30,0xE5,0x15,0xE9,0xB6,
0xEE,0x91,0xF5,0x2,0xFD,0x6C,0x4,0x33,0xB,0x9E,0x10,0x3C,0x14,0xB9,
0x15,0xAA,0x14,0x39,0x11,0x5D,0xD,0x99,0xB,0xA1,0xC,0xCD,0xE,0x8E,0x10,0x99,0x11,0x6C,0x11,0x9C,
0x10,0xC4,0xF,0xE4,0xE,0x3C,0xE,0x75,0xD,0x63,0xC,0xF7,0xA,0x38,
0x9,0x97,0x7,0xDD,0x5,0xF6,0x3,0xC,0x2,0x13,0x0,0xF9,0xFD,0x8C,0xFB,0xDB,0xF8,0x53,0xF6,0x88,
0xF3,0x95,0xF0,0xF0,0xED,0xF7,0xEA,0x36,0xE8,0xF8,0xE5,0x1C,0xE3,0xC,
0xE0,0x57,0xDE,0xB6,0xDE,0x29,0xE1,0x91,0xE5,0x30,0xEC,0x87,0xF4,0x82,0xFD,0x39,0x6,0xF1,0xD,0xBA,
0x13,0xD4,0x16,0x28,0x17,0xFD,0x14,0x7A,0x11,0x7D,0xE,0x66,0xD,0xE5,
0xE,0xCA,0x11,0xE4,0x13,0x18,0x14,0x5F,0x12,0xE7,0xF,0x19,0xE,0xB9,0xD,0xF3,0xD,0x30,0xE,0x37,
0xE,0x5C,0xD,0xCF,0xB,0x59,0x9,0x73,0x6,0xA,0x4,0x6F,0x1,0x4F,
0xFE,0x6A,0xFB,0xC8,0xF8,0x44,0xF6,0x7D,0xF3,0x8E,0xF0,0x93,0xED,0x3,0xEA,0x53,0xE6,0xB3,0xE2,0xA7,
0xDF,0x9C,0xDC,0x46,0xDA,0xBB,0xDA,0x50,0xDE,0x1,0xE5,0x1C,0xEE,0xAD,
0xF8,0x60,0x3,0x90,0xC,0x1E,0x13,0xC4,0x16,0x66,0x17,0xAF,0x15,0x14,0x13,0xC0,0x10,0x21,0xF,0x25,
0xF,0x9E,0x10,0x7C,0x12,0xB0,0x13,0x13,0x13,0x60,0x11,0xA0,0xF,0x2E,
0xF,0xE4,0x10,0x8D,0x13,0x1B,0x15,0xA4,0x14,0xC2,0x11,0x80,0xC,0xF4,0x6,0x75,0x2,0x54,0xFF,0x87,
0xFD,0x7B,0xFB,0xCA,0xF8,0x29,0xF5,0x1,0xF1,0xEE,0xEC,0x67,0xE9,0x24,
0xE6,0xCE,0xE2,0x7B,0xDF,0x68,0xDB,0x80,0xD7,0xE8,0xD3,0x49,0xD3,0x33,0xD7,0x3D,0xDF,0x2D,0xEB,0x1A,
0xF9,0x47,0x6,0xB3,0x10,0xCF,0x16,0x8C,0x18,0xDA,0x17,0x7,0x16,0xD3,
0x14,0x71,0x14,0x0,0x14,0xB7,0x12,0x86,0x10,0xC1,0xC,0x8F,0x8,0x36,0x6,0xFD,0x6,0x4C,0xB,0xB6,
0x11,0x2D,0x18,0xC2,0x1C,0x9F,0x1D,0x14,0x1A,0x42,0x13,0xE1,0xA,0xAE,
0x4,0x5D,0x2,0x58,0x1,0x61,0xFE,0xB7,0xF8,0x8E,0xF1,0x11,0xEB,0xFA,0xE6,0x62,0xE6,0xAA,0xE7,0x73,
0xE7,0x9F,0xE4,0x53,0xDE,0x48,0xD6,0x65,0xCE,0xDF,0xCA,0x96,0xD0,0x84,
0xDE,0x44,0xF1,0xFE,0x3,0xAD,0x11,0x47,0x18,0xBA,0x19,0xD2,0x18,0xC,0x19,0xEC,0x1B,0x92,0x1E,0xC0,
0x1E,0xC6,0x1A,0xF6,0x11,0x49,0x7,0x6A,0xFF,0x71,0xFD,0xF2,0x2,0xDB,
0xD,0xD2,0x18,0x2C,0x20,0xC3,0x21,0xE4,0x1E,0x6F,0x1A,0xDD,0x16,0xA9,0x14,0xC,0x12,0x6E,0xC,0x9A,
0x2,0xBD,0xF6,0x4D,0xEB,0xC8,0xE3,0x52,0xE1,0xD1,0xE2,0x8B,0xE5,0xA7,
0xE6,0x7B,0xE3,0x84,0xDC,0xF2,0xD3,0xBC,0xCD,0x7E,0xCB,0x65,0xCC,0x93,0xD5,0x90,0xE3,0xDA,0xF2,0x4A,
0x2,0x56,0xD,0x58,0x14,0x5B,0x1A,0xF5,0x1E,0x1D,0x22,0x22,0x24,0xAB,
0x21,0xE3,0x1B,0xE6,0x13,0x4E,0xA,0xF1,0x3,0xD4,0x3,0xDB,0x8,0x6C,0x11,0xD0,0x19,0xD6,0x1E,0x4D,
0x21,0xED,0x21,0x7A,0x21,0x5A,0x21,0x70,0x1E,0x70,0x16,0x39,0xB,0xDA,
0xFD,0xAA,0xF2,0xA0,0xEA,0xBD,0xE4,0x87,0xE0,0xBC,0xDD,0x72,0xDB,0x11,0xDA,0x92,0xD8,0xA8,0xD6,0x93,
0xD4,0x91,0xD0,0x61,0xCF,0xC9,0xCC,0x67,0xD0,0x56,0xE0,0x9C,0xF3,0x67,
0x7,0x7B,0x14,0x4B,0x16,0x17,0x15,0x82,0x16,0x91,0x19,0xB4,0x1F,0x6B,0x20,0xF0,0x16,0x77,0xA,0xBE,
0xFF,0x11,0xFB,0xA3,0x2,0xCD,0xF,0x5D,0x1C,0x9B,0x25,0xD2,0x26,0xBC,
0x25,0x8F,0x27,0x8D,0x28,0x8F,0x26,0x27,0x1F,0xE0,0xF,0xB,0x1,0xC8,0xF6,0x52,0xF1,0x30,0xEF,0x4D,
0xEB,0x11,0xE3,0x7D,0xDC,0x2F,0xD9,0x40,0xD9,0xA2,0xD9,0x7D,0xD6,0x39,
0xCE,0xB4,0xC6,0xAA,0xC4,0x4F,0xC5,0x58,0xD5,0x9E,0xED,0xDA,0x0,0x5,0xF,0x7E,0x15,0xE,0x16,0x59,
0x1A,0xBD,0x1F,0xEE,0x1E,0xB8,0x18,0x5A,0xD,0xDD,0x2,0x3B,0x1,0x1,
0x4,0xF2,0x5,0x60,0xA,0x47,0xE,0x4C,0x17,0x28,0x29,0xC1,0x36,0xAD,0x3A,0x79,0x34,0xF0,0x25,0x1F,
0x1B,0xB8,0x13,0xA7,0xD,0xA4,0x4,0x68,0xF9,0xAA,0xF0,0x97,0xED,0x8B,
0xEF,0xD1,0xEF,0x46,0xEA,0xBF,0xE1,0x9D,0xDC,0x54,0xD5,0xA6,0xD4,0x36,0xCE,0xC4,0xC6,0xD4,0xC1,0xCD,
0xC0,0xA1,0xDB,0xB7,0xFD,0xF,0x13,0x2E,0x1A,0x38,0x16,0x74,0x13,0xFF,
0x1B,0x56,0x21,0x59,0x1A,0xF0,0xB,0xD9,0xFD,0x1C,0xF9,0x4B,0x0,0xD5,0x6,0x6A,0x6,0x9E,0x7,0x33,
0x10,0x77,0x25,0x75,0x39,0x28,0x3B,0x1D,0x30,0x5F,0x23,0x4C,0x1A,0x7,
0x17,0xCE,0xE,0xB5,0xFF,0x7C,0xF3,0xFB,0xEF,0xA9,0xF4,0xF0,0xFA,0x81,0xF6,0xF4,0xEA,0x8A,0xE3,0x3F,
0xE3,0xE1,0xE1,0x55,0xD8,0x45,0xC9,0x93,0xBB,0xA6,0xBC,0x5F,0xC1,0x41,
0xD6,0xDE,0xF7,0x73,0x8,0x31,0x12,0xD8,0x19,0xC4,0x1C,0x5B,0x22,0x80,0x1F,0x5B,0xB,0xF4,0xFD,0x60,
0xF8,0xC4,0xF6,0x6C,0xFE,0xE3,0xFE,0x67,0xFD,0x9C,0xA,0xF7,0x19,0xA9,
0x25,0x6E,0x32,0x80,0x2F,0xDE,0x2B,0xC5,0x2C,0x56,0x20,0xC2,0x16,0x52,0xA,0x34,0xFB,0xE,0xFA,0x77,
0xFD,0xE4,0xFA,0x78,0xFD,0x43,0xFC,0xA7,0xF5,0xA4,0xF4,0xDC,0xE9,0x86,
0xDE,0xAE,0xD6,0x25,0xCC,0xD3,0xC1,0x2E,0xBC,0xDC,0xB4,0x96,0xC3,0x77,0xF4,0xD1,0x11,0xAA,0x18,0x19,
0x1C,0x6,0x18,0x72,0x22,0xB1,0x26,0xAD,0x8,0x28,0xF3,0x17,0xEF,0xB6,
0xF3,0x2C,0x0,0xF0,0x0,0x15,0xFC,0x54,0xA,0x5D,0x1E,0x68,0x29,0x21,0x2D,0xE1,0x21,0x10,0x1D,0xEA,
0x24,0xA0,0x25,0x3D,0x1C,0x76,0xB,0xF8,0xFE,0x76,0x4,0x5B,0x9,0xF1,
0x6,0x56,0x0,0x73,0xFC,0xBB,0x1,0x4D,0x2,0xDE,0xF5,0x94,0xE3,0xB0,0xD5,0x99,0xCE,0xAE,0xCA,0xAF,
0xBE,0x2F,0xB6,0xA4,0xB5,0x5F,0xD7,0x48,0xB,0x6,0x1B,0x74,0x1A,0x41,
0x1C,0x18,0x20,0xA2,0x25,0x2C,0x15,0x78,0xF2,0x8F,0xE6,0x92,0xED,0xC0,0xFB,0x66,0x4,0x8E,0x1,0xD9,
0x6,0xAD,0x1A,0xCC,0x2F,0xE4,0x33,0x3,0x27,0x36,0x1A,0x6F,0x19,0x2F,
0x19,0xF3,0x10,0x2C,0x5,0x3D,0x1,0xDA,0x6,0x2E,0xF,0xE0,0xF,0xD5,0x7,0x80,0x3,0x5B,0x3,0x56,
0xFF,0x33,0xF3,0x97,0xE4,0x4C,0xD7,0xA1,0xD0,0xF,0xC8,0x8A,0xBD,0xD4,
0xB4,0xA6,0xB8,0x86,0xEA,0x5F,0x16,0x29,0x19,0x32,0x19,0xAD,0x13,0x12,0x1B,0x8F,0x22,0x7F,0x2,0x60,
0xE6,0x1E,0xE7,0x47,0xF3,0xB8,0x4,0xC4,0x7,0xB2,0x2,0x11,0x13,0xEF,
0x27,0x86,0x2D,0xA4,0x26,0x1,0x15,0x9E,0xF,0x4D,0x16,0xBE,0xF,0x8C,0x7,0xC,0x5,0xB,0x8,0xC3,
0x11,0x3C,0x12,0xB2,0xA,0x25,0xA,0x17,0x7,0x15,0x0,0x72,0xF5,0x69,
0xE7,0x9,0xE0,0x9E,0xD8,0x37,0xCF,0x6E,0xC2,0x6E,0xBE,0x17,0xB7,0x65,0xCA,0xE0,0x0,0xC6,0x16,0xF0,
0x1C,0xCD,0x19,0xD7,0xF,0x7A,0x1D,0x54,0x13,0x90,0xEF,0x53,0xE3,0xE0,
0xE7,0xFC,0xFB,0xDF,0xF,0x70,0xA,0x68,0xC,0x1,0x21,0xC0,0x29,0xC,0x2A,0x88,0x17,0x1C,0x4,0x35,
0xF,0x2D,0x15,0x89,0xE,0x5F,0x7,0xD3,0x4,0xF4,0x11,0x3F,0x1A,0xEB,
0xE,0x44,0x7,0xA,0x7,0x3,0x9,0xED,0x4,0x27,0xF1,0x5E,0xE3,0x5F,0xDD,0x43,0xD6,0x9,0xC9,0xB4,
0xBE,0x29,0xB8,0x6F,0xB9,0xA4,0xE7,0x28,0x13,0x73,0x1C,0x7E,0x1F,0x87,
0x11,0xAB,0x12,0x1B,0x1B,0x61,0xFF,0xC7,0xE5,0x7C,0xE2,0x7B,0xED,0x54,0xA,0x85,0x16,0x82,0xE,0x62,
0x18,0x26,0x22,0x43,0x29,0x67,0x26,0x88,0xB,0x6E,0x2,0x60,0xB,0x64,
0xF,0xA4,0x10,0x4C,0xA,0xB7,0x9,0xF2,0x15,0x17,0x17,0x1A,0x11,0x52,0x9,0xEB,0x2,0x9B,0x3,0x62,
0xFB,0xA3,0xEC,0xDA,0xE3,0x7,0xDA,0x9C,0xCF,0x83,0xC5,0x9B,0xBF,0x19,
0xB6,0x37,0xC7,0x3F,0x0,0xB9,0x1C,0xC6,0x23,0x7A,0x1B,0x78,0xB,0xBF,0x14,0xCF,0xE,0x73,0xF1,0xBF,
0xE2,0x10,0xE3,0xBD,0xFA,0x61,0x19,0x9C,0x16,0x9E,0x14,0x31,0x1D,0xC3,
0x24,0xC0,0x2A,0xE9,0x18,0x34,0x1,0xFA,0x0,0x67,0x7,0xA8,0xE,0x4E,0x13,0xA9,0xD,0x42,0x13,0xFE,
0x17,0x4F,0x13,0xB1,0xC,0xC2,0x1,0x2C,0xFD,0xD4,0xFB,0x1C,0xF1,0xB,
0xE8,0x5C,0xDE,0x40,0xD4,0x6F,0xCB,0x19,0xC4,0x94,0xB8,0x3C,0xB9,0x30,0xEC,0xA1,0x15,0x62,0x21,0xD7,
0x1E,0x8A,0x9,0x82,0xB,0x99,0x13,0xB7,0xFD,0xCC,0xE8,0x1A,0xE1,0x13,
0xEF,0xCB,0x12,0x71,0x1C,0x8A,0x16,0xD3,0x18,0xBF,0x1D,0x34,0x26,0x4E,0x1F,0xC3,0x4,0xC8,0xFB,0x33,
0x2,0x5C,0xC,0x9F,0x18,0x82,0x12,0x23,0xF,0xF4,0x14,0x87,0x12,0xDB,
0xB,0x89,0x2,0x21,0xFA,0xA7,0xFA,0xE0,0xF5,0xDD,0xEB,0xF6,0xE0,0x92,0xD6,0xC0,0xCD,0xF8,0xC9,0x59,
0xBD,0xF4,0xB3,0x69,0xE0,0xCA,0xC,0x57,0x20,0xB4,0x25,0x62,0xF,0x61,
0x7,0x21,0x11,0x8C,0x1,0xCA,0xEE,0xFC,0xE5,0xBD,0xE9,0x4D,0xC,0xCC,0x1F,0x47,0x1E,0x46,0x1B,0x20,
0x18,0x2A,0x1E,0x97,0x21,0x3,0xD,0xB5,0xFF,0xAA,0x2,0x65,0x8,0xB0,
0x19,0x40,0x1A,0xDD,0x12,0x8A,0x11,0xF3,0xE,0x88,0xC,0xCA,0x8,0x38,0xFD,0x9E,0xF8,0xAA,0xF7,0x3,
0xF0,0xD,0xE7,0x63,0xD7,0xB8,0xCB,0xC5,0xC8,0x4D,0xC0,0xBB,0xB4,0xF5,
0xDA,0x16,0xD,0x26,0x24,0xFD,0x29,0x5D,0x10,0xBD,0x3,0x1A,0xD,0x6C,0x5,0xFF,0xF3,0x22,0xE9,0x24,
0xED,0xA4,0x9,0x58,0x1F,0xD7,0x1F,0xA1,0x19,0xD3,0x18,0x9D,0x1D,0x34,
0x20,0x9B,0x12,0xD5,0x1,0xB1,0x0,0xA3,0xB,0xFB,0x19,0xAC,0x19,0x4E,0x12,0x5B,0xE,0xB2,0xD,0x67,
0xC,0x77,0x4,0x46,0xF9,0x31,0xF4,0x44,0xF1,0x6E,0xEC,0x8E,0xE2,0x30,
0xD5,0xE1,0xCA,0x49,0xC9,0xA,0xBB,0x3E,0xBC,0x85,0xEB,0xCB,0x11,0x2C,0x26,0x3C,0x23,0x7D,0x3,0xA,
0xFF,0xB0,0x9,0x17,0xFE,0x22,0xF3,0x19,0xED,0xE7,0xF7,0x81,0x14,0x6C,
0x21,0x5C,0x1D,0xB9,0x19,0xE2,0x17,0xD1,0x1C,0x96,0x1A,0xAB,0xB,0xEB,0x4,0x90,0x9,0xF0,0xE,0x61,
0x18,0xEA,0x18,0x9D,0xE,0xB7,0xC,0xE2,0x9,0xE9,0x3,0xBF,0xFE,0xCC,
0xF4,0x23,0xEF,0x3B,0xF2,0xC,0xE8,0x0,0xDC,0x48,0xCC,0x80,0xC2,0x34,0xB6,0x42,0xB7,0x89,0xE0,0xA7,
0x6,0x8A,0x21,0x98,0x22,0x1F,0xF,0x4C,0x5,0x55,0x4,0xAC,0xFB,0x4C,
0xF3,0xF0,0xEE,0xDE,0xF5,0x9B,0xC,0x1B,0x1E,0x32,0x20,0x7F,0x1B,0x86,0x17,0xD3,0x17,0xE9,0x1B,0x7E,
0x16,0xCE,0xD,0xF2,0x9,0x2D,0xC,0x6B,0x13,0xB4,0x19,0x7A,0x14,0x91,
0xA,0xC5,0x6,0x34,0x3,0xFB,0x1,0x89,0xFD,0x52,0xF5,0xA,0xF0,0xE9,0xE6,0x10,0xDC,0xA0,0xCD,0x30,
0xC0,0x91,0xB2,0xE1,0xBB,0xCA,0xE6,0x95,0xD,0x6F,0x1F,0xD3,0x1F,0x64,
0x10,0x31,0x7,0xB6,0x8,0x3B,0xFA,0x12,0xF7,0x5D,0xF6,0x3A,0xF9,0x3E,0xB,0xB2,0x15,0xCE,0x1D,0xBE,
0x21,0xCD,0x1D,0x40,0x18,0xD3,0x17,0xE,0x13,0x88,0xE,0xF8,0xB,0xD4,
0xA,0xAA,0x10,0x9,0x14,0x5,0x12,0x74,0xE,0xA4,0x5,0x4D,0x1,0x8,0xFE,0x95,0xF4,0x5D,0xF1,0xBC,
0xEB,0x8D,0xE4,0xAA,0xD8,0xCE,0xC8,0x48,0xB5,0x56,0xB3,0xA7,0xD5,0xA5,
0xFC,0x14,0x1B,0x89,0x22,0x45,0x12,0x1C,0x8,0x5E,0x8,0xCB,0x1,0xB,0xFE,0x3E,0xF8,0x8E,0xF6,0x94,
0x9,0xFF,0x15,0x9A,0x1C,0xE9,0x1F,0x5A,0x1A,0xA7,0x19,0xB3,0x1C,0xBE,
0x15,0xB4,0xF,0x3F,0xE,0x74,0xC,0x8,0xF,0x8,0xF,0xE,0xC,0xDA,0xA,0x6B,0x8,0xAE,0x1,0xF8,
0xFB,0x7C,0xF2,0x57,0xEE,0x36,0xEC,0xF8,0xE4,0x8C,0xDB,0x3B,0xCC,0xB2,
0xB5,0x48,0xB4,0xAE,0xD1,0xFC,0xF2,0xCC,0x15,0x2,0x1F,0x12,0x12,0xC6,0xA,0x1D,0x6,0x7,0x4,0xD3,
0x4,0xF5,0xFB,0xB9,0xF7,0xCE,0x2,0x89,0xC,0x50,0x1A,0x1E,0x20,0x3C,
0x1A,0x77,0x1B,0xB6,0x19,0xE5,0x14,0xF3,0x13,0x64,0xF,0x7A,0xB,0xEC,0xE,0xA9,0xD,0x1D,0xB,0xB3,
0xB,0x33,0x5,0x24,0x1,0xCA,0xF8,0x85,0xF1,0x53,0xEE,0x4,0xEA,0x2,
0xE2,0x99,0xD6,0x56,0xC1,0x58,0xB0,0x48,0xBF,0xDA,0xDE,0x3B,0x4,0xF3,0x1A,0xFB,0x19,0xCB,0xE,0x2A,
0x9,0x78,0x7,0x30,0xA,0xDA,0x4,0x5C,0xF9,0x19,0xFA,0x4E,0x1,0x3C,
0x12,0x64,0x1E,0x99,0x21,0x5B,0x1F,0x47,0x1B,0x66,0x18,0xED,0x15,0xE3,0x13,0xBC,0xF,0xFB,0xE,0x69,
0xC,0x8A,0xB,0xA7,0x9,0x8F,0x5,0xB2,0x0,0xA5,0xF8,0xA0,0xF1,0xD2,
0xEA,0xB9,0xE9,0x31,0xE4,0x83,0xDE,0x6D,0xCA,0xE6,0xB7,0x66,0xC4,0xE7,0xDD,0x36,0xFF,0x5A,0x16,0xD7,
0x16,0x42,0xE,0x81,0xA,0xD5,0x9,0xB6,0xC,0x1,0xA,0x1B,0x3,0x13,
0xFF,0x69,0x3,0x39,0x10,0xBA,0x19,0xA2,0x21,0x55,0x22,0x12,0x1D,0xC3,0x18,0x7A,0x14,0x91,0x11,0x9F,
0x11,0x7D,0x10,0x8D,0xC,0x59,0x9,0xC8,0x3,0xF5,0xFF,0x9B,0xFB,0xDC,
0xF4,0x50,0xEE,0xFA,0xE9,0x2F,0xE4,0xD6,0xDF,0x5,0xD6,0x82,0xC1,0x4D,0xC1,0xF8,0xCF,0x9A,0xE6,0x8B,
0x4,0x1C,0x13,0xD5,0xF,0x9A,0xE,0x20,0x8,0xBA,0x6,0xDA,0xB,0x4E,
0x7,0xE2,0x3,0xAC,0x4,0x87,0xB,0x66,0x13,0x46,0x1F,0x88,0x20,0x36,0x1D,0x1B,0x1A,0xF3,0x13,0xAC,
0x14,0x29,0x14,0x95,0x11,0x20,0xF,0xD4,0x9,0x78,0x3,0xB5,0x0,0xEC,
0xFA,0x61,0xF5,0x7D,0xEF,0x96,0xE9,0x5E,0xE5,0xAF,0xE0,0xF2,0xD2,0xD1,0xC1,0x33,0xC3,0x9,0xD0,0xFE,
0xE7,0x4,0x2,0x5D,0xC,0x50,0xD,0xA7,0xA,0x3B,0x3,0x68,0x5,0x50,
0xA,0xA9,0x8,0x94,0x9,0x5B,0x7,0x78,0x9,0x71,0x13,0xCB,0x1B,0x44,0x20,0x67,0x20,0x60,0x18,0xE8,
0x12,0xC7,0x11,0x1E,0x11,0xFA,0x13,0xD5,0x13,0xB1,0xD,0x24,0x6,0xF7,
0xFD,0x76,0xF5,0x20,0xF0,0xF6,0xEB,0xF3,0xE7,0x45,0xE4,0xFB,0xD9,0x17,0xC8,0x4E,0xC6,0x8E,0xD0,0x17,
0xE1,0x19,0xFA,0x60,0x8,0xB4,0xA,0x45,0xA,0xD5,0x4,0x32,0x2,0xD4,
0x7,0xBB,0x8,0xE5,0xB,0xF0,0xC,0xD9,0xC,0xC9,0x11,0x5E,0x17,0x30,0x1D,0xD5,0x1E,0xF1,0x1B,0xB,
0x16,0x94,0x12,0x41,0x10,0xE2,0xF,0xFB,0xF,0xFB,0xA,0xED,0x4,0x86,
0xFE,0x9,0xF7,0xDF,0xF1,0x82,0xEE,0x3,0xE9,0x42,0xE4,0x53,0xD9,0x2A,0xC8,0xA6,0xC7,0x75,0xD2,0xAC,
0xE3,0xC8,0xFA,0x1D,0x7,0xB1,0x8,0xEC,0x7,0x50,0x2,0xCA,0x0,0xD5,
0x7,0x83,0xA,0x5D,0xF,0x9B,0x10,0xC5,0xB,0x2A,0xF,0x6F,0x13,0xA0,0x18,0x54,0x1E,0x66,0x1B,0xA0,
0x15,0xC2,0x11,0xA4,0xE,0xAB,0x10,0xCF,0x13,0x76,0x10,0x70,0xB,0xE6,
0x0,0x9,0xF5,0x73,0xED,0x5A,0xEA,0x1D,0xE8,0x49,0xE5,0x2A,0xDC,0xC1,0xCD,0xC8,0xCD,0xEE,0xD4,0x9B,
0xE6,0xDC,0xFC,0xFD,0x5,0x12,0x8,0x4E,0x4,0x34,0xFE,0x99,0x0,0xB8,
0x8,0x87,0xD,0x5A,0x12,0x7B,0x11,0xF7,0xB,0x39,0xE,0xA7,0x11,0xFC,0x16,0xAC,0x1D,0xBF,0x1B,0x6C,
0x16,0x6F,0x12,0x31,0xD,0xBB,0xD,0x13,0x10,0x5B,0xE,0x86,0xA,0x7B,
0x0,0x2D,0xF6,0x20,0xEF,0x56,0xEA,0x90,0xE7,0x76,0xE5,0xF8,0xD9,0xAC,0xD3,0x21,0xD7,0xF6,0xDD,0x64,
0xEE,0xB6,0xFB,0x62,0x2,0xA2,0x4,0xC2,0x2,0x1F,0x0,0xA5,0x3,0xF4,
0x8,0x3C,0xD,0x41,0x10,0x3E,0xD,0xCC,0x9,0x45,0xB,0x16,0xF,0x34,0x14,0xC0,0x17,0x25,0x15,0xD8,
0x10,0x51,0xC,0x71,0x8,0xC2,0x9,0xE,0xC,0xC2,0xA,0xBD,0x5,0x99,
0xFD,0xD5,0xF5,0x62,0xF0,0xB,0xED,0x0,0xEB,0xE9,0xE6,0x77,0xE0,0xFA,0xDE,0x5C,0xE1,0x84,0xE6,0xAA,
0xEF,0x52,0xF8,0x4E,0xFE,0x2,0x2,0x89,0x3,0x1F,0x4,0xAC,0x7,0x5C,
0xA,0x46,0xD,0x54,0xF,0xF9,0xC,0x34,0xA,0x8C,0x9,0x8B,0xB,0xCE,0xF,0xE,0x13,0x13,0x12,0x9E,
0xE,0x95,0xA,0x85,0x8,0x70,0x8,0x76,0x8,0x4F,0x6,0x1D,0x3,0x84,
0xFD,0x74,0xF6,0x83,0xF1,0x1A,0xEF,0xFF,0xEE,0x77,0xEF,0x3C,0xEE,0xD0,0xEC,0xA6,0xED,0x6D,0xF0,0xF9,
0xF5,0x2D,0xFB,0x9F,0xFE,0x2C,0xFF,0x4A,0xFE,0x1,0xFE,0x4,0x0,0x6D,
0x4,0xC2,0x7,0xE7,0x9,0x95,0x9,0xE1,0x7,0x3F,0x7,0x34,0x8,0xD6,0xA,0x8B,0xD,0x1E,0xF,0xD2,
0xE,0xD6,0xC,0x2C,0xA,0xA2,0x8,0xF5,0x8,0xE2,0x9,0xFE,0x9,0xA9,
0x8,0x7,0x6,0xA0,0x2,0x68,0x0,0x9A,0xFF,0x5A,0x0,0xA1,0x0,0x13,0x0,0x24,0xFE,0x77,0xFA,0x3,
0xF9,0x55,0xF8,0x99,0xF8,0x3D,0xF9,0x8D,0xF8,0x66,0xF7,0x4D,0xF6,0x90,
0xF6,0xE7,0xF7,0xE5,0xF9,0xD9,0xFB,0xF8,0xFC,0x51,0xFD,0x42,0xFD,0x71,0xFD,0x94,0xFE,0x5B,0x0,0x2C,
0x2,0xD7,0x2,0x41,0x2,0x38,0x1,0x76,0x0,0xEF,0x0,0xEF,0x1,0xBD,
0x2,0x92,0x2,0x65,0x1,0xF9,0xFF,0x30,0xFF,0x48,0xFF,0xBF,0xFF,0xFD,0xFF,0x72,0xFF,0x60,0xFE,0x7,
0xFD,0xD8,0xFB,0x5A,0xFB,0x70,0xFB,0x78,0xFB,0x3C,0xFB,0xA9,0xFA,0x1E,
0xFA,0x17,0xFA,0x7A,0xFA,0x42,0xFB,0xDA,0xFB,0xF,0xFC,0x41,0xFC,0xA6,0xFC,0xA4,0xFD,0x1F,0xFF,0x83,
0x0,0x6A,0x1,0xD3,0x1,0xEA,0x1,0x3,0x2,0x5A,0x2,0xC0,0x2,0x19,
0x3,0x28,0x3,0xD6,0x2,0x6A,0x2,0x38,0x2,0x40,0x2,0x68,0x2,0x6E,0x2,0x16,0x2,0x83,0x1,0xE6,
0x0,0x83,0x0,0x5B,0x0,0x3F,0x0,0xF6,0xFF,0x80,0xFF,0xA,0xFF,0xC7,
0xFE,0xD1,0xFE,0xFE,0xFE,0x27,0xFF,0x31,0xFF,0x28,0xFF,0x46,0xFF,0x9E,0xFF,0x20,0x0,0xA4,0x0,0xF4,
0x0,0x1A,0x1,0x3B,0x1,0x79,0x1,0xD2,0x1,0x2A,0x2,0x62,0x2,0x62,
0x2,0x56,0x2,0x51,0x2,0x5C,0x2,0x6D,0x2,0x66,0x2,0x3A,0x2,0xEA,0x1,0x8C,0x1,0x3E,0x1,0xFA,
0x0,0xB8,0x0,0x6C,0x0,0x5,0x0,0x97,0xFF,0x3F,0xFF,0x8,0xFF,0xE7,
0xFE,0xC8,0xFE,0x95,0xFE,0x56,0xFE,0x28,0xFE,0x1D,0xFE,0x32,0xFE,0x52,0xFE,0x65,0xFE,0x73,0xFE,0x92,
0xFE,0xCC,0xFE,0x23,0xFF,0x79,0xFF,0xB6,0xFF,0xE5,0xFF,0x13,0x0,0x46,
0x0,0x84,0x0,0xB7,0x0,0xD4,0x0,0xE3,0x0,0xEE,0x0,0xF5,0x0,0xF5,0x0,0xED,0x0,0xD1,0x0,0xB2,
0x0,0x93,0x0,0x7B,0x0,0x67,0x0,0x4A,0x0,0x28,0x0,0xFA,0xFF,0xCD,
0xFF,0xB6,0xFF,0xAD,0xFF,0xA4,0xFF,0x97,0xFF,0x83,0xFF,0x70,0xFF,0x6A,0xFF,0x77,0xFF,0x8C,0xFF,0xA2,
0xFF,0xB3,0xFF,0xC6,0xFF,0xDD,0xFF,0xF5,0xFF,0x16,0x0,0x34,0x0,0x47,
0x0,0x55,0x0,0x66,0x0,0x76,0x0,0x87,0x0,0x8C,0x0,0x83,0x0,0x80,0x0,0x7B,0x0,0x75,0x0,0x6B,
0x0,0x57,0x0,0x3A,0x0,0x1C,0x0,0x8,0x0,0xF8,0xFF,0xE0,0xFF,0xBF,
0xFF,0xA3,0xFF,0x88,0xFF,0x74,0xFF,0x63,0xFF,0x50,0xFF,0x40,0xFF,0x2A,0xFF,0x20,0xFF,0x1C,0xFF,0x1D,
0xFF,0x23,0xFF,0x22,0xFF,0x28,0xFF,0x27,0xFF,0x33,0xFF,0x46,0xFF,0x52,
0xFF,0x5E,0xFF,0x6B,0xFF,0x7B,0xFF,0x8D,0xFF,0xA1,0xFF,0xAE,0xFF,0xB7,0xFF,0xC0,0xFF,0xC8,0xFF,0xCC,
0xFF,0xCE,0xFF,0xD0,0xFF,0xD0,0xFF,0xD1,0xFF,0xD3,0xFF,0xD8,0xFF,0xD7,
0xFF,0xCE,0xFF,0xCC,0xFF,0xCB,0xFF,0xCD,0xFF,0xCA,0xFF,0xC2,0xFF,0xBC,0xFF,0xBC,0xFF,0xBC,0xFF,0xBB,
0xFF,0xBA,0xFF,0xB9,0xFF,0xBC,0xFF,0xC0,0xFF,0xC5,0xFF,0xD3,0xFF,0xDF,
0xFF,0xEA,0xFF,0xF8,0xFF,0xA,0x0,0x20,0x0,0x32,0x0,0x43,0x0,0x58,0x0,0x6A,0x0,0x78,0x0,0x8E,
0x0,0x9D,0x0,0xA7,0x0,0xB2,0x0,0xBA,0x0,0xC5,0x0,0xCD,0x0,0xD3,
0x0,0xD5,0x0,0xD7,0x0,0xD7,0x0,0xD5,0x0,0xD7,0x0,0xD8,0x0,0xD2,0x0,0xC9,0x0,0xC4,0x0,0xC3,
0x0,0xC1,0x0,0xB8,0x0,0xAF,0x0,0xB6,0x0,0xAE,0x0,0x99,0x0,0x8B,
0x0,0x85,0x0,0x8D,0x0,0x92,0x0,0x89,0x0,0x75,0x0,0x67,0x0,0x6C,0x0,0x77,0x0,0x72,0x0,0x6A,
0x0,0x5D,0x0,0x57,0x0,0x5C,0x0,0x5C,0x0,0x53,0x0,0x41,0x0,0x37,
0x0,0x2E,0x0,0x32,0x0,0x30,0x0,0x1F,0x0,0x10,0x0,0x1,0x0,0xF4,0xFF,0xF6,0xFF,0xEF,0xFF,0xF1,0xFF,0xF1,0xFF,0xE5,0xFF,0xEC,0xFF,0xD9,0xFF,0xCF,0xFF,0xBA,0xFF,0xAF,
0xFF,0xC3,0xFF,0xBC,0xFF,0xA1,0xFF,0xB1,0xFF,0xC0,0xFF,0xC7,0xFF,0xBF,0xFF,0x94,0xFF,0x81,0xFF,0x61,0xFF,0x40,0xFF,0x7D,0xFF,0x17,0x0,0x48,0x0,0xDD,0xFF,0xF8,0xFE,0xB7,
0xFE,0xEF,0xFE,0x7C,0xFF,0xFE,0xFF,0x86,0xFF,0x2,0xFF,0xC9,0xFE,0x40,0xFF,0x32,0xFF,0x78,0xFF,0xEE,0xFF,0x93,0xFF,0xCD,0xFE,0x66,0xFE,0x69,0xFF,0x26,0x0,0x84,0x0,0xB6,
0xFF,0x41,0xFE,0xC7,0xFD,0x8D,0xFE,0xCF,0xFF,0x13,0x0,0xA5,0xFF,0x80,0xFF,0x71,0xFF,0x31,0xFF,0x2F,0xFF,0x34,0xFF,0x88,0xFF,0xD8,0xFF,0xA1,0xFF,0xC9,0xFF,0x28,0x0,0xD9,
0xFF,0xE3,0xFF,0xD7,0xFF,0xCA,0xFF,0xC6,0xFF,0x66,0xFF,0xDA,0xFF,0x59,0x0,0xB8,0x0,0xF9,0x0,0xF,0x0,0xAE,0xFF,0xB9,0xFF,0xC7,0xFF,0x6E,0x0,0xB7,0x0,0x2A,0x0,0x81,
0xFF,0xD2,0xFF,0xD0,0xFF,0xEC,0xFF,0x1C,0x0,0x3B,0x0,0x6C,0x1,0xB5,0x1,0xBC,0x0,0x88,0x0,0x3,0x0,0x81,0x0,0x84,0x0,0xE5,0x0,0x95,0x0,0xF2,0xFF,0x62,0x0,0x22,
0x1,0x3F,0xB,0xEC,0xC,0xC9,0xFD,0x1F,0xF4,0x2,0xFB,0x6A,0x9,0xF4,0xA,0x68,0xFC,0x4A,0xF1,0x65,0xF9,0xE0,0x9,0xF3,0xB,0x8,0xFE,0xE4,0xF5,0xEC,0xFD,0xE,0xB,0x1,
0xB,0x5C,0xFD,0xA0,0xF1,0xAF,0xFA,0xA0,0x19,0x94,0x1C,0x80,0xF9,0x41,0xE1,0x10,0xF1,0x6A,0x14,0xDD,0x19,0xF7,0xFD,0xD8,0xE8,0xCE,0xF2,0xA3,0x7,0x9D,0xB,0x55,0xFB,0xE9,
0xED,0x2D,0xF2,0xB7,0xFF,0xD2,0x2,0x3A,0xFA,0xE5,0xF8,0x4E,0xFF,0xB1,0x5,0xDC,0x0,0x4B,0xFC,0xD4,0x1,0x53,0xB,0xD,0x11,0xF1,0xA,0x31,0xFF,0xBA,0xF8,0xAD,0xFA,0x57,
0xFF,0x5D,0xFD,0x57,0xF4,0xA4,0xF0,0x2C,0xF5,0x18,0xFC,0xA6,0xFD,0xFE,0xFA,0x8F,0xFA,0xEF,0xFE,0xCF,0x4,0xED,0x4,0x58,0x2,0xB3,0x1,0x26,0x3,0xC3,0x4,0x47,0x3,0x3F,
0x0,0xB5,0xFE,0x69,0xFE,0x65,0xFF,0x48,0xFF,0x97,0xFE,0xEB,0xFF,0x4,0x1,0xDA,0x1,0xF1,0x0,0x9B,0x0,0xE1,0x0,0x3C,0x2,0xD4,0x2,0xD9,0xFF,0x3D,0xFF,0xA5,0xFE,0x91,
0xFF,0xFE,0xFF,0x9C,0xFF,0x23,0x0,0x21,0x1,0xC9,0x1,0x83,0x1,0xCB,0x1,0xBF,0x0,0x5E,0x2,0x9B,0x2,0x29,0x1,0xF,0x0,0xAA,0xFF,0xBC,0x0,0x19,0x1,0xEC,0x0,0x7C,
0x0,0xC0,0x1,0x64,0x2,0xB0,0x1,0x74,0x0,0xF4,0xFD,0x36,0xFE,0xD9,0xFF,0xC2,0xFE,0xA4,0xFD,0x9D,0xFB,0xDA,0xFB,0x6C,0xFD,0xBC,0xFD,0x1F,0xFE,0x86,0xFE,0xA,0x1,0xFD,
0x1,0xFF,0x2,0x66,0x4,0x6B,0x4,0xC8,0x2,0xBE,0x1,0x8E,0x3,0x4C,0x3,0x83,0x2,0x7D,0x1,0x2A,0x0,0xF4,0xFE,0x98,0xFD,0xBC,0xFD,0xAD,0xFD,0x30,0xFC,0xDD,0xF9,0xC6,
0xF9,0x7E,0xF9,0x3B,0xF9,0x24,0xFA,0xDB,0xF9,0xBD,0xFB,0x9C,0xFD,0x21,0xFF,0xD8,0x0,0x8A,0x2,0x41,0x4,0xE2,0x5,0x42,0x8,0x25,0x9,0x5B,0x9,0xD2,0x9,0x16,0xA,0xC1,
0x8,0x8B,0x7,0x8B,0x4,0x80,0x0,0x5F,0xFE,0x33,0xFC,0xB6,0xF9,0x9E,0xF7,0x79,0xF4,0x80,0xF2,0x9E,0xF2,0x25,0xF1,0x9C,0xEF,0xF8,0xF1,0x5A,0xF7,0xE2,0xFC,0x26,0x2,0xDF,
0x7,0xEF,0xD,0x71,0x12,0x1C,0x16,0xF6,0x16,0xC6,0x16,0xC0,0x13,0xA9,0x11,0x7C,0x11,0xE0,0xE,0x2F,0x8,0xB9,0x0,0xBE,0xFA,0x8B,0xF3,0xF2,0xEC,0x70,0xE3,0xA4,0xD5,0x2C,
0xC8,0x2F,0xD1,0x44,0xE1,0xC0,0xE4,0xE,0xEB,0x58,0xF5,0x63,0x5,0xDD,0x1B,0xAC,0x24,0x7A,0x20,0xAB,0x23,0x77,0x25,0xEE,0x25,0x12,0x21,0x4D,0x16,0xA2,0x11,0x8B,0x10,0xF6,
0xD,0xB8,0xA,0xA7,0x6,0xAC,0x1,0xAF,0x1,0x0,0xFA,0x98,0xE8,0x12,0xCC,0x65,0xBC,0x38,0xD2,0xE,0xE1,0x59,0xDC,0xAA,0xDF,0x72,0xE9,0x86,0x4,0x74,0x23,0xED,0x1F,0x29,
0x19,0x13,0x21,0xD7,0x28,0x83,0x2B,0xC3,0x1E,0xBB,0x8,0x72,0x3,0xCB,0x8,0x89,0x7,0x20,0x7,0xA4,0xFC,0x18,0xFB,0xC5,0x3,0xDA,0x2,0xAD,0xFB,0x59,0xF0,0xEA,0xD7,0x96,
0xBB,0x39,0xBF,0x90,0xD1,0xD3,0xD7,0xC,0xDB,0xA9,0xE1,0x85,0xF1,0x7F,0x15,0x7,0x28,0xB3,0x21,0xA4,0x20,0xF0,0x24,0x59,0x2E,0x50,0x2C,0x82,0x18,0xE9,0x4,0x28,0x1,0x85,
0x4,0x26,0x7,0x66,0x2,0xCC,0xF9,0xB0,0x2,0xAC,0xA,0xD7,0x8,0x3E,0x3,0x7E,0xF2,0xFB,0xD4,0x4A,0xBF,0x8B,0xC7,0x70,0xD8,0x1E,0xDA,0x4B,0xDC,0xE2,0xE8,0xA0,0xFB,0x2B,
0x1D,0xF1,0x2B,0x92,0x22,0xC,0x22,0x56,0x2A,0x26,0x31,0xB0,0x2B,0xB8,0x16,0x6F,0x3,0x87,0x1,0xCC,0x7,0x43,0x8,0xC0,0x0,0xB,0xFA,0x3C,0x2,0xBF,0xE,0x20,0xE,0xFA,
0x3,0x5A,0xF3,0xC0,0xDC,0xB7,0xC4,0xEE,0xC3,0xC,0xCF,0x43,0xD3,0x49,0xDA,0xA6,0xE4,0x82,0xF4,0xF2,0x10,0x2C,0x27,0xB8,0x2A,0xBA,0x29,0xCE,0x2A,0x48,0x2D,0xEC,0x29,0x4B,
0x19,0xEB,0x3,0xEF,0xFD,0xF3,0x2,0xA,0x8,0x76,0x5,0x6A,0xFE,0x54,0xFF,0x6C,0x9,0xD7,0xD,0xB2,0xB,0xCD,0xFE,0x99,0xE9,0x0,0xCC,0x40,0xB6,0x74,0xC3,0x88,0xD3,0x3D,
0xD9,0x9E,0xDC,0xB7,0xE6,0xC2,0xFE,0x6D,0x20,0x1E,0x2E,0xDB,0x27,0x7E,0x26,0xA1,0x27,0xAF,0x2C,0x0,0x27,0xF,0xE,0x83,0xFA,0x65,0xFB,0x41,0x5,0x65,0xB,0x64,0x5,0x7F,
0xFE,0x1F,0x4,0x39,0xE,0x70,0x11,0x9,0xB,0x2E,0xFA,0xDF,0xE4,0xA7,0xC7,0xA2,0xB5,0x17,0xC3,0xFD,0xD3,0x5,0xE0,0xE,0xE9,0x27,0xEE,0x12,0xFF,0xB3,0x1B,0x16,0x26,0x6D,
0x20,0xD9,0x1C,0x2F,0x1E,0x85,0x24,0x2B,0x1F,0x7A,0xA,0xB9,0xFD,0x39,0x2,0xC6,0xE,0xD1,0x17,0x50,0xF,0xC8,0x6,0x6C,0xA,0x78,0x12,0xFF,0x14,0x67,0xA,0x26,0xF5,0x7,
0xE1,0xDD,0xC7,0xB2,0xB4,0x64,0xC0,0xF5,0xD0,0x64,0xDF,0x1,0xEC,0x46,0xF6,0x5A,0x4,0xC2,0x18,0x9D,0x20,0x3F,0x19,0x7C,0x15,0x8C,0x10,0x96,0x16,0x2D,0x17,0x88,0xB,0x39,
0x2,0xC1,0x7,0x37,0x16,0xDA,0x1D,0xB7,0x1A,0xDA,0x12,0xE3,0x13,0x12,0x18,0xCB,0x17,0x35,0xA,0x62,0xFA,0x91,0xE6,0x5F,0xD2,0xF5,0xB9,0xC,0xB4,0xFE,0xC9,0xE1,0xDB,0xB6,
0xF0,0xD6,0xF9,0x14,0xFF,0xE9,0xF,0xE9,0x19,0xD4,0x17,0x41,0x12,0x1E,0x9,0xEB,0x8,0x8E,0xF,0xE6,0xD,0x5D,0x8,0x8F,0x8,0x6E,0x12,0xFF,0x1C,0xED,0x21,0xD9,0x1C,0x35,
0x19,0x24,0x18,0x2D,0x17,0x70,0x11,0x16,0x5,0x9,0xF2,0x5,0xDE,0xD8,0xC4,0xEF,0xB2,0xE8,0xC4,0xCB,0xD7,0x91,0xEB,0x57,0xF8,0x29,0xF8,0xC9,0x5,0xEE,0x15,0xD1,0x19,0xDD,
0x15,0xD1,0xA,0x14,0x2,0x34,0x9,0xBF,0xB,0xAA,0x9,0x6C,0x7,0x7C,0xB,0xFB,0x18,0x31,0x24,0xB6,0x23,0x78,0x1B,0xA8,0x13,0x99,0x12,0xAE,0x13,0xD2,0xC,0x70,0xFE,0x32,
0xE7,0xB5,0xD0,0x36,0xBA,0x5B,0xBC,0xF7,0xCF,0xAE,0xE1,0x39,0xF1,0x1,0xF4,0xD5,0xFB,0xC5,0x7,0xFD,0x10,0x83,0x13,0xC4,0xE,0xF8,0x6,0xB0,0x4,0x1B,0x8,0xDE,0xA,0x4B,
0xE,0x0,0x10,0x8D,0x14,0xE,0x1C,0x2,0x20,0xB3,0x1F,0x31,0x1E,0xF3,0x15,0x92,0x12,0xBC,0xC,0xAB,0x2,0x55,0xF5,0xE,0xE0,0xB7,0xCA,0x3F,0xB8,0xBD,0xC1,0xCB,0xD6,0x54,
0xEA,0x62,0xF5,0x4A,0xF4,0x19,0xF8,0x33,0x2,0x41,0xC,0x8F,0x14,0xF2,0x13,0x4D,0x7,0x4F,0x3,0x55,0x6,0xE4,0xC,0x5B,0x14,0x10,0x17,0xA1,0x17,0xB4,0x18,0x6,0x1C,0x6A,
0x1D,0x7,0x1D,0xC0,0x14,0x53,0xD,0x56,0x6,0xFA,0xFF,0x12,0xF7,0xE3,0xE5,0x4C,0xD3,0xE9,0xC1,0x7B,0xC8,0x30,0xDA,0xDD,0xE9,0x5,0xF2,0x7D,0xF2,0x8,0xF4,0x14,0xFB,0x92,
0x4,0x34,0xF,0xBF,0x13,0x3D,0xC,0x3E,0x7,0x29,0x6,0xC,0xE,0xEB,0x18,0xDB,0x1C,0x9,0x1C,0xF9,0x17,0xD6,0x15,0xAB,0x18,0x94,0x1A,0x8D,0x17,0xAD,0x11,0xE1,0x8,0xEC,
0x0,0x8D,0xF9,0x9D,0xEC,0xAC,0xDF,0x93,0xCF,0x2E,0xCD,0x32,0xD7,0xDB,0xE2,0x17,0xEB,0x25,0xEC,0x20,0xED,0x8B,0xEF,0x31,0xF8,0x54,0x6,0xB1,0x10,0xBE,0xE,0x4D,0xB,0xB,
0xA,0x66,0xE,0x2C,0x17,0x65,0x1D,0x61,0x1E,0x8B,0x1A,0xF9,0x16,0x73,0x19,0x5F,0x1B,0x80,0x1A,0xAF,0x16,0xDF,0xF,0xC0,0x7,0x48,0x0,0xD1,0xF6,0xFA,0xEB,0x2E,0xE0,0x24,
0xD8,0x87,0xD9,0x3A,0xDD,0x72,0xE0,0xCA,0xDF,0xA8,0xE0,0x10,0xE2,0xE9,0xE7,0xD6,0xF2,0xCD,0xFE,0x13,0x4,0x55,0x5,0x5D,0x6,0x82,0xA,0xED,0x12,0xA1,0x1B,0x2B,0x22,0x79,
0x22,0xBF,0x21,0x3D,0x21,0x1,0x22,0xFA,0x22,0x81,0x20,0xE8,0x1A,0xD5,0x13,0x99,0x9,0x3D,0x0,0x98,0xF4,0x58,0xE9,0xE8,0xDE,0x49,0xD8,0x1B,0xD7,0xBB,0xD4,0xE6,0xD0,0xAF,
0xD1,0xA7,0xD4,0xC,0xD8,0xCD,0xE2,0xBF,0xEF,0x63,0xFA,0xC,0x1,0xF,0x6,0x18,0xE,0xCE,0x17,0x8,0x21,0xCC,0x29,0x97,0x2B,0xD0,0x2A,0x53,0x29,0x96,0x27,0xD5,0x25,0xDD,
0x22,0xAE,0x1D,0xEB,0x16,0x4C,0xC,0x5,0x1,0x3B,0xF6,0x98,0xEA,0x5C,0xDF,0x57,0xD5,0x2E,0xD3,0xB5,0xD0,0x60,0xCC,0xA,0xCB,0x11,0xCF,0x77,0xD3,0x38,0xDC,0xA2,0xE9,0x3A,
0xF7,0xCF,0xFF,0xCF,0x4,0xB2,0xD,0xC6,0x17,0x1F,0x21,0xFD,0x28,0x83,0x2D,0x9A,0x2D,0x78,0x2B,0x8D,0x29,0x7B,0x28,0x24,0x26,0xC5,0x21,0xCA,0x1B,0xD4,0x12,0xD,0x7,0x3B,
0xFC,0x74,0xF1,0x12,0xE6,0x5C,0xD9,0xEB,0xD3,0x56,0xD3,0xA5,0xCE,0xB3,0xC9,0x6,0xCC,0xE4,0xD1,0x77,0xD8,0xA8,0xE3,0x5D,0xF2,0xC5,0xFD,0xF,0x3,0xCF,0xA,0xA2,0x14,0xA0,
0x1E,0xF7,0x27,0xA8,0x2E,0xCF,0x2F,0x81,0x2E,0x12,0x2D,0x9F,0x2B,0x84,0x29,0xA3,0x24,0xD2,0x1E,0xE7,0x15,0xC1,0xA,0x94,0xFF,0x6,0xF4,0xBD,0xE9,0xE0,0xDD,0x25,0xD4,0x5E,
0xD2,0xD7,0xCF,0xD8,0xC9,0x48,0xCA,0x82,0xCF,0xB,0xD6,0xE2,0xDF,0xC8,0xED,0x4E,0xFB,0x27,0x2,0x5D,0x8,0x71,0x12,0x2F,0x1D,0x69,0x26,0x6,0x2E,0xDB,0x2F,0xCB,0x2E,0xA4,
0x2D,0x6B,0x2C,0x4E,0x2A,0x61,0x25,0xBC,0x1F,0x7,0x17,0x10,0xC,0xDD,0x0,0x3A,0xF6,0x84,0xEC,0x8F,0xE0,0x61,0xD5,0x6A,0xD1,0xAA,0xCF,0x4E,0xCB,0x88,0xCA,0xC5,0xCE,0x42,
0xD5,0x10,0xDE,0xB8,0xEA,0x56,0xF8,0x16,0x0,0x28,0x6,0x15,0x10,0x77,0x1A,0xF1,0x22,0x96,0x2A,0x39,0x2E,0xA3,0x2D,0xC6,0x2B,0xC0,0x2A,0x54,0x28,0xCD,0x23,0x9B,0x1E,0x88,
0x16,0x26,0xC,0x20,0x1,0xFC,0xF6,0x83,0xEC,0xB5,0xE0,0xEE,0xD7,0xF7,0xD4,0x33,0xD0,0xB0,0xCA,0x95,0xCA,0x44,0xCF,0x17,0xD5,0x18,0xDD,0xC9,0xE9,0x7B,0xF5,0x15,0xFC,0x7,
0x3,0xC4,0xE,0x57,0x19,0x8E,0x22,0xBF,0x29,0x7A,0x2C,0xA1,0x2C,0x5,0x2D,0xE5,0x2C,0x25,0x2A,0x12,0x25,0x6F,0x1E,0xC6,0x16,0x77,0xD,0x1F,0x3,0x7C,0xF7,0x51,0xEB,0x7E,
0xDF,0x8A,0xD8,0x44,0xD5,0xE1,0xCF,0x9F,0xCB,0xA8,0xCC,0x11,0xD1,0x31,0xD6,0xF8,0xDF,0xDB,0xED,0xE3,0xF7,0x53,0xFD,0x83,0x5,0x43,0x11,0x79,0x1B,0xAE,0x24,0xE2,0x2A,0x23,
0x2C,0x61,0x2C,0x4D,0x2D,0x5D,0x2C,0x5F,0x28,0x34,0x23,0x75,0x1C,0xB6,0x13,0x40,0xA,0x2F,0x0,0x5F,0xF4,0x46,0xE7,0xBA,0xDD,0x5F,0xD9,0x6C,0xD5,0x71,0xCF,0x3C,0xCD,0x9B,
0xD0,0xF6,0xD4,0xDB,0xDB,0xD1,0xE6,0x2B,0xF2,0x49,0xF9,0x4E,0x0,0x21,0xB,0xFE,0x15,0xD4,0x1D,0x1D,0x25,0xD4,0x29,0x1A,0x2A,0x75,0x2B,0x2,0x2D,0xD7,0x2A,0x9B,0x24,0x20,
0x1E,0x41,0x17,0x53,0xF,0xB8,0x5,0x55,0xFB,0x61,0xEE,0xAC,0xE0,0xF4,0xDA,0x4A,0xD9,0xD0,0xD4,0x92,0xCF,0x7A,0xD0,0x84,0xD4,0xDC,0xD9,0xF5,0xE2,0x7E,0xEE,0xD9,0xF7,0xB0,
0xFD,0x35,0x6,0x42,0x10,0xA1,0x19,0xCF,0x21,0xC5,0x27,0x12,0x29,0x7D,0x28,0xE1,0x29,0xD0,0x29,0xD9,0x25,0x1C,0x1F,0xAF,0x17,0xC9,0xF,0x1C,0x7,0x95,0xFD,0x95,0xF2,0x8,
0xE6,0x14,0xDD,0x36,0xD9,0x2A,0xD6,0x89,0xD1,0xF8,0xD0,0xC,0xD5,0x8E,0xD9,0xC8,0xE0,0xB7,0xEA,0x48,0xF5,0x97,0xFC,0xBE,0x3,0x37,0xD,0xD3,0x15,0x81,0x1D,0xE5,0x23,0x1D,
0x27,0x28,0x27,0x6B,0x27,0xC9,0x27,0x8A,0x24,0x40,0x1E,0x35,0x18,0xE2,0x11,0x16,0x9,0x70,0xFE,0x7A,0xF3,0xB2,0xE7,0x21,0xDE,0x0,0xDA,0x3C,0xD7,0xD7,0xD2,0xD2,0xD0,0x0,
0xD4,0xE5,0xD8,0xE7,0xDF,0xAE,0xEA,0xBD,0xF4,0x45,0xFB,0xED,0x1,0xAC,0xB,0x3F,0x15,0x48,0x1D,0x7A,0x23,0xE6,0x25,0x4C,0x26,0x20,0x28,0x71,0x29,0xC9,0x25,0x46,0x1F,0x39,
0x18,0xD8,0x10,0xF6,0x8,0x1,0x0,0xF6,0xF3,0x2B,0xE6,0xFE,0xDD,0xD5,0xD9,0x4,0xD7,0x94,0xD4,0x8,0xD3,0x2C,0xD5,0xA,0xD9,0x24,0xE1,0xFB,0xEB,0x88,0xF5,0x21,0xFD,0x9D,
0x3,0x67,0xD,0x89,0x17,0x4C,0x1F,0xF8,0x24,0xDB,0x26,0xE9,0x27,0x65,0x28,0xC8,0x27,0xE1,0x24,0x67,0x1E,0xD0,0x16,0xBA,0xE,0xB0,0x6,0x93,0xFD,0xA5,0xF2,0xCD,0xE6,0x52,
0xDE,0x17,0xDA,0x96,0xD6,0x64,0xD4,0x28,0xD5,0xF3,0xD8,0xA4,0xDC,0x69,0xE3,0x37,0xEE,0xB,0xF8,0x47,0x0,0xC2,0x7,0xEE,0x10,0xFD,0x19,0x78,0x20,0x16,0x25,0x83,0x27,0x5B,
0x28,0x29,0x28,0x7D,0x26,0xE1,0x22,0x93,0x1C,0x20,0x15,0x81,0xD,0xC0,0x4,0xEF,0xFA,0xBF,0xEF,0x9A,0xE4,0xEA,0xDC,0x95,0xDA,0x6E,0xD8,0x2B,0xD5,0xAF,0xD6,0xF2,0xDA,0xFF,
0xDE,0x44,0xE6,0x44,0xF1,0xEB,0xFA,0x43,0x2,0x58,0xA,0x3C,0x13,0x8E,0x1A,0x8E,0x20,0xDD,0x25,0x16,0x28,0x1E,0x28,0x21,0x27,0xC5,0x23,0xB5,0x1E,0x64,0x19,0x17,0x13,0xB1,
0xA,0xF5,0x0,0xA9,0xF6,0xB9,0xEB,0x3A,0xE2,0xB5,0xDC,0x0,0xD9,0x44,0xD5,0x3C,0xD4,0xE9,0xD6,0x57,0xDB,0x1B,0xE1,0x82,0xE9,0x22,0xF3,0x95,0xFB,0xFD,0x3,0x7F,0xC,0x1A,
0x14,0x36,0x1B,0x82,0x21,0x89,0x25,0xF1,0x26,0x1C,0x27,0xC3,0x25,0xF6,0x21,0x92,0x1C,0x35,0x16,0xA2,0xE,0x6,0x6,0x17,0xFC,0x1B,0xF1,0x92,0xE6,0xDC,0xDE,0x3F,0xDA,0xE4,
0xD5,0xBC,0xD3,0xC3,0xD5,0x7,0xD9,0xFF,0xDC,0x25,0xE4,0x24,0xEE,0x8B,0xF7,0xD7,0xFF,0x6B,0x8,0x29,0x11,0x32,0x19,0x28,0x20,0xFE,0x24,0x22,0x27,0xB9,0x27,0xD2,0x26,0x11,
0x24,0x17,0x1F,0xD5,0x18,0x2A,0x12,0xF2,0x9,0x68,0x0,0x22,0xF6,0xC2,0xEA,0x4F,0xE1,0x87,0xDC,0x36,0xD9,0x2,0xD6,0x61,0xD5,0x51,0xD8,0xCE,0xDC,0xF6,0xE1,0x26,0xEA,0x38,
0xF4,0x44,0xFD,0xB6,0x5,0x2E,0xE,0xEF,0x15,0xB9,0x1C,0xB2,0x22,0x80,0x26,0x78,0x27,0x9A,0x26,0x5E,0x25,0x45,0x22,0x2A,0x1C,0x86,0x15,0xB5,0xE,0xC6,0x6,0x4D,0xFD,0xAD,
0xF2,0xEC,0xE7,0xA9,0xE0,0x57,0xDD,0x5,0xDA,0x1A,0xD7,0xFA,0xD7,0xC4,0xDB,0x4,0xE0,0xE8,0xE5,0xB4,0xEE,0xE7,0xF8,0x4C,0x1,0x6D,0x8,0x3E,0x10,0xC0,0x17,0xE,0x1E,0x54,
0x23,0x3C,0x26,0xC6,0x26,0x23,0x26,0xEA,0x23,0x6F,0x1F,0x10,0x19,0x9C,0x12,0xD4,0xB,0x25,0x3,0x4B,0xF9,0x84,0xEF,0x83,0xE6,0x31,0xE0,0x4B,0xDC,0x96,0xD9,0xC,0xD9,0x77,
0xDA,0xA8,0xDD,0x89,0xE2,0x85,0xE9,0x8E,0xF2,0x23,0xFB,0xE1,0x2,0x94,0xA,0xCD,0x11,0xA1,0x18,0x81,0x1E,0x71,0x22,0x8D,0x24,0x99,0x24,0xE5,0x22,0x94,0x1F,0x90,0x1A,0xC3,
0x14,0xFC,0xD,0x29,0x6,0xDE,0xFD,0xC2,0xF4,0x78,0xEB,0xFD,0xE3,0xB8,0xDE,0x40,0xDB,0xF5,0xD9,0x1C,0xDA,0xCE,0xDB,0x20,0xDF,0x85,0xE4,0x5C,0xEC,0xFD,0xF4,0x45,0xFD,0x7A,
0x4,0x0,0xC,0xC1,0x13,0xB9,0x19,0x1E,0x1E,0x7D,0x21,0xDC,0x22,0x4B,0x22,0xCA,0x1F,0xF5,0x1B,0x90,0x17,0xDC,0x11,0xDC,0xA,0xC5,0x2,0xE4,0xFA,0xC4,0xF2,0x61,0xEA,0x30,
0xE4,0x92,0xE0,0x70,0xDD,0xE1,0xDB,0x57,0xDD,0x83,0xDF,0xC0,0xE2,0xB4,0xE8,0xBD,0xF0,0xC8,0xF8,0xCB,0xFF,0xC7,0x6,0xA3,0xD,0xAD,0x13,0x5,0x19,0x7,0x1D,0x5C,0x1F,0x12,
0x20,0x9B,0x1E,0xB5,0x1B,0x1C,0x18,0xE6,0x13,0xE2,0xE,0x73,0x8,0xA4,0x1,0x97,0xFA,0x2D,0xF3,0x84,0xEC,0x3D,0xE7,0xE6,0xE3,0x65,0xE1,0xB,0xE0,0xF7,0xE0,0xE9,0xE2,0x22,
0xE6,0x7E,0xEB,0x7B,0xF2,0xBB,0xF9,0x3E,0x0,0x78,0x6,0xA4,0xC,0x51,0x12,0x32,0x17,0x92,0x1A,0x44,0x1C,0xAA,0x1C,0xD4,0x1B,0x13,0x1A,0x41,0x17,0xAA,0x13,0x82,0xF,0x98,
0xA,0xF6,0x4,0x5E,0xFE,0xE5,0xF7,0x2E,0xF2,0x5F,0xED,0xDB,0xE9,0x11,0xE7,0x26,0xE5,0x6B,0xE4,0xA0,0xE5,0x25,0xE8,0xA8,0xEB,0x7C,0xF1,0x3D,0xF8,0x9,0xFE,0x18,0x3,0x9A,
0x8,0xF9,0xD,0xFC,0x11,0xF2,0x14,0x42,0x17,0x59,0x18,0x53,0x18,0x2C,0x17,0xCF,0x14,0x50,0x12,0xC7,0xF,0xFA,0xB,0xAB,0x6,0x54,0x1,0x82,0xFC,0xA6,0xF7,0x8D,0xF2,0xE,
0xEF,0xC5,0xEC,0x69,0xEA,0xC9,0xE8,0x98,0xE8,0xC9,0xE9,0xC3,0xEB,0x1B,0xEF,0xDB,0xF3,0x20,0xF9,0x8A,0xFD,0x73,0x1,0xA2,0x5,0xC3,0x9,0x5E,0xD,0x48,0x10,0x57,0x12,0xF2,
0x12,0xF1,0x12,0xF,0x13,0x64,0x12,0x67,0x10,0x1A,0xE,0x84,0xB,0xB8,0x7,0xC1,0x3,0x38,0x0,0xAA,0xFC,0x32,0xF9,0xA6,0xF5,0x72,0xF2,0x97,0xF0,0x34,0xEF,0xBF,0xED,0x74,
0xED,0x2B,0xEE,0xCF,0xEF,0x2F,0xF2,0x74,0xF5,0x25,0xF9,0xFC,0xFB,0xD8,0xFE,0x1,0x2,0xF2,0x4,0x90,0x7,0xBA,0x9,0x1,0xB,0x92,0xB,0x7D,0xC,0xF3,0xC,0x68,0xC,0x86,
0xB,0x63,0xA,0xA2,0x8,0x1B,0x6,0xAB,0x3,0x6B,0x1,0xD,0xFF,0x3D,0xFC,0x60,0xF9,0xD0,0xF6,0xF,0xF5,0x90,0xF3,0xD2,0xF1,0xBB,0xF1,0xBB,0xF2,0x3F,0xF3,0x9,0xF4,0x72,
0xF6,0xC,0xF9,0xC5,0xFA,0xFF,0xFC,0xE9,0xFF,0x56,0x2,0x11,0x4,0x38,0x6,0x45,0x8,0xAD,0x9,0xF5,0xA,0xBA,0xB,0xB1,0xB,0xA9,0xB,0xA5,0xB,0x8E,0xA,0x47,0x9,0x70,
0x8,0x9,0x7,0x79,0x4,0xB2,0x1,0x3C,0xFF,0xC8,0xFC,0x5A,0xFB,0x6F,0xFA,0xE2,0xF8,0xFD,0xF7,0x3E,0xF8,0xC,0xF8,0xD9,0xF7,0xC9,0xF8,0x74,0xFA,0x4D,0xFB,0xDB,0xFB,0x47,
0xFD,0x72,0xFE,0x57,0xFF,0x70,0x0,0xBC,0x1,0xF5,0x2,0x74,0x4,0x11,0x6,0xF0,0x6,0x94,0x7,0xF8,0x7,0xFF,0x6,0x6,0x5,0x86,0x3,0xD7,0x2,0xD9,0x1,0xEB,0x0,0xC6,
0x0,0x7,0x0,0x1C,0xFF,0xDD,0xFE,0x9F,0xFE,0x26,0xFE,0xB5,0xFD,0xCA,0xFD,0xB8,0xFD,0x55,0xFD,0xE4,0xFC,0x77,0xFC,0x52,0xFC,0x5E,0xFC,0xB,0xFD,0x4E,0xFE,0x75,0xFF,0xB0,
0xFF,0xB9,0xFF,0x6F,0x0,0x44,0x0,0xFB,0xFE,0xDE,0xFE,0x8C,0xFF,0xDA,0xFF,0xA0,0x0,0x21,0x2,0xED,0x2,0xCA,0x1,0xC0,0x0,0x34,0x1,0xF0,0x1,0xA0,0x2,0x73,0x3,0xD4,
0x2,0xC4,0x0,0x92,0xFF,0x6A,0xFF,0x41,0xFF,0xCF,0xFF,0x5,0x1,0xBA,0x0,0xF4,0xFE,0xC1,0xFD,0xC7,0xFD,0xF9,0xFD,0x6B,0xFE,0x2A,0xFF,0x75,0xFE,0x3C,0xFD,0x58,0xFD,0x5B,
0xFE,0x7E,0xFF,0x48,0x0,0x6F,0x0,0xC5,0xFF,0x45,0xFF,0xA6,0xFF,0xA8,0x0,0xDC,0x1,0x34,0x2,0xFB,0x0,0xE5,0xFF,0xE,0x0,0x59,0x0,0xFB,0x0,0xC6,0x1,0x52,0x1,0x20,
0x0,0xF1,0xFF,0x4D,0x0,0x41,0x0,0x1C,0x0,0xDC,0xFF,0x8E,0xFF,0x73,0xFF,0xEB,0xFF,0x3D,0x0,0xC3,0xFF,0x2F,0xFF,0xCB,0xFE,0xCE,0xFE,0x18,0xFF,0x46,0xFF,0x42,0xFF,0x31,
0xFF,0x19,0xFF,0x26,0xFF,0x52,0xFF,0x81,0xFF,0x73,0xFF,0x63,0xFF,0xDA,0xFF,0x2,0x0,0xD0,0xFF,0xE0,0xFF,0x44,0x0,0x41,0x0,0xDB,0xFF,0xDC,0xFF,0x45,0x0,0x72,0x0,0x53,
0x0,0x65,0x0,0x4D,0x0,0x46,0x0,0x46,0x0,0x1C,0x0,0xFA,0xFF,0xE5,0xFF,0xEF,0xFF,0xE7,0xFF,0x1E,0x0,0x51,0x0,0xFB,0xFF,0x81,0xFF,0x49,0xFF,0x76,0xFF,0xCF,0xFF,0xF9,
0xFF,0xF4,0xFF,0xB5,0xFF,0x9A,0xFF,0xD4,0xFF,0xEA,0xFF,0x1F,0x0,0x19,0x0,0xE8,0xFF,0xFC,0xFF,0x21,0x0,0x27,0x0,0x39,0x0,0x66,0x0,0x42,0x0,0xD4,0xFF,0x3,0x0,0x9B,
0x0,0xAA,0x0,0x5E,0x0,0x4F,0x0,0x90,0x0,0x8B,0x0,0x40,0x0,0x20,0x0,0x7B,0x0,0x91,0x0,0xAE,0x0,0x4F,0x0,0x18,0x0,0x4D,0x0,0xBF,0x0,0x2C,0x0,0xAA,0xFF,0xFF,
0xFF,0xAD,0x0,0x21,0x0,0x86,0xFF,0x9D,0xFF,0xFF,0xFF,0x30,0x0,0x6D,0xFF,0xA3,0xFF,0x1C,0x0,0xBC,0x0,0x9D,0xFF,0x61,0x0,0x44,0xFF,0x4,0x1,0xCB,0xFF,0x7B,0x0,0xAC,
0xFF,0x24,0x1,0x5B,0x0,0x54,0x0,0xFB,0xFF,0xB1,0xFF,0x6F,0x1,0x32,0xFF,0x3F,0x6,0xEC,0xFB,0x7A,0x3,0x58,0xFE,0xDE,0x0,0x36,0x0,0x13,0x0,0xA2,0x3,0xC9,0xFD,0xA1,
0x6,0xDA,0xFD,0x66,0x7,0x3F,0x1,0x4E,0x4,0x2C,0x2,0x2F,0x0,0xA7,0x2,0xAD,0xFD,0xC9,0xFF,0xEA,0xFD,0x2F,0xFE,0x7B,0xFB,0x8,0xFE,0x80,0xFB,0xBC,0xFD,0x14,0xFE,0x21,
0xFD,0xA2,0x0,0x95,0xFF,0xAE,0xFE,0x92,0x0,0xC4,0xFE,0x7F,0xFF,0x29,0xFF,0x58,0xFE,0x36,0xFE,0x6F,0xFE,0xEB,0xFB,0x4F,0xFE,0x1,0xFD,0xB5,0xFC,0xE8,0xFF,0xF1,0xFB,0x10,
0xFF,0x9A,0xFD,0xA0,0xFD,0x8E,0xFD,0x42,0xFE,0x51,0xFE,0xFF,0xFD,0x2,0xFE,0x6F,0xFE,0x9C,0xFF,0x0,0xFE,0x73,0xFF,0x68,0xFF,0x81,0xFF,0xF5,0xFF,0x2E,0xFF,0x46,0x0,0xFC,
0x0,0x4F,0xFF,0xCF,0x0,0x89,0x0,0xA1,0x0,0xA5,0x0,0x38,0x1,0xFA,0x0,0x8D,0x1,0x16,0x1,0x50,0x1,0x82,0x2,0xE0,0x0,0xE8,0x1,0x7D,0x1,0x2D,0x2,0x42,0x1,0x6E,
0x1,0xB2,0x1,0xEA,0x1,0x86,0x1,0x1C,0x1,0x21,0x2,0x7C,0x1,0x44,0x1,0x9B,0x1,0xF5,0x0,0x6F,0x1,0x3F,0x1,0x7A,0x0,0x31,0x1,0x8C,0x0,0x6C,0x0,0xEF,0x0,0x14,
0x0,0x57,0x0,0xBC,0x0,0xE8,0xFF,0x32,0x0,0x42,0x0,0xFD,0xFF,0x8,0x0,0x2D,0x0,0x6A,0xFF,0x47,0x0,0xD5,0xFF,0x97,0xFF,0xFB,0xFF,0x68,0xFF,0xF3,0xFF,0xAE,0xFF,0xAF,
0xFF,0xE5,0xFF,0xC6,0xFF,0xE8,0xFF,0x83,0xFF,0xD6,0xFF,0xE0,0xFF,0xD3,0xFF,0xC2,0xFF,0x9E,0xFF,0x1A,0x0,0xA3,0xFF,0xC4,0xFF,0xDD,0xFF,0xEB,0xFF,0xC1,0xFF,0xD7,0xFF,0xE4,
0xFF,0xD8,0xFF,0xFD,0xFF,0xBB,0xFF,0x8,0x0,0xFE,0xFF,0xDF,0xFF,0x1C,0x0,0xFC,0xFF,0x16,0x0,0xC,0x0,0x19,0x0,0xA,0x0,0xC,0x0,0x13,0x0,0xEA,0xFF,0x2E,0x0,0xE6,
0xFF,0x10,0x0,0xFF,0xFF,0x21,0x0,0xE5,0xFF,0xFD,0xFF,0x41,0x0,0x0,0x0,0xF0,0xFF,0x1C,0x0,0x52,0x0,0xEB,0xFF,0x40,0x0,0xE3,0xFF,0x6F,0x0,0xF5,0xFF,0xFB,0xFF,0x4A,
0x0,0xE,0x0,0x1C,0x0,0x26,0x0,0x10,0x0,0x1C,0x0,0x44,0x0,0xB2,0xFF,0x7A,0x0,0xA8,0xFF,0x8C,0x0,0x3B,0x0,0xE8,0xFF,0x3E,0x0,0x40,0x0,0xF,0x0,0xF7,0xFF,0x3F,
0x0,0xD0,0xFF,0x0,0x1,0x0,0xFF,0x47,0x0,0x22,0x1,0x31,0xFF,0x14,0x0,0x51,0x0,0xB,0x0,0x4C,0x0,0x83,0xFF,0x12,0x0,0x4B,0x0,0x45,0xFF,0x32,0x0,0xB6,0xFF,0x46,
0x0,0xE8,0xFF,0xC,0xFF,0x4E,0x0,0x2F,0x0,0x27,0xFF,0xC8,0xFF,0x5,0x0,0x2E,0xFF,0xF,0x0,0xAE,0xFF,0xA6,0xFF,0x39,0x0,0xB2,0xFF,0x8B,0xFF,0xC,0x0,0x6D,0xFF,0xC4,
0xFF,0x96,0xFF,0x58,0xFF,0xD9,0x0,0xA5,0xFE,0xE3,0xFE,0xE,0x1,0x98,0xFF,0x4E,0xFE,0xB6,0x0,0x86,0x0,0xF,0xFF,0x7A,0xFF,0x55,0xFF,0xB6,0xFF,0x64,0xFF,0xD9,0xFE,0xD9,
0x0,0xB,0x0,0x22,0xFE,0x40,0x1,0x5D,0x0,0x5E,0xFF,0x43,0xFF,0xB1,0x0,0xC1,0x0,0xED,0xFE,0x2C,0xFF,0x35,0x0,0xA8,0xFF,0x4C,0xFE,0x47,0xFF,0x50,0x0,0xB4,0xFF,0xB3,
0xFE,0x45,0x1,0xC,0x0,0xA7,0xFF,0xCD,0xFF,0xE2,0xFF,0x79,0x0,0xA9,0xFF,0x29,0xFF,0x22,0x0,0x9E,0x0,0xB0,0xFF,0xCD,0xFF,0x79,0x0,0xE2,0x0,0x9B,0x0,0xDF,0xFF,0x3A,
0x1,0x95,0x2,0xB6,0xFE,0x51,0x1,0xDC,0x0,0xB2,0x0,0xD,0x1,0xA8,0xFE,0xE2,0x1,0x4F,0x1,0xC0,0xFE,0x6,0x1,0x2F,0x2,0xE7,0xFF,0x82,0x0,0x8F,0x0,0xEE,0x1,0x54,
0x1,0xE0,0xFF,0x7B,0x2,0xDB,0x0,0xDC,0xFE,0xD0,0x1,0xB4,0x0,0xDC,0xFF,0xF8,0x0,0xF2,0x0,0x5,0x1,0x1C,0x1,0x5E,0xFF,0x2F,0x1,0x44,0x2,0xA2,0xFE,0xD4,0x0,0x37,
0x1,0xAB,0xFE,0x1A,0x0,0xF9,0xFF,0xF6,0xFD,0xD,0x1,0xBB,0xFE,0x80,0xFF,0xFC,0x0,0xDD,0xFD,0x8A,0x0,0x6A,0x0,0xF0,0xFD,0xC1,0x0,0x81,0xFE,0x9C,0xFE,0x57,0x2,0xD8,
0xFC,0x78,0xFF,0x43,0x1,0x69,0xFE,0x80,0xFE,0x95,0x0,0xF1,0xFF,0x4F,0xFF,0x9E,0xFF,0x20,0xFF,0x87,0x1,0x3A,0xFE,0xF3,0xFC,0x9F,0x0,0x62,0xFF,0x1D,0xFD,0xF1,0xFF,0x53,
0x0,0x5A,0xFE,0x2D,0xFF,0xD9,0xFF,0x20,0x0,0xD4,0xFE,0xE1,0xFF,0xEA,0xFF,0xE1,0xFE,0x1F,0x0,0x44,0x0,0x43,0xFF,0xF1,0xFD,0xFD,0xFF,0xA4,0xFF,0x23,0xFE,0x2B,0xFF,0xA0,
0x0,0x6D,0x0,0x5B,0xFE,0x82,0xFE,0x78,0x1,0x83,0xFF,0xE8,0xFD,0xD0,0x0,0x4D,0x0,0xE0,0xFF,0x34,0x0,0x14,0xFF,0xBA,0x0,0x8A,0x0,0x12,0x0,0x28,0x1,0x18,0x0,0xD0,
0x0,0x5B,0x0,0xE9,0x0,0xA6,0xFF,0xB7,0x0,0xF0,0x1,0xD0,0xFF,0xE7,0x0,0x96,0x1,0xBC,0xFF,0x47,0xFF,0xFC,0x0,0x20,0x1,0x5C,0x0,0x61,0xFF,0x2E,0x0,0xB9,0x1,0xF1,
0x0,0xCE,0xFE,0x85,0x0,0x37,0x0,0x28,0x0,0x58,0xFF,0x6D,0xFF,0x1B,0x0,0x79,0xFE,0x14,0x0,0xDE,0x0,0x77,0x1,0x20,0xFF,0x9E,0x0,0xF,0x2,0x23,0x1,0xFD,0xFE,0xE,
0x2,0x95,0x2,0x95,0xFE,0x66,0x2,0xAA,0x1,0xC5,0xFF,0xFE,0xFF,0x1A,0x0,0xA0,0x0,0x1,0x0,0x6F,0xFD,0x56,0x0,0x2F,0x2,0xEB,0xFE,0xDE,0xFE,0x61,0x1,0xD1,0xFF,0x69,
0x0,0xF7,0x0,0x90,0xFF,0x13,0x2,0x48,0x0,0x25,0x0,0xBC,0x1,0x24,0x0,0xD0,0xFF,0xAA,0x1,0x72,0x0,0x64,0x0,0x11,0x1,0xFD,0xFF,0xC6,0xFE,0x92,0xFF,0x5E,0xFF,0x82,
0xFE,0x5B,0xFF,0x96,0xFD,0xD6,0xFE,0x49,0xFF,0xE1,0xFB,0x3F,0xFD,0x13,0xFE,0xB5,0xFB,0x59,0xFC,0x78,0xFC,0x96,0xFB,0x5F,0xFD,0x59,0xFC,0x92,0xFA,0x9A,0xFF,0xAC,0xFE,0x33,
0xFD,0x3A,0xFF,0x8D,0xFF,0x9B,0x3,0xE1,0x0,0x6D,0x1,0xDB,0x6,0x8B,0x3,0x83,0x4,0x4,0x7,0xFA,0x6,0xC4,0x7,0xFD,0x5,0xB3,0x5,0xE8,0x9,0xCA,0x7,0xCD,0x2,0x2B,
0x7,0xA1,0x7,0x68,0x3,0x2C,0x3,0xA9,0x2,0x24,0x2,0x5D,0x1,0xC0,0xFD,0x45,0xFE,0xAD,0xFF,0xE1,0xFA,0xD7,0xF8,0xE,0xFA,0x91,0xF7,0x9C,0xF4,0xF8,0xF3,0xCC,0xF2,0x6C,
0xF3,0x1A,0xF2,0x53,0xEE,0xF,0xF2,0xC0,0xF1,0xC0,0xEF,0x8F,0xF2,0x4B,0xF4,0xE3,0xF4,0xCE,0xF6,0xB0,0xFA,0x26,0xFD,0xB,0x1,0xD7,0x4,0x4D,0x8,0x36,0xD,0xEA,0x10,0x89,
0x11,0x90,0x16,0xDD,0x18,0x4C,0x17,0x16,0x19,0x3,0x1A,0x1,0x18,0x45,0x16,0xD5,0x14,0xD4,0x12,0x1,0x12,0x36,0xF,0xCA,0xD,0xD2,0xB,0xF7,0x8,0x9B,0x6,0x29,0x3,0x2C,
0xFD,0xE5,0xF9,0xC1,0xF4,0xB,0xEC,0x24,0xE6,0x98,0xDD,0xA9,0xD8,0x81,0xD3,0x60,0xCC,0x36,0xD2,0x17,0xD6,0xA,0xD7,0xC2,0xE0,0xD2,0xE8,0x32,0xF4,0x9F,0xFD,0x17,0x6,0xA,
0x10,0x48,0x17,0x8E,0x19,0x22,0x1C,0x37,0x1E,0xDA,0x1A,0xF,0x18,0xB5,0x12,0xE9,0xF,0x56,0xC,0x92,0x7,0xD0,0x4,0x88,0x6,0x53,0x6,0xEB,0x7,0x4,0xB,0x9E,0xE,0x3D,
0x13,0xB4,0x13,0x19,0x16,0x7,0x17,0xFA,0x14,0x7D,0x10,0x33,0xC,0xE2,0x5,0xB9,0xFE,0x94,0xF7,0x9E,0xF1,0x72,0xE9,0xF,0xE1,0x1E,0xD9,0xEE,0xD3,0xDD,0xC9,0xC4,0xCD,0x3F,
0xD7,0xEE,0xD2,0x7E,0xDC,0x59,0xE8,0x4,0xF1,0xB2,0xFB,0x8A,0x6,0xA4,0xD,0x57,0x1A,0x2C,0x1E,0xDE,0x1D,0xAE,0x22,0x14,0x20,0x75,0x1A,0x2A,0x18,0x51,0x13,0x67,0xC,0xCA,
0xA,0x26,0x3,0x9E,0x1,0xF6,0x1,0xDB,0xFF,0x86,0x3,0x77,0x9,0x79,0xA,0xBF,0x10,0xB,0x16,0x5D,0x16,0xF9,0x18,0x20,0x17,0x2B,0x11,0x84,0xE,0xF1,0x9,0xBF,0xFF,0xFD,
0xFB,0x57,0xF3,0xC7,0xEC,0x38,0xE3,0x0,0xD9,0x81,0xD3,0x66,0xD0,0x6C,0xC9,0xAC,0xCB,0x3C,0xD9,0xBE,0xD9,0xFB,0xE1,0x98,0xEB,0xBD,0xF7,0x98,0x3,0x94,0xA,0x0,0x13,0x81,
0x1E,0x47,0x22,0x5E,0x1D,0x85,0x1F,0xB8,0x1D,0x39,0x17,0x63,0x12,0xBD,0xC,0x95,0x8,0x4E,0x8,0x52,0xFE,0x43,0xFD,0xA8,0x1,0x53,0xFD,0xCC,0xFD,0xBB,0x7,0x7,0xD,0x63,
0xD,0xDC,0x15,0x18,0x17,0xCC,0x17,0x66,0x16,0xFF,0x10,0x3,0xC,0x19,0x8,0xC5,0x0,0x12,0xF9,0x49,0xF4,0xE8,0xEB,0x84,0xE2,0x26,0xD9,0x63,0xD3,0xF1,0xCF,0xD5,0xCA,0xEE,
0xC5,0x84,0xD7,0x23,0xDD,0xE6,0xDC,0x75,0xEF,0xF4,0xFA,0xD3,0x3,0x1C,0xC,0x71,0x13,0xFD,0x1B,0x86,0x23,0xB8,0x1C,0xB6,0x1D,0x5B,0x1F,0xF9,0x16,0x1E,0x11,0x7B,0xE,0xE,
0xB,0x87,0x7,0x5F,0x5,0xAD,0x0,0xBD,0x4,0x52,0x3,0xF3,0x1,0x4,0xA,0x61,0xE,0xEC,0xE,0x7,0x15,0xA5,0x16,0x58,0x18,0xF4,0x17,0xBF,0x10,0xA8,0xE,0x7F,0xA,0x42,
0x0,0xAB,0xF7,0x76,0xF3,0x3E,0xEB,0xD5,0xE1,0xE6,0xD6,0x6,0xD2,0x99,0xD1,0x8B,0xC5,0xC4,0xC7,0x28,0xDC,0x44,0xD7,0x5,0xDE,0x28,0xF1,0xA5,0xF7,0xB0,0x4,0xC5,0xB,0x78,
0x10,0x20,0x1C,0x85,0x21,0xA7,0x18,0xDB,0x1D,0x88,0x1C,0xD0,0x14,0x1B,0x13,0x0,0xC,0x9F,0xC,0xDC,0x9,0x55,0x4,0x68,0x5,0xE8,0x8,0x10,0x4,0xE1,0x7,0x74,0xC,0xF8,
0xC,0xFD,0x12,0xA4,0x11,0x17,0x16,0x70,0x19,0xA5,0x15,0xEF,0x11,0xF6,0x11,0xF1,0xC,0xAD,0x3,0xFF,0xFF,0x0,0xF7,0x63,0xF2,0xD0,0xE9,0x5F,0xDB,0x77,0xD8,0x62,0xD2,0x31,
0xCB,0x68,0xC6,0x92,0xCE,0xA2,0xD9,0x3,0xD6,0x3A,0xE2,0x1,0xF1,0xB3,0xF9,0xD1,0x1,0xA5,0x8,0xF6,0x13,0x6,0x1A,0xAB,0x19,0x52,0x18,0xD8,0x1B,0xB0,0x18,0xCB,0x13,0xA3,
0x12,0xDA,0xF,0xDA,0xE,0x1D,0xB,0xB8,0x7,0xC6,0x9,0x73,0x9,0xD8,0x5,0x50,0x9,0x45,0xC,0x41,0xD,0x29,0xF,0x74,0x10,0x34,0x15,0x86,0x15,0x64,0x13,0x2E,0x12,0x54,
0x10,0xA7,0xB,0x65,0x4,0xBE,0xFE,0xB4,0xF7,0x36,0xF1,0x6D,0xE8,0xD4,0xDE,0x30,0xD9,0xA0,0xD4,0x2F,0xCD,0xAA,0xC8,0xF5,0xD3,0x85,0xD6,0x6A,0xD4,0xCC,0xE5,0xCD,0xED,0xCC,
0xF4,0x34,0x1,0x68,0x4,0xC3,0xF,0x1C,0x17,0x53,0x14,0x8,0x18,0xED,0x1A,0x82,0x17,0x28,0x15,0xB7,0x15,0xDC,0x13,0x3E,0x11,0x9A,0xF,0x80,0xC,0x11,0xD,0x38,0xC,0xAC,
0x8,0x38,0xB,0x4,0xD,0xD1,0xB,0xFA,0xC,0x84,0xF,0x10,0x11,0xA9,0x10,0x40,0x10,0x8E,0x10,0xDF,0xF,0x21,0xD,0xD6,0x9,0x6A,0x7,0x8E,0x2,0xA7,0xFC,0x35,0xF7,0x8F,
0xF0,0xEF,0xE8,0x9D,0xE1,0x8E,0xDC,0x6,0xD6,0xA7,0xD5,0x56,0xD7,0xAA,0xD1,0x68,0xD5,0x61,0xDC,0xB1,0xDD,0x4B,0xE5,0x42,0xEE,0xB4,0xF4,0x6A,0xFD,0x1C,0x5,0xF5,0x9,0xFE,
0xE,0x4D,0x14,0x76,0x17,0x9,0x1A,0x6C,0x1D,0x20,0x1F,0xDD,0x1E,0x56,0x1E,0x6,0x1D,0xD2,0x19,0xB4,0x16,0x7A,0x14,0x11,0x12,0xFC,0xF,0xE5,0xE,0xE0,0xD,0x45,0xD,0x24,
0xE,0x5D,0xE,0x84,0xD,0xE1,0xD,0xD4,0xC,0x5F,0x9,0xB6,0x6,0x41,0x2,0x44,0xFC,0xC0,0xF6,0xC3,0xEF,0x32,0xE8,0xCC,0xE0,0xDE,0xD8,0x73,0xD1,0xFC,0xCD,0x8D,0xCC,0x3D,
0xCB,0x2,0xCE,0xEE,0xD2,0xDF,0xD8,0x36,0xE1,0xA0,0xEA,0xEF,0xF4,0xBD,0xFE,0xA1,0x6,0x7C,0xD,0x7,0x14,0x49,0x19,0x6F,0x1D,0x4C,0x21,0x68,0x24,0x67,0x25,0x26,0x25,0xE4,
0x23,0x3,0x21,0xCC,0x1D,0x90,0x1A,0x26,0x17,0xB0,0x13,0xC4,0x10,0xFC,0xD,0xC8,0xB,0xC6,0xA,0xAF,0xA,0x45,0xA,0xB1,0x9,0x8E,0x9,0x10,0x8,0xD5,0x5,0x6A,0x3,0xC7,
0xFF,0x55,0xFB,0xDE,0xF5,0xA1,0xEF,0x1F,0xE9,0x86,0xE1,0x77,0xDA,0x5A,0xD3,0x34,0xCE,0x23,0xCD,0x4B,0xCC,0x2C,0xCE,0xBC,0xD3,0x25,0xDA,0x78,0xE2,0xE0,0xEB,0x61,0xF6,0x28,
0x1,0x0,0x9,0x40,0x10,0x11,0x17,0x1A,0x1C,0x8F,0x20,0xAB,0x23,0x73,0x26,0x1C,0x28,0x39,0x27,0xB1,0x25,0xE0,0x22,0xF4,0x1E,0x3F,0x1B,0xDB,0x16,0x28,0x13,0xB6,0xF,0x10,
0xC,0xB6,0x9,0xD,0x8,0xD5,0x7,0x4,0x8,0x89,0x7,0x99,0x7,0x0,0x7,0x93,0x5,0xA2,0x3,0xAC,0x0,0x3E,0xFD,0x84,0xF8,0xB0,0xF2,0x1D,0xED,0xA7,0xE6,0x6B,0xDF,0xA7,
0xD8,0x91,0xD1,0x2C,0xCD,0xAA,0xCC,0x5D,0xCC,0xE0,0xCE,0xBE,0xD4,0x37,0xDB,0x64,0xE3,0x6F,0xEC,0xE8,0xF6,0x16,0x1,0x5A,0x8,0xD3,0xF,0x76,0x16,0x4A,0x1B,0xCA,0x1F,0xC,
0x23,0xEE,0x25,0x2E,0x27,0x8,0x26,0x64,0x24,0x7B,0x21,0xD,0x1E,0xB0,0x1A,0xC7,0x16,0xA2,0x13,0x7F,0x10,0x70,0xD,0x99,0xB,0xAB,0xA,0xD9,0xA,0x62,0xA,0x59,0x9,0xD9,
0x8,0x74,0x7,0xA6,0x5,0x49,0x3,0x1F,0x0,0x8C,0xFC,0x50,0xF7,0x5B,0xF1,0x5D,0xEB,0x94,0xE4,0xA1,0xDD,0x84,0xD6,0xE7,0xCF,0x9,0xCD,0x57,0xCD,0xFC,0xCD,0x91,0xD1,0x3E,
0xD8,0x4F,0xDF,0x88,0xE7,0xE5,0xF0,0x3C,0xFB,0x69,0x4,0x16,0xB,0xC4,0x11,0x47,0x17,0xBB,0x1B,0x30,0x20,0x3D,0x23,0xC6,0x25,0xB7,0x26,0x8A,0x25,0x73,0x23,0x5B,0x20,0x8B,
0x1D,0x1D,0x1A,0x4B,0x16,0x7B,0x13,0x6C,0x10,0xE8,0xD,0xDF,0xB,0xC1,0xA,0xC2,0xA,0x6B,0x9,0xFF,0x7,0x7F,0x6,0x4F,0x4,0x5B,0x2,0x48,0xFF,0xE9,0xFB,0x8,0xF8,0xA0,
0xF2,0xFE,0xEC,0xB,0xE7,0xC6,0xE0,0x31,0xDA,0x36,0xD3,0x1F,0xCD,0xB6,0xCA,0x8E,0xCB,0xEF,0xCC,0x21,0xD1,0xED,0xD7,0x3F,0xDF,0xB9,0xE7,0xC4,0xF0,0xFE,0xFA,0xFE,0x3,0x90,
0xA,0x6B,0x11,0x16,0x17,0x10,0x1C,0xA4,0x20,0x82,0x23,0xFC,0x25,0x93,0x26,0x5B,0x25,0x54,0x23,0x4A,0x20,0x41,0x1D,0x5B,0x19,0x9C,0x15,0xAA,0x12,0xBD,0xF,0xB5,0xD,0xDF,
0xB,0xFE,0xA,0xF4,0xA,0xF8,0x9,0x3,0x9,0x9A,0x7,0x18,0x6,0x57,0x4,0x5C,0x1,0x43,0xFE,0x13,0xFA,0xDB,0xF4,0x46,0xEF,0x46,0xE9,0xA8,0xE2,0xC8,0xDB,0x33,0xD5,0x1A,
0xCF,0x5B,0xCD,0x14,0xCF,0xEE,0xD0,0xCF,0xD5,0xE7,0xDC,0x8E,0xE4,0x4,0xED,0xFE,0xF5,0xD5,0xFF,0xDC,0x7,0x55,0xE,0x5A,0x14,0xED,0x18,0x53,0x1D,0xAA,0x20,0xA8,0x22,0x13,
0x24,0xBE,0x23,0x65,0x22,0xC2,0x1F,0x82,0x1C,0xA2,0x19,0x19,0x16,0xFF,0x12,0x55,0x10,0x12,0xE,0x60,0xC,0x25,0xB,0xAB,0xA,0xDF,0x9,0xBB,0x8,0x7F,0x7,0xA9,0x5,0x64,
0x3,0xB7,0x0,0x75,0xFD,0x77,0xF9,0xC4,0xF4,0x8C,0xEF,0x19,0xEA,0x58,0xE4,0x2C,0xDE,0x69,0xD9,0x31,0xD6,0x81,0xD3,0xE6,0xD3,0xF3,0xD6,0xCA,0xDA,0xA0,0xE0,0xBB,0xE7,0xBA,
0xEF,0xEB,0xF7,0x25,0xFF,0xD4,0x5,0x93,0xB,0x58,0x10,0x52,0x14,0x9E,0x17,0x64,0x1A,0x36,0x1C,0xCD,0x1C,0x2E,0x1C,0xD,0x1B,0x9A,0x19,0x59,0x17,0xE5,0x14,0x57,0x12,0xD7,
0xF,0xD8,0xD,0xD0,0xB,0x54,0xA,0xBA,0x9,0x21,0x9,0x7D,0x8,0x38,0x7,0xCF,0x5,0x7C,0x4,0x20,0x2,0x18,0xFF,0xF4,0xFB,0x78,0xF8,0x9F,0xF4,0x2B,0xF0,0xF1,0xEA,0x3B,
0xE6,0x12,0xE1,0x35,0xDC,0x90,0xDA,0x91,0xDA,0x60,0xDA,0x6C,0xDC,0x62,0xE1,0x4,0xE7,0x55,0xED,0xE7,0xF4,0x88,0xFD,0x1,0x5,0xFA,0x9,0x3B,0xE,0x88,0x12,0xBF,0x15,0x20,
0x18,0x49,0x1A,0xE1,0x1B,0xA2,0x1C,0xD8,0x1B,0x40,0x1A,0xD3,0x18,0xD0,0x16,0x3B,0x14,0x84,0x11,0xD0,0xE,0xCA,0xC,0x26,0xB,0x8A,0x9,0xC7,0x8,0xE6,0x8,0xC4,0x8,0xD,
0x8,0xF,0x7,0xE,0x6,0xD4,0x4,0x4B,0x2,0x49,0xFF,0x86,0xFC,0xD5,0xF8,0x6E,0xF4,0x56,0xEF,0xE9,0xE9,0x9,0xE5,0xB1,0xDF,0x9F,0xDB,0x1F,0xDB,0x15,0xDB,0x22,0xDB,0x82,
0xDE,0x14,0xE4,0xBA,0xE9,0x37,0xF0,0xD6,0xF7,0xC7,0xFF,0x6F,0x6,0x6A,0xA,0x1A,0xE,0x24,0x12,0x2E,0x15,0x67,0x17,0xD,0x19,0x75,0x1A,0x25,0x1B,0xB,0x1A,0x54,0x18,0x90,
0x17,0x93,0x15,0xEE,0x12,0x33,0x10,0xD,0xD,0xE6,0xA,0x4C,0x9,0x8A,0x7,0xD9,0x6,0x48,0x7,0xD3,0x6,0x38,0x6,0x8D,0x5,0x82,0x4,0x1F,0x3,0x21,0x1,0xC5,0xFD,0x92,
0xFA,0x7C,0xF7,0x66,0xF3,0x8E,0xEE,0x85,0xE8,0xCC,0xE3,0x7B,0xDE,0xE0,0xDA,0x59,0xDA,0x90,0xD9,0x45,0xDB,0x62,0xDE,0xEE,0xE3,0xA2,0xE9,0x75,0xEE,0x5C,0xF8,0x4D,0x3,0x95,
0x7,0x98,0xA,0xF9,0x10,0x4,0x13,0xA1,0x15,0x25,0x15,0x76,0x14,0xA2,0x18,0xAA,0x15,0x40,0x12,0xE6,0x14,0xC6,0x14,0xDD,0x11,0x14,0x12,0x6B,0xF,0x56,0x11,0xED,0xE,0x51,
0xA,0x14,0xE,0xE0,0xA,0x58,0x8,0x60,0x9,0xBE,0x6,0xE7,0x5,0xE3,0x2,0x32,0xFD,0xBC,0xFD,0xC9,0xF6,0xFE,0xF1,0x39,0xED,0xBD,0xE4,0x15,0xDF,0x54,0xD8,0x1C,0xD1,0xE4,
0xCD,0x1F,0xDD,0x5D,0xDD,0xED,0xDE,0xAA,0xF1,0x78,0xF7,0x91,0xFE,0x1A,0x4,0x91,0x7,0x1D,0x12,0x29,0xF,0xAA,0xB,0xCC,0x12,0xDF,0xD,0xAE,0xB,0xDB,0xD,0x57,0xD,0x37,
0x11,0x66,0xD,0x8A,0xC,0x65,0x12,0x2A,0xF,0x47,0xE,0x4A,0x10,0xB7,0xE,0x1B,0xE,0xFB,0xA,0x73,0xB,0x35,0xD,0x35,0xA,0xB3,0xA,0xEA,0xB,0x4,0x9,0x90,0x8,0x2D,
0x8,0xBC,0x5,0x4B,0x4,0xD2,0xFF,0x7C,0xFC,0x45,0xF6,0x6F,0xF0,0x1F,0xE8,0xC9,0xE3,0x2F,0xD9,0x59,0xD3,0x4C,0xD2,0xEA,0xCD,0xEA,0xE4,0x5A,0xE3,0xF5,0xE7,0xE1,0x0,0x7A,
0x1,0xE5,0x6,0x14,0xC,0x8B,0xC,0x53,0x12,0x7D,0xC,0xB1,0xA,0x7B,0x11,0xDA,0x8,0x5F,0xA,0x8A,0xF,0x7C,0xE,0x7A,0x10,0x75,0xF,0x73,0x10,0xFF,0x10,0xC1,0xC,0xCA,
0xC,0x7C,0xD,0x78,0xA,0x77,0x9,0xE5,0x9,0xC8,0xB,0x3B,0x9,0xF3,0xA,0x3B,0xD,0x3B,0xB,0x17,0xA,0xB5,0xA,0xE0,0x8,0x52,0x5,0x99,0x2,0x65,0xFE,0x82,0xF7,0xA,
0xF0,0x2,0xEC,0xF6,0xE0,0x92,0xD9,0x34,0xD3,0x25,0xD0,0xF3,0xC7,0x2,0xD8,0xC4,0xE9,0x80,0xDE,0x96,0xF6,0x2B,0x4,0x42,0xFF,0xFA,0x7,0x1,0x8,0x8E,0xB,0x3C,0xA,0x19,
0x4,0x24,0xD,0x83,0x9,0x90,0x6,0x2B,0x10,0x9F,0x10,0x27,0x12,0x6C,0x13,0xBB,0x12,0xF2,0x12,0xCA,0xE,0x0,0xE,0xF9,0xE,0xF7,0x9,0x15,0xA,0x20,0xA,0xF2,0x9,0xAF,
0x9,0x76,0x8,0x18,0xC,0x89,0xC,0x31,0x8,0xC5,0xB,0xAE,0xB,0x9D,0x4,0x42,0x5,0x9C,0x0,0x7,0xFA,0xF3,0xF1,0x64,0xEC,0x61,0xE5,0x61,0xDC,0x63,0xD4,0xFC,0xD0,0x5B,
0xCE,0x48,0xCC,0xB4,0xE4,0x9E,0xE6,0xBC,0xE6,0xEB,0x2,0x29,0x2,0x2B,0x1,0x60,0xB,0xDD,0x7,0xFB,0xB,0x80,0x8,0x4C,0x7,0xE9,0xD,0x7C,0x6,0xBE,0xA,0x44,0x12,0xD5,
0x10,0x5F,0x12,0xF3,0x12,0x19,0x13,0x2A,0x10,0x1,0xC,0xDC,0xF,0x9A,0xC,0xF3,0x8,0xF0,0xC,0xA1,0xB,0xC4,0xB,0x85,0xC,0xD3,0xC,0xB3,0xF,0x89,0xD,0x40,0xB,0xE4,
0xF,0xA6,0x9,0x1B,0x5,0xCF,0x6,0xBA,0xFE,0x8E,0xF8,0xAF,0xF0,0x27,0xEE,0x2E,0xE3,0x18,0xDC,0xB5,0xD7,0xBA,0xD1,0xD4,0xCC,0xA8,0xD5,0x31,0xEB,0x5C,0xE0,0xAD,0xF1,0x11,
0x7,0xB3,0xFD,0x9C,0x5,0xEA,0xB,0x76,0x9,0xDB,0x9,0x93,0x6,0xDA,0xC,0x13,0xB,0x6F,0x5,0xE9,0x10,0xD3,0x11,0x9B,0xF,0xCB,0x14,0x9A,0x13,0x4C,0x10,0x28,0xF,0xBA,
0xB,0x7E,0xC,0x33,0x9,0x2,0x6,0x60,0xA,0x61,0x9,0x2E,0x8,0xBA,0xC,0x36,0xD,0x6B,0xD,0x48,0xE,0x37,0xD,0x46,0xD,0xB5,0x6,0xB9,0x6,0x22,0x2,0x38,0xFA,0x86,
0xF7,0x2A,0xED,0xE4,0xE9,0x1C,0xE1,0x88,0xD7,0x9,0xD3,0xA3,0xD1,0xB7,0xC9,0x22,0xDD,0x68,0xE9,0x88,0xDE,0x48,0xFE,0x3C,0x2,0xB7,0xF9,0x1F,0xB,0x65,0x8,0x9A,0x5,0xA4,
0xA,0xE0,0x6,0x30,0xC,0xE5,0x7,0x48,0x8,0xAF,0x14,0x65,0xE,0x2C,0x10,0x99,0x17,0xA4,0x10,0x17,0xF,0x1C,0xF,0x4C,0xC,0x68,0xB,0x9F,0x5,0x9B,0x9,0x49,0x8,0x64,
0x3,0xA6,0xA,0x87,0x8,0xC,0x7,0x62,0xB,0x4F,0x7,0xBC,0x9,0x1E,0x9,0x54,0x3,0xF1,0x7,0x31,0x1,0x5E,0xFC,0xDB,0xF8,0x1,0xF0,0x60,0xEC,0xD5,0xE3,0xF,0xDD,0xD5,
0xD9,0x4D,0xD6,0x4,0xD0,0xAA,0xE4,0xBE,0xE7,0xF1,0xE3,0xE1,0xFF,0x7F,0x0,0xEB,0xFE,0xDD,0xB,0xAE,0xA,0x48,0x9,0xF1,0xB,0xD9,0x9,0x64,0xB,0x73,0x6,0x99,0x8,0x3B,
0xD,0x2,0x9,0x93,0xD,0xCA,0xF,0x47,0xB,0xB1,0xF,0x58,0xF,0x8B,0xB,0x87,0xE,0x3,0xC,0xA6,0xA,0x1B,0xB,0x75,0x8,0xD5,0x7,0x1F,0x7,0x5,0x5,0x53,0x6,0x7C,
0x5,0x2D,0x6,0xE5,0x7,0xA5,0x6,0xBB,0x6,0x30,0x6,0xB9,0x2,0x98,0xFD,0xF0,0xF7,0xE4,0xF2,0x72,0xEB,0x5B,0xE1,0x29,0xDD,0x20,0xD9,0x34,0xD5,0x88,0xE3,0x29,0xE9,0x31,
0xEA,0x7D,0xFC,0x82,0x4,0xE1,0x7,0x44,0xE,0xA,0x12,0xD2,0x12,0x82,0xF,0xD9,0xB,0x76,0xA,0xFE,0x2,0x49,0xFD,0x23,0xFD,0xF6,0xFA,0xE9,0xFA,0x2,0xFC,0x5B,0xFF,0xE0,
0x3,0x3C,0x6,0x2F,0xA,0x67,0xF,0xEE,0xF,0xF5,0xF,0x93,0x10,0x74,0xF,0xEC,0xA,0xB,0x6,0x56,0x4,0x41,0x1,0x78,0xFF,0x88,0xFF,0x31,0x0,0x50,0x3,0xC5,0x4,0xF2,
0x4,0x1C,0x6,0x6B,0x5,0x62,0x0,0x25,0xFD,0x13,0xF9,0x9,0xEE,0xC7,0xE4,0x31,0xE3,0x8D,0xDD,0x7A,0xDF,0x2D,0xEA,0xBA,0xE7,0xEF,0xEF,0xF2,0x0,0xF6,0x2,0x8B,0x6,0x90,
0x13,0x4F,0x15,0x0,0x11,0x21,0x13,0xA,0x11,0x46,0x8,0x38,0x2,0x56,0xFF,0x45,0xFA,0x90,0xF6,0x4F,0xF6,0x0,0xF8,0x17,0xFA,0x41,0xFD,0xDB,0x2,0x22,0x8,0x94,0xA,0xBC,
0xD,0xD4,0x10,0xEC,0xE,0x23,0xD,0x4,0xF,0x92,0xB,0x8F,0x4,0xDF,0x6,0xFF,0x6,0xB2,0xFF,0xDE,0x1,0x25,0x5,0xCB,0x0,0xE1,0x0,0xFF,0x3,0xE8,0xFE,0xD6,0xFA,0x31,
0xFA,0xF7,0xF2,0x8F,0xE9,0x15,0xE7,0xD1,0xE4,0x84,0xE6,0x52,0xE9,0x39,0xE7,0xB5,0xF1,0xC0,0xFA,0x79,0xFA,0x18,0x3,0x60,0xE,0x8C,0xC,0x5C,0xE,0x93,0x14,0x39,0x10,0x64,
0xA,0x54,0xA,0x55,0x6,0x2B,0xFF,0xA9,0xFE,0x4C,0xFC,0xB6,0xF8,0xB3,0xF9,0x96,0xFB,0xF3,0xFC,0x60,0xFF,0xDC,0x2,0x9D,0x6,0x1,0x8,0x53,0xA,0xC8,0xB,0x21,0xD,0xC4,
0xC,0x58,0xA,0xA5,0xB,0x4A,0xA,0x99,0x5,0x6A,0x5,0xD2,0x5,0x3,0x1,0x57,0x0,0x56,0x1,0xA7,0xFB,0xE6,0xF8,0x5E,0xF9,0x52,0xF1,0xC5,0xEB,0x49,0xEA,0x6E,0xE6,0xA9,
0xE9,0x7A,0xEA,0x35,0xE7,0x4C,0xF0,0xD6,0xF7,0xD,0xF6,0xFF,0xFD,0x7F,0x9,0x8A,0x8,0x8F,0xA,0xED,0x13,0x3C,0x11,0x2A,0xC,0x57,0xF,0xD,0xC,0x8A,0x3,0x7C,0x3,0xB1,
0x1,0x19,0xFB,0xF9,0xFA,0x3F,0xFC,0x6E,0xFA,0x74,0xFB,0x3C,0xFF,0x87,0x0,0xB1,0x2,0x64,0x5,0x5,0x8,0xE0,0xA,0xB3,0x9,0x67,0xA,0x99,0xD,0x90,0xA,0x4,0x8,0x65,
0xA,0x8E,0x7,0xA8,0x2,0x50,0x4,0x53,0x2,0x91,0xFB,0x3A,0xFB,0xCF,0xF9,0xF4,0xF2,0x4A,0xEF,0xF5,0xED,0xE,0xEA,0xC7,0xEA,0x30,0xEE,0x96,0xEB,0x3B,0xEE,0xC1,0xF6,0x1A,
0xF7,0xA8,0xF9,0x8C,0x3,0xF8,0x5,0x7C,0x6,0xBA,0xD,0xB0,0xF,0x29,0xC,0x86,0xE,0x77,0xE,0x60,0x8,0x41,0x7,0x8C,0x7,0xDE,0x1,0x34,0xFF,0xFC,0x0,0xCA,0xFE,0x8C,
0xFC,0x24,0xFF,0x4C,0x0,0x13,0x0,0x86,0x2,0x18,0x4,0x99,0x4,0x5C,0x5,0xAA,0x6,0x0,0x7,0xBD,0x6,0x94,0x7,0xF3,0x6,0xCE,0x5,0xAE,0x5,0x4F,0x4,0xAE,0x2,0x33,
0x1,0x20,0xFF,0xB6,0xFC,0xA7,0xFA,0x5C,0xF8,0x25,0xF5,0x44,0xF3,0x8A,0xF1,0xAB,0xF0,0x2B,0xF1,0xBD,0xEF,0x2B,0xF0,0x5,0xF4,0xE8,0xF4,0x45,0xF6,0xF3,0xFB,0xEB,0xFE,0x24,
0x0,0x10,0x5,0x78,0x8,0x9C,0x7,0x5E,0x9,0xC3,0xB,0x97,0x9,0x6B,0x8,0xEE,0x8,0x9D,0x6,0x93,0x4,0x2C,0x5,0xCC,0x3,0xAB,0x1,0xC7,0x2,0x8B,0x2,0xF2,0x0,0xD9,
0x1,0x95,0x2,0x87,0x1,0xB9,0x1,0x20,0x3,0x59,0x2,0xFB,0x1,0x20,0x3,0x79,0x2,0xEF,0x1,0x6D,0x2,0xE1,0x1,0x31,0x1,0xE7,0x0,0x47,0x0,0xBA,0xFF,0xEB,0xFE,0x12,
0xFE,0x31,0xFD,0x8D,0xFB,0x49,0xFA,0xA,0xF9,0x7F,0xF7,0xB3,0xF6,0x9E,0xF5,0x4F,0xF4,0xC6,0xF4,0x9F,0xF5,0x95,0xF5,0x2F,0xF7,0xE6,0xF9,0xAA,0xFB,0x80,0xFD,0x52,0x0,0x80,
0x2,0x1E,0x3,0xBC,0x4,0x9C,0x6,0x15,0x6,0xBC,0x5,0xE1,0x6,0x77,0x6,0x2B,0x5,0xBB,0x5,0xFB,0x5,0xCC,0x4,0x92,0x4,0xF9,0x4,0x64,0x4,0xDC,0x3,0x20,0x4,0x49,
0x4,0x1F,0x4,0xBA,0x3,0xF2,0x3,0xF3,0x3,0xC8,0x2,0xC3,0x2,0xFC,0x2,0xD7,0x1,0x6A,0x1,0x52,0x1,0x1,0x0,0xF3,0xFE,0x71,0xFE,0xF5,0xFC,0x50,0xFB,0x20,0xFA,0x6F,
0xF8,0xF0,0xF6,0x9,0xF6,0xF8,0xF4,0x80,0xF4,0xE4,0xF4,0x61,0xF5,0x66,0xF6,0x4B,0xF8,0x8F,0xFA,0xA5,0xFC,0xE5,0xFE,0x47,0x1,0xE0,0x2,0x4E,0x4,0xE5,0x5,0x8E,0x6,0xD0,
0x6,0x51,0x7,0x37,0x7,0xE4,0x6,0xD6,0x6,0x65,0x6,0xAD,0x5,0x23,0x5,0xB0,0x4,0x1F,0x4,0xA4,0x3,0x73,0x3,0x18,0x3,0xBA,0x2,0xA8,0x2,0x65,0x2,0x1E,0x2,0x24,
0x2,0xC7,0x1,0x3D,0x1,0x28,0x1,0xB2,0x0,0xDA,0xFF,0x8A,0xFF,0xEA,0xFE,0xCC,0xFD,0x47,0xFD,0x90,0xFC,0x64,0xFB,0x7B,0xFA,0x9D,0xF9,0x9D,0xF8,0x85,0xF7,0xDC,0xF6,0xA2,
0xF6,0x41,0xF6,0x5B,0xF6,0x5B,0xF7,0x44,0xF8,0x42,0xF9,0x4A,0xFB,0x67,0xFD,0xDB,0xFE,0xA4,0x0,0x8A,0x2,0x8F,0x3,0x77,0x4,0x8B,0x5,0xEE,0x5,0x18,0x6,0x76,0x6,0x84,
0x6,0x4D,0x6,0x2E,0x6,0x6,0x6,0xA2,0x5,0x4D,0x5,0x13,0x5,0xB0,0x4,0x4A,0x4,0x4,0x4,0xA0,0x3,0x3B,0x3,0x4,0x3,0xB6,0x2,0x48,0x2,0xF2,0x1,0x83,0x1,0xFB,
0x0,0x86,0x0,0xF2,0xFF,0x4B,0xFF,0xAD,0xFE,0xF9,0xFD,0x30,0xFD,0x70,0xFC,0xA1,0xFB,0xC6,0xFA,0xF5,0xF9,0x31,0xF9,0x76,0xF8,0xE1,0xF7,0x95,0xF7,0x7E,0xF7,0xA8,0xF7,0x37,
0xF8,0x1D,0xF9,0x35,0xFA,0x9A,0xFB,0x3B,0xFD,0xD4,0xFE,0x63,0x0,0xD8,0x1,0x10,0x3,0xF,0x4,0xE1,0x4,0x7E,0x5,0xDE,0x5,0x20,0x6,0x41,0x6,0x38,0x6,0x1C,0x6,0xEE,
0x5,0xA5,0x5,0x6E,0x5,0x2B,0x5,0xD7,0x4,0xA3,0x4,0x69,0x4,0x19,0x4,0xDB,0x3,0xB0,0x3,0x5C,0x3,0x1,0x3,0x9D,0x2,0x12,0x2,0x81,0x1,0xEA,0x0,0x37,0x0,0x76,
0xFF,0xB6,0xFE,0xD9,0xFD,0xF5,0xFC,0x19,0xFC,0x28,0xFB,0x35,0xFA,0x49,0xF9,0x5D,0xF8,0x8A,0xF7,0xFD,0xF6,0xB5,0xF6,0x9A,0xF6,0xDC,0xF6,0x95,0xF7,0x9B,0xF8,0xEC,0xF9,0x94,
0xFB,0x5B,0xFD,0x16,0xFF,0xB6,0x0,0x25,0x2,0x5F,0x3,0x6B,0x4,0x43,0x5,0xD3,0x5,0x2B,0x6,0x6D,0x6,0x8D,0x6,0x85,0x6,0x64,0x6,0x37,0x6,0x5,0x6,0xAC,0x5,0x5F,
0x5,0x16,0x5,0xBF,0x4,0x72,0x4,0x8,0x4,0xBC,0x3,0x63,0x3,0xE1,0x2,0x63,0x2,0xD7,0x1,0x49,0x1,0x9E,0x0,0xEA,0xFF,0x4A,0xFF,0x8D,0xFE,0xBE,0xFD,0xF4,0xFC,0x27,
0xFC,0x4F,0xFB,0x65,0xFA,0x8E,0xF9,0xBF,0xF8,0xE6,0xF7,0x35,0xF7,0xB4,0xF6,0x5A,0xF6,0x4D,0xF6,0x9E,0xF6,0x43,0xF7,0x46,0xF8,0xAF,0xF9,0x68,0xFB,0x45,0xFD,0x1D,0xFF,0xE6,
0x0,0x73,0x2,0xCF,0x3,0x5,0x5,0xF4,0x5,0xAC,0x6,0x3E,0x7,0xA0,0x7,0xDC,0x7,0xFC,0x7,0xF6,0x7,0xD9,0x7,0x99,0x7,0x3E,0x7,0xDB,0x6,0x62,0x6,0xD4,0x5,0x30,
0x5,0x8F,0x4,0xE6,0x3,0x21,0x3,0x58,0x2,0x7C,0x1,0xA0,0x0,0xCD,0xFF,0xFD,0xFE,0x2D,0xFE,0x64,0xFD,0x98,0xFC,0xD6,0xFB,0x18,0xFB,0x60,0xFA,0xB7,0xF9,0x13,0xF9,0x6D,
0xF8,0xA7,0xF7,0xDB,0xF6,0x2C,0xF6,0xB5,0xF5,0x5E,0xF5,0x6A,0xF5,0xF9,0xF5,0xE6,0xF6,0x1A,0xF8,0xBD,0xF9,0xA7,0xFB,0x82,0xFD,0x73,0xFF,0x4A,0x1,0xE7,0x2,0x51,0x4,0x99,
0x5,0x9F,0x6,0x6E,0x7,0x17,0x8,0xAD,0x8,0x20,0x9,0x81,0x9,0xBF,0x9,0xA3,0x9,0x6B,0x9,0x2,0x9,0x7F,0x8,0xC1,0x7,0xE1,0x6,0xF,0x6,0x20,0x5,0x14,0x4,0xFA,
0x2,0xEE,0x1,0xF2,0x0,0xE7,0xFF,0xF6,0xFE,0x19,0xFE,0x49,0xFD,0xA0,0xFC,0x9,0xFC,0x9B,0xFB,0x22,0xFB,0xA1,0xFA,0x13,0xFA,0x71,0xF9,0xEC,0xF8,0x80,0xF8,0xD,0xF8,0xA2,
0xF7,0x5B,0xF7,0x31,0xF7,0x1E,0xF7,0x3E,0xF7,0xC1,0xF7,0x88,0xF8,0x88,0xF9,0xE5,0xFA,0x8E,0xFC,0x34,0xFE,0xDF,0xFF,0x96,0x1,0x44,0x3,0xA1,0x4,0xC2,0x5,0xD0,0x6,0x7E,
0x7,0x1,0x8,0xA2,0x8,0x1E,0x9,0x57,0x9,0x53,0x9,0xE,0x9,0xBA,0x8,0x67,0x8,0xCD,0x7,0xCE,0x6,0xFA,0x5,0x30,0x5,0x6A,0x4,0x87,0x3,0x60,0x2,0x7E,0x1,0xE2,
0x0,0x53,0x0,0x6A,0xFF,0x8C,0xFE,0xF7,0xFD,0x91,0xFD,0xE2,0xFC,0xD,0xFC,0xAF,0xFB,0x26,0xFB,0xB9,0xFA,0x80,0xFA,0x53,0xFA,0x3E,0xFA,0xC,0xFA,0xBC,0xF9,0x80,0xF9,0xB4,
0xF8,0x31,0xF8,0xFB,0xF7,0xF6,0xF7,0xCA,0xF7,0x15,0xF8,0x60,0xF9,0x44,0xFB,0x11,0x1,0xDA,0x2,0xAB,0xFD,0x82,0xFA,0xE4,0xFD,0x3E,0x3,0x8D,0x2,0xB3,0xFE,0x42,0xFE,0xEF,
0x1,0xBE,0x3,0x5C,0x3,0x19,0x4,0xE3,0x6,0x72,0xA,0x16,0xC,0x63,0xD,0xC5,0xC,0xD,0x6,0x43,0xFF,0x80,0x3,0x5F,0xB,0xA0,0x8,0x26,0x0,0x99,0xFE,0x69,0x2,0x22,
0x2,0xF,0xFE,0xFE,0xFB,0x72,0xFD,0x2B,0xFF,0x1B,0xFE,0xB,0xFC,0x64,0xFB,0xAD,0xFC,0x8B,0xFE,0x3C,0xFC,0xCA,0xF5,0xDC,0xF2,0xAA,0xF8,0xF2,0xFD,0xD7,0xF8,0x2D,0xF1,0x96,
0xF3,0x2F,0xFD,0xD,0x0,0x1E,0xF9,0x3C,0xF4,0x54,0xF9,0x5C,0xFF,0x8F,0xFD,0xA0,0xF8,0x79,0xF9,0xD5,0xFE,0x60,0x1,0x74,0xFF,0x77,0xFE,0xB9,0x2,0x2B,0x8,0x7B,0xB,0xB2,
0xC,0x26,0xD,0x74,0xD,0x59,0xD,0xA3,0xC,0x34,0xB,0xEE,0x8,0x4,0x8,0x50,0x7,0xEE,0x6,0xE4,0x7,0x54,0x6,0x13,0x6,0x60,0x5,0x5B,0x5,0x84,0x6,0xDF,0x4,0x6D,
0x2,0x86,0x0,0x12,0x1,0x69,0xFF,0xE7,0xFB,0x80,0xFA,0x22,0xFB,0x17,0xFA,0x62,0xF8,0xC2,0xF7,0xFB,0xF7,0xA4,0xF8,0xD5,0xF7,0x7D,0xF7,0xBA,0xF5,0xC7,0xF5,0x64,0xF5,0xB7,
0xF3,0x55,0xF1,0x9E,0xEF,0xD6,0xF2,0xE9,0xF4,0xB5,0xF2,0x4A,0xF2,0xCE,0xF7,0xBF,0xFD,0x4E,0x0,0x8C,0xFF,0xF3,0x3,0x52,0xB,0xE7,0xE,0xF2,0xD,0x6C,0xC,0x49,0x10,0x4A,
0x13,0xA1,0x11,0xC1,0xE,0x2C,0xD,0xE9,0xE,0x18,0xF,0xD0,0xB,0x24,0x8,0xB4,0x7,0xA3,0x9,0x88,0x6,0xB3,0x4,0x2,0x2,0x7,0x2,0xBE,0x2,0x18,0xFF,0x45,0xFD,0x54,
0xFC,0x98,0xFB,0x5D,0xFB,0x58,0xF7,0x3D,0xF3,0xBB,0xF6,0x23,0xF3,0x7F,0xEC,0xE4,0xED,0x58,0xED,0xEB,0xE9,0x99,0xEB,0x54,0xEC,0x97,0xED,0x87,0xF0,0x8B,0xF1,0x13,0xF6,0x1A,
0xFC,0x8C,0x0,0x6D,0x2,0x79,0x7,0x28,0xC,0xE3,0xE,0xB3,0x10,0x27,0x11,0xB7,0x12,0x7C,0x13,0x50,0x13,0xC8,0x10,0xB7,0xF,0x3E,0xF,0x99,0xD,0xE2,0xC,0xC1,0xC,0xDF,
0x9,0x99,0x8,0x65,0x9,0x34,0x6,0xF4,0x5,0x24,0x4,0xD4,0x2,0x13,0x2,0xD2,0xFE,0x4F,0xFE,0xC7,0xFB,0x53,0xFA,0xF8,0xF8,0x56,0xF7,0xF6,0xF5,0x2A,0xF3,0xA9,0xF1,0x56,
0xF0,0xE2,0xED,0xF3,0xEA,0xEA,0xE8,0xD2,0xEA,0x15,0xEC,0xEE,0xEA,0x10,0xEB,0xCF,0xEF,0xA2,0xF4,0xCC,0xF6,0xFE,0xFA,0x8,0xFF,0x13,0x5,0xCD,0x9,0xCA,0xB,0xF2,0xC,0xFB,
0x11,0xF8,0x13,0x2D,0x12,0xCD,0x12,0xA6,0x10,0x45,0x13,0x7B,0x11,0x9,0xD,0xE1,0xD,0x43,0xE,0xAF,0xB,0xAB,0x8,0x76,0x8,0xF9,0x6,0xFE,0x7,0xD4,0x4,0xA6,0x1,0x7A,
0x1,0x44,0x1,0xC3,0xFE,0xDD,0xFC,0x51,0xFE,0x65,0xFB,0xAF,0xF9,0xD2,0xF9,0x88,0xF7,0x20,0xF5,0x10,0xF6,0xA,0xF3,0xA0,0xF0,0xD8,0xED,0xE0,0xEC,0x15,0xEE,0xF8,0xEC,0x59,
0xED,0x84,0xEE,0xB6,0xF1,0xA4,0xF4,0xF6,0xF9,0xC9,0xFB,0xAB,0xFF,0xB4,0x5,0x6,0x9,0x8D,0xA,0x6E,0xD,0x3F,0xF,0x13,0x10,0xE5,0x11,0x80,0xF,0x2C,0xF,0x9,0xF,0x42,
0xF,0xBB,0xC,0xC5,0xB,0x46,0xC,0xDB,0xA,0x1C,0xA,0x48,0x6,0xBB,0x5,0xAC,0x6,0xCF,0x2,0x94,0x1,0x91,0xFF,0xA3,0xFF,0xD5,0xFF,0xB,0xFD,0x92,0xFB,0x69,0xFB,0xE6,
0xFC,0xA,0xFA,0x85,0xF8,0xF0,0xF6,0x61,0xF8,0x39,0xF6,0x94,0xF1,0xCD,0xF1,0x27,0xF1,0x7F,0xEF,0xBB,0xEE,0x55,0xEF,0xF1,0xEF,0x6,0xF2,0x7E,0xF2,0x33,0xF5,0x5F,0xF8,0x61,
0xFB,0x52,0xFE,0x19,0x2,0xC2,0x4,0xD1,0x6,0x35,0xB,0x2E,0xA,0xD9,0xB,0xAF,0xD,0xCA,0xC,0x93,0xC,0x83,0xC,0x6F,0xC,0xBD,0xB,0xB0,0xB,0x56,0xA,0x57,0x9,0xB2,
0x7,0xDD,0x7,0xDA,0x6,0x7B,0x5,0x89,0x3,0x4B,0x4,0x33,0x2,0x1,0x3,0x89,0x0,0xFF,0xFC,0x32,0x1,0x19,0xFF,0xE7,0xFC,0xDA,0xF8,0x59,0xFA,0x22,0xFC,0xEB,0xF9,0xDD,
0xF4,0x47,0xF6,0x0,0xF5,0xD,0xF6,0x8,0xF5,0xAF,0xEC,0x2A,0xF4,0xB3,0xF6,0xC5,0xF2,0x87,0xF2,0xE7,0xF2,0x37,0xF8,0xFD,0xFC,0x30,0xFA,0xF3,0xFB,0x53,0x0,0x72,0x5,0x1A,
0x7,0xFB,0x5,0x19,0x7,0x1B,0xB,0x5E,0xD,0x14,0xB,0x2B,0xA,0xBF,0xB,0x2C,0xE,0xD9,0xB,0xAE,0xA,0xB2,0x9,0xAC,0xA,0x86,0x8,0x63,0x8,0xCC,0x5,0xD6,0x4,0xE5,
0x5,0xCF,0x3,0x1A,0x3,0xB1,0x0,0x30,0x3,0xD,0x2,0xFA,0xFF,0x9F,0xFC,0xE2,0x0,0x76,0xFB,0xDB,0xFD,0x3F,0xFD,0x15,0xF7,0xEC,0xFB,0xB5,0xF8,0xD2,0xF8,0x5E,0xF6,0xE4,
0xF7,0xE2,0xF4,0xC5,0xF5,0x55,0xF3,0x6,0xF4,0x4E,0xF7,0xBE,0xF5,0x7A,0xF7,0xDF,0xF5,0x69,0xF7,0x45,0xFD,0x6F,0xFD,0xE5,0xFC,0x8,0x1,0x7E,0x3,0x87,0x5,0x3,0x5,0x21,
0x7,0x59,0x7,0xA3,0x9,0xC1,0x8,0x42,0x8,0xFE,0x8,0x72,0x7,0x32,0x9,0x3D,0x9,0x9D,0x6,0xE4,0x6,0x5D,0x7,0xC6,0x5,0x4D,0x7,0x1,0x4,0x9,0x4,0x8B,0x3,0xE2,
0x1,0x45,0x2,0xAF,0xFD,0xC,0x0,0xBD,0xFE,0xC2,0xFD,0x27,0xFF,0x2C,0xFB,0xDE,0xFC,0xDF,0xFC,0x27,0xFA,0x6B,0xF9,0xE8,0xF9,0xD4,0xF8,0xA2,0xF8,0xFF,0xF7,0x7B,0xF7,0xEE,
0xF7,0x81,0xF7,0x52,0xF7,0x24,0xF7,0x38,0xF5,0x61,0xF8,0x70,0xF8,0xB,0xF8,0x59,0xFB,0x42,0xFB,0x78,0xFE,0x11,0x0,0x7E,0x1,0x43,0x1,0x2E,0x5,0x78,0x4,0x15,0x6,0xDA,
0x5,0x10,0x7,0x72,0x9,0xCA,0x6,0x2F,0x8,0xEE,0x7,0xDC,0x7,0xD5,0x8,0x7D,0x7,0xA,0x6,0x8C,0x8,0x14,0x3,0xE1,0x6,0xAF,0x3,0x5A,0x3,0x84,0x4,0x51,0x1,0x1B,
0x5,0x25,0x1,0x54,0x2,0x33,0x0,0xE,0x0,0x8,0x0,0x9A,0xFD,0x75,0xFF,0x53,0xFC,0xB5,0xFC,0x91,0xFB,0x87,0xFB,0xE1,0xFA,0x58,0xF9,0x84,0xFB,0x76,0xF7,0xA1,0xFB,0x5B,
0xF9,0xA4,0xF7,0xDC,0xF8,0x28,0xF9,0x55,0xF8,0xB8,0xF8,0xED,0xFC,0x51,0xFA,0x88,0xFA,0x70,0xFB,0x23,0xFF,0xE6,0xFF,0x28,0xFF,0x9E,0xFF,0xF0,0x3,0xC7,0x6,0xFA,0x3,0xDF,
0x3,0xF8,0x6,0xC5,0x7,0x35,0x7,0xFD,0x7,0xFD,0x5,0x76,0x6,0xAC,0xA,0x64,0x5,0x20,0x5,0x14,0x8,0x65,0x5,0xD5,0x6,0xFF,0x2,0xCE,0x3,0x36,0x7,0x67,0x5,0xD4,
0x1,0x9C,0x1,0x88,0x3,0xDF,0x0,0x60,0x0,0xF7,0xFF,0xA6,0xFC,0x3E,0xFF,0xB,0xFE,0xF2,0xFB,0xA8,0xFD,0xAC,0xFA,0x25,0xFB,0x1C,0xFA,0x37,0xF8,0xDE,0xF9,0xFC,0xF8,0xBD,
0xF9,0x32,0xF8,0x8A,0xF6,0x44,0xF8,0xD0,0xF7,0x45,0xF8,0xCC,0xF9,0x44,0xFA,0xD3,0xF9,0x28,0xFD,0xC0,0xFC,0x2C,0xFC,0x6B,0xFF,0xD6,0x0,0xE2,0x2,0x8D,0xFF,0x94,0x2,0xE3,
0x5,0xB7,0x3,0xBD,0x6,0x93,0x6,0x8,0x8,0x23,0x8,0x6C,0x4,0xA7,0x5,0xF3,0x7,0x2,0x6,0xC8,0x6,0xDC,0x3,0x15,0x4,0x9C,0x5,0x0,0x3,0x34,0x3,0x29,0x3,0xD5,
0x5,0x38,0x0,0xC1,0x0,0x10,0x2,0x32,0x0,0xE1,0xFF,0x2C,0xFF,0xCD,0xFE,0x92,0xFB,0x29,0xFD,0x4F,0xFC,0xA,0xFB,0x4F,0xF9,0xD8,0xF9,0x76,0xFA,0x7,0xF8,0x3,0xF9,0x62,
0xF7,0x52,0xF7,0xAD,0xFA,0xA8,0xF6,0x2E,0xF6,0x6,0xFB,0x4D,0xF9,0x65,0xF9,0x4C,0xFB,0x6B,0xFA,0x7C,0xFD,0x51,0x0,0x6C,0xFF,0x64,0xFF,0x4,0x4,0x69,0x3,0x13,0x3,0x30,
0x7,0x20,0x4,0xA6,0x7,0xC8,0x8,0xA0,0x5,0x66,0x8,0x83,0x8,0xEC,0x5,0xB0,0x6,0xFD,0x6,0x45,0x7,0x9F,0x5,0xAE,0x5,0xCB,0x5,0xA8,0x3,0xEC,0x5,0x38,0x2,0x59,
0x4,0xA9,0x2,0xCC,0x1,0x2,0x3,0xBA,0xFE,0x75,0x0,0x25,0x0,0x16,0xFD,0x2F,0xFE,0x5A,0xFD,0x8C,0xF9,0xC6,0xFB,0x56,0xFB,0xBE,0xF9,0x85,0xF8,0xE8,0xF8,0x73,0xF8,0x3,
0xFA,0xA5,0xF7,0x29,0xF8,0x53,0xFA,0x66,0xF8,0x40,0xF9,0xED,0xF8,0xBB,0xFA,0x99,0xFC,0x3C,0xFE,0x2D,0xFB,0xE5,0xFF,0x20,0x1,0x59,0x0,0x83,0x4,0x85,0x3,0xF,0x6,0xE,
0x8,0x31,0x7,0x20,0x7,0x2D,0x8,0x5A,0x8,0x91,0x8,0xB1,0x5,0x3F,0x5,0xCE,0x8,0xF0,0x4,0x29,0x4,0x6E,0x6,0xE7,0x3,0xF3,0x5,0x43,0x5,0xE0,0x1,0x84,0x4,0xE3,
0x2,0xC2,0x0,0x98,0x2,0xCC,0x0,0x22,0x0,0xB7,0xFE,0x3,0xFC,0xF1,0xFC,0x5B,0xFD,0x54,0xF9,0xC6,0xFA,0xD,0xFC,0xCE,0xF7,0xBB,0xF8,0xE1,0xF9,0x31,0xF9,0x81,0xF7,0xBB,
0xF7,0xD,0xF9,0x48,0xF8,0xFD,0xF6,0xF6,0xF7,0x7D,0xF9,0x50,0xF9,0x34,0xFA,0xD,0xFA,0xA9,0xFC,0xC0,0xFE,0x1A,0xFE,0xA9,0x0,0x49,0x2,0xE3,0x2,0x58,0x5,0x3A,0x4,0xAB,
0x6,0x2,0x9,0xB3,0x3,0x5C,0x8,0xEC,0x8,0x81,0x5,0x6E,0x9,0x9E,0x6,0xED,0x6,0x6,0x8,0xAF,0x4,0x64,0x4,0xFD,0x5,0x88,0x5,0x12,0x3,0x58,0x3,0x11,0x2,0xB3,
0x4,0x1A,0x1,0xB1,0xFF,0x68,0x2,0x10,0xFD,0x79,0x1,0x87,0xFD,0xD0,0xFB,0x73,0xFE,0xDD,0xF9,0xAF,0xFB,0x8E,0xF9,0x96,0xF8,0x17,0xFA,0x86,0xF9,0xC9,0xF8,0x62,0xF6,0x31,
0xF9,0xB4,0xF9,0xEA,0xF7,0xB3,0xF7,0xF4,0xF7,0x8A,0xFB,0x1A,0xFA,0x2F,0xF8,0x83,0xFC,0x92,0xFF,0xB7,0xFD,0x71,0x0,0x2D,0x1,0xB5,0x2,0xB4,0x5,0xF4,0x4,0x6F,0x6,0x4,
0x8,0x5D,0x9,0x2B,0x8,0x6B,0x8,0x53,0x8,0xE8,0xA,0xBC,0x7,0xB7,0x5,0xC2,0x8,0x1E,0x5,0x5E,0x7,0x65,0x5,0x6E,0x3,0xF6,0x4,0x7D,0x5,0x80,0x3,0xDE,0x1,0x1B,
0x4,0x89,0x1,0xD3,0xFE,0xF4,0xFF,0x77,0x0,0xAD,0xFC,0x17,0xFE,0x8B,0xFB,0xF,0xFB,0x28,0xFB,0xD4,0xF7,0x50,0xF9,0x3A,0xF9,0x88,0xF7,0x4A,0xF7,0x14,0xF7,0x41,0xF5,0xD9,
0xF7,0xA1,0xF6,0x6D,0xF5,0x73,0xF6,0x6D,0xF8,0xE3,0xF9,0xC0,0xF9,0xC3,0xFB,0x83,0xFD,0x2,0x0,0x83,0x1,0x78,0x2,0x1D,0x5,0xAE,0x5,0x1F,0x7,0x6A,0x8,0xDD,0x7,0xB,
0xA,0x34,0xA,0xE2,0x8,0xBB,0x8,0x47,0x8,0x45,0x7,0x56,0x8,0xD1,0x7,0x6D,0x5,0xC0,0x6,0xDA,0x6,0x68,0x5,0xD3,0x4,0x1,0x4,0xF6,0x4,0x37,0x3,0xE8,0x1,0x9C,
0x1,0xF0,0xFF,0x4,0x0,0x6A,0xFC,0x60,0xFB,0xEF,0xFB,0x29,0xFA,0xCB,0xFA,0xD5,0xF6,0xF8,0xF5,0xC0,0xF7,0x4A,0xF6,0x4E,0xF4,0x8B,0xF2,0xFE,0xF3,0xA6,0xF3,0xCD,0xF0,0xE0,
0xF0,0xB4,0xF5,0xA4,0xF7,0x7A,0xF7,0x3A,0xF9,0xAC,0xFD,0x7F,0x1,0xCE,0x2,0x60,0x2,0x79,0x6,0x0,0xB,0x13,0xA,0xB6,0xA,0xD3,0xA,0x16,0xD,0x32,0xC,0x79,0xA,0x94,
0x9,0x69,0xA,0x1E,0xA,0xC6,0x7,0x39,0x7,0xD,0x7,0x38,0x8,0xFE,0x5,0x1B,0x5,0xB5,0x4,0xA4,0x5,0x7,0x4,0x4C,0x1,0xC7,0x0,0xED,0x2,0xB7,0xFE,0x6C,0xFB,0xC9,
0xFC,0xA2,0xFB,0x64,0xFA,0xDE,0xF6,0x51,0xF6,0x4E,0xF7,0x28,0xF5,0x72,0xF0,0xC3,0xF3,0xAE,0xF1,0x15,0xEF,0x9B,0xEC,0xB9,0xED,0xAD,0xF3,0x8A,0xF3,0xE1,0xF3,0x5D,0xF7,0xFF,
0xFC,0xD9,0xFF,0xB2,0x1,0x92,0x3,0xA2,0x9,0x97,0xB,0xED,0xB,0xE3,0xC,0x54,0xD,0xF2,0xE,0xB1,0xD,0xC6,0xA,0x40,0xB,0x21,0xC,0xBA,0x9,0x19,0x9,0xAC,0x8,0xAB,
0x9,0x4B,0xA,0x61,0x8,0x5A,0x7,0x53,0x7,0x9F,0x7,0x31,0x6,0xB0,0x3,0x46,0x3,0x28,0x2,0xE0,0xFF,0xB6,0xFD,0x39,0xFC,0xEA,0xFB,0x6A,0xF9,0xAF,0xF6,0x4A,0xF5,0x86,
0xF3,0xF0,0xF1,0x43,0xEF,0xDB,0xEC,0x75,0xEA,0xF7,0xE8,0xFF,0xEA,0x9C,0xEC,0x6F,0xEE,0x46,0xF2,0x44,0xF6,0xB8,0xFB,0x36,0x0,0xC2,0x2,0xE2,0x6,0xD8,0xA,0xD8,0xD,0x9A,
0xE,0xEB,0xE,0x3,0xF,0x23,0xF,0x17,0xE,0xBD,0xB,0x41,0xB,0x8F,0xA,0x79,0x9,0xEB,0x7,0xFE,0x8,0x93,0x8,0x9E,0x8,0x3E,0x9,0x1D,0x8,0x9B,0x8,0x14,0x9,0x6B,
0x7,0x14,0x5,0xA5,0x5,0x88,0x3,0x39,0x0,0xE5,0xFE,0xD2,0xFC,0xAF,0xFB,0xD4,0xF8,0x79,0xF5,0x84,0xF5,0xFB,0xF2,0x51,0xEF,0xFF,0xED,0x3,0xEC,0x12,0xE6,0xE8,0xE3,0x87,
0xE9,0x8D,0xEB,0x9F,0xEA,0x1F,0xEE,0x4B,0xF4,0xD7,0xFB,0xBC,0xFF,0xDD,0x0,0xF0,0x7,0x55,0xE,0x18,0xF,0xB8,0xE,0xC0,0x10,0xF1,0x11,0x83,0x10,0x40,0xC,0xDF,0xA,0xA9,
0xB,0xF6,0x7,0xB,0x5,0xC4,0x6,0xC7,0x7,0x49,0x7,0x8E,0x7,0xB0,0x7,0x6A,0xA,0x37,0xA,0xFB,0x7,0xAC,0x8,0xB8,0x8,0xD,0x6,0x4F,0x3,0x36,0x1,0x4B,0x1,0x9D,
0xFE,0x7D,0xF9,0x56,0xF7,0x1E,0xF6,0x9B,0xF3,0xEF,0xEF,0xB5,0xED,0xF2,0xEA,0x46,0xE8,0x36,0xE1,0x1,0xE0,0x7E,0xE8,0xDF,0xE8,0x82,0xE8,0xFF,0xF0,0xEB,0xF8,0xE1,0xFE,0xE7,
0x3,0xAB,0x6,0x28,0xE,0xE3,0x13,0x0,0x13,0xCC,0x13,0x5B,0x15,0x55,0x14,0x61,0x11,0xBC,0xD,0xE9,0xB,0x6D,0xB,0xE,0x7,0x74,0x3,0xC6,0x5,0x67,0x7,0x90,0x6,0xB0,
0x7,0x2E,0xA,0x62,0xC,0xCD,0xC,0x83,0xB,0x5B,0xB,0xF4,0xA,0xD2,0x7,0x34,0x4,0x91,0x1,0x53,0x0,0x7B,0xFD,0xA2,0xF8,0xE2,0xF6,0x29,0xF5,0xBA,0xF2,0xE7,0xEE,0xAB,
0xEA,0x39,0xE8,0x3E,0xE4,0x37,0xDD,0x55,0xDE,0xA8,0xE6,0x72,0xE7,0x52,0xE9,0x35,0xF2,0x9E,0xFB,0xA7,0x2,0x45,0x6,0x4,0xA,0x58,0x12,0xB7,0x15,0xE5,0x12,0x12,0x13,0xAA,
0x13,0x37,0x11,0x22,0xC,0x60,0x8,0xC,0x8,0x6A,0x6,0x6E,0x1,0xD3,0x0,0xCD,0x4,0x90,0x5,0x5C,0x5,0x21,0x9,0xFF,0xC,0xBB,0xD,0x64,0xD,0x7E,0xE,0xBE,0xF,0xE2,
0xC,0x8E,0x7,0x50,0x5,0x86,0x4,0xC4,0xFF,0x0,0xFA,0x23,0xF8,0xE4,0xF5,0x19,0xF2,0xC1,0xEF,0x29,0xEC,0xF6,0xE9,0x88,0xE6,0x6,0xE0,0xD4,0xDB,0xFF,0xDD,0x7C,0xE5,0x81,
0xE7,0x3B,0xEA,0xAC,0xF4,0x3E,0xFE,0x9B,0x4,0xD2,0x8,0xC5,0xC,0xDE,0x13,0xC,0x16,0x3C,0x12,0xE6,0x12,0xAF,0x12,0xF9,0xD,0xF0,0x9,0xE,0x7,0x7E,0x6,0xD2,0x5,0x5C,
0x1,0xA4,0x1,0xE5,0x5,0x73,0x6,0xA2,0x6,0x21,0x9,0x1E,0xD,0x44,0xF,0x18,0xE,0x85,0xD,0x52,0xE,0xF4,0xB,0x4E,0x8,0xFE,0x4,0x2E,0x3,0xAB,0x1,0xF5,0xFC,0x57,
0xF9,0x46,0xF7,0x9E,0xF4,0x45,0xF2,0x33,0xED,0xA9,0xE7,0x83,0xE4,0xA9,0xE0,0xC1,0xDB,0x97,0xD6,0xA7,0xDF,0x54,0xEC,0x58,0xEA,0xF6,0xF0,0x4A,0x1,0xB7,0x8,0x35,0xC,0x1C,
0xF,0xC3,0x12,0xF,0x18,0xBF,0x13,0x2,0xE,0x96,0x10,0x13,0xE,0xDD,0x6,0x8A,0x4,0x78,0x4,0x6C,0x4,0xEF,0x2,0xA9,0x1,0x5E,0x6,0xC2,0xA,0x9D,0xA,0x1A,0xD,0x70,
0x10,0xFD,0x11,0xE8,0x11,0x6,0xF,0xFC,0xD,0x7,0xD,0x9E,0x7,0x6B,0x3,0xD6,0x3,0xEA,0x1,0xB0,0xFD,0xC4,0xFA,0xEB,0xF8,0x39,0xF7,0x6E,0xF3,0x98,0xED,0xF7,0xE8,0x6B,
0xE3,0x34,0xDD,0xBF,0xD8,0x5C,0xD4,0x49,0xE0,0x3A,0xED,0x7A,0xE8,0xE3,0xF2,0xCF,0x5,0xA,0xC,0x25,0xF,0x99,0x10,0x7,0x16,0x2F,0x1B,0x6A,0x11,0xC0,0xA,0x52,0xF,0xE,
0xA,0xDF,0x1,0xD,0x1,0x6,0x2,0x1F,0x3,0x19,0x2,0xA2,0x0,0xCA,0x7,0xA2,0xD,0xD0,0xA,0x1F,0xC,0x28,0x12,0xC6,0x11,0xE7,0xB,0x5A,0xB,0x61,0xC,0xEE,0x7,0x8E,
0x1,0x29,0x1,0xD3,0x2,0xE3,0x0,0x99,0xFD,0x91,0xFE,0x78,0x0,0x88,0xFA,0x5,0xF6,0x6E,0xF4,0x9F,0xEC,0xAC,0xE4,0x46,0xDE,0x86,0xD8,0x61,0xD0,0x37,0xD5,0x4B,0xEA,0x84,
0xE9,0xD0,0xE9,0x6B,0x1,0xB9,0xD,0xB7,0xF,0xF0,0x12,0xA5,0x14,0x8A,0x1B,0xC3,0x16,0x7E,0x9,0x5F,0xC,0xA0,0xA,0xD4,0xFF,0x7C,0xFE,0xBC,0xFE,0xFF,0x0,0x6C,0x3,0x9,
0xFF,0x84,0x6,0x43,0x10,0x54,0xD,0xAD,0xD,0xC4,0x11,0xB0,0x12,0x1A,0x11,0xCC,0xA,0xEE,0x8,0x4F,0xB,0x43,0x4,0x5A,0xFE,0x71,0x1,0x87,0x2,0xFE,0xFF,0x8,0x0,0xC4,
0xFF,0xDD,0xFE,0x39,0xFA,0xBD,0xF4,0x3A,0xF0,0xC9,0xE8,0xBF,0xDF,0x8,0xD9,0xB7,0xD2,0x80,0xD0,0x2,0xE4,0x34,0xED,0xE2,0xE9,0x3F,0xFD,0x9,0xE,0x21,0x11,0x58,0x15,0xFA,
0x14,0xD7,0x18,0x14,0x19,0x51,0xA,0x63,0x8,0x28,0x9,0xA7,0xFF,0xAD,0xFD,0x2A,0xFE,0xC6,0xFE,0xB1,0x3,0xED,0x2,0xF9,0x4,0x17,0x10,0xFE,0x10,0x16,0xE,0xB1,0x12,0x9C,
0x13,0xD4,0xE,0x49,0xB,0x6F,0x8,0xFC,0x7,0x86,0x5,0x80,0xFF,0xC0,0x0,0x99,0x3,0x9B,0x2,0x13,0x4,0x7B,0x6,0x67,0x3,0x97,0x1,0xF8,0xFB,0x18,0xF5,0xB7,0xF0,0x42,
0xE6,0xA6,0xDA,0xE8,0xD7,0xCF,0xD1,0x7C,0xCA,0xC,0xE4,0xCD,0xF0,0x23,0xE9,0xE5,0xFE,0x91,0x12,0x53,0x13,0x2B,0x17,0x65,0x15,0x46,0x16,0x1F,0x18,0x2E,0x7,0xC,0x2,0xAD,
0x5,0x53,0xFC,0x27,0xF9,0x4B,0xFD,0x2B,0x0,0x1A,0x6,0x8B,0x6,0x6E,0x9,0x8,0x14,0x12,0x14,0x7,0x11,0x33,0x12,0x52,0xF,0x15,0xC,0xCA,0x8,0x6E,0x2,0x9A,0x1,0xD6,
0x1,0x1C,0xFE,0x9A,0xFE,0xC7,0x2,0x30,0x5,0x75,0x6,0x32,0x7,0x73,0x6,0x9C,0x6,0xFD,0xFD,0x78,0xF3,0x43,0xF1,0x39,0xE8,0xAC,0xD9,0xD5,0xD5,0x6E,0xD1,0x70,0xC7,0xA1,
0xDD,0xDC,0xF1,0x6A,0xE9,0x1,0xFC,0x27,0x13,0x30,0x14,0x4D,0x19,0xFC,0x16,0x48,0x15,0xCB,0x17,0x21,0x7,0x23,0xFF,0x19,0x2,0x6E,0xF7,0x6C,0xF5,0x2F,0xFD,0xA3,0xFE,0x47,
0x4,0x52,0x8,0x15,0xB,0xBA,0x14,0x9A,0x15,0x45,0x11,0x36,0x13,0xB5,0x11,0x31,0xA,0x86,0x3,0x30,0x1,0x74,0x0,0xEA,0xFC,0xC4,0xFB,0xDD,0xFF,0xBE,0x4,0x92,0x6,0x3,
0x7,0x86,0xC,0xCA,0xE,0xCF,0x6,0x84,0x2,0x46,0xFE,0x7E,0xF4,0xB4,0xEB,0x7,0xE2,0x7,0xD9,0x88,0xD5,0x81,0xCD,0xC,0xCC,0x2,0xEA,0x29,0xF7,0xB4,0xEE,0xE7,0x4,0x83,
0x1A,0xAC,0x19,0xDA,0x16,0x3F,0x13,0x6F,0x15,0x70,0x11,0x4E,0xFF,0xFE,0xFA,0x44,0xFF,0x15,0xF8,0x13,0xF5,0xC,0xFE,0x2D,0x5,0x62,0xA,0x95,0xB,0x94,0xF,0x2A,0x1A,0xD4,
0x17,0x40,0x10,0x1,0x11,0x7D,0xE,0x3,0x6,0xD3,0x1,0x99,0xFF,0x53,0xFE,0xFA,0xFE,0x87,0xFD,0x3E,0x1,0x9D,0x7,0x41,0x8,0x7B,0x9,0x49,0xB,0xD7,0xA,0x67,0x6,0xAD,
0x0,0xE4,0xF8,0x50,0xF0,0x3F,0xEA,0x36,0xE2,0x85,0xDA,0xF3,0xD5,0xB4,0xCE,0xDC,0xCE,0xA5,0xED,0xE9,0xF8,0x91,0xEF,0xC6,0x7,0x2C,0x1A,0x32,0x17,0x87,0x15,0x34,0x11,0xC2,
0x10,0xFC,0xC,0x7B,0xFB,0x97,0xF7,0x46,0xFD,0xF2,0xF6,0x70,0xF6,0x2B,0xFF,0x73,0x6,0x89,0xE,0xAA,0xF,0x55,0xF,0xC7,0x18,0x1C,0x17,0x91,0xB,0xD0,0xB,0x63,0xB,0xFD,
0x2,0x41,0xFC,0x88,0xFB,0x47,0xFF,0x97,0xFF,0x90,0xFD,0xC9,0x2,0x29,0xA,0x49,0xB,0xE8,0xA,0xCA,0xA,0x62,0xD,0x88,0x9,0x3A,0xFE,0x83,0xF8,0x8D,0xF4,0x4D,0xEA,0x2C,
0xE0,0xD3,0xDE,0x1A,0xDC,0x82,0xD6,0xCE,0xCE,0x76,0xDE,0x64,0xFF,0xEE,0xFA,0x7,0xF9,0x1E,0x14,0x70,0x1A,0x34,0x15,0x84,0xF,0x43,0x8,0x9,0xE,0x8E,0x3,0x4C,0xF4,0x18,
0xFA,0x9B,0xFB,0xDD,0xF8,0x1C,0xFE,0xD4,0x4,0xE8,0xD,0xC9,0x11,0x23,0xF,0x55,0x14,0x7B,0x15,0x10,0xF,0xE1,0xB,0x5E,0x7,0x43,0x3,0x1B,0x2,0x91,0xFD,0x6E,0xFE,0x3B,
0x3,0xA5,0x1,0x21,0x3,0x72,0x8,0x4,0x9,0xA3,0xC,0x9F,0xC,0x8A,0x5,0xA1,0x8,0x8F,0x8,0x51,0xFB,0xBA,0xF5,0xF6,0xF3,0x13,0xEB,0x24,0xE5,0x7A,0xE1,0xDD,0xDD,0xE0,
0xDC,0x7F,0xD4,0xC5,0xDB,0x11,0xFD,0xE4,0xFD,0x69,0xF6,0xC6,0xE,0x99,0x19,0x95,0x13,0x3B,0xE,0x67,0x7,0x77,0xA,0xB7,0x5,0xAC,0xF3,0xA0,0xF7,0xD3,0xFF,0xDB,0xFA,0x54,
0xFD,0x39,0x5,0xB4,0xE,0x10,0x15,0x15,0xE,0x47,0x10,0x4F,0x1B,0x3D,0x11,0x1A,0x6,0xDE,0x8,0xB1,0x6,0x29,0x1,0xE4,0xFF,0x2D,0xFF,0x83,0x2,0xF6,0x6,0x79,0x6,0xDF,
0x7,0xE5,0xA,0xD5,0xA,0x97,0xA,0xEA,0x9,0xE3,0x3,0x35,0x2,0xD5,0x0,0xD6,0xF6,0x7F,0xF2,0x6E,0xF0,0xC5,0xE9,0x1E,0xE7,0x3D,0xE5,0x63,0xE0,0x1D,0xDF,0x4B,0xD7,0xCF,
0xE2,0x17,0x2,0x94,0xFC,0x9B,0xF8,0x4C,0x10,0xE9,0x14,0x3B,0xE,0xBD,0x9,0x14,0x3,0xBD,0x6,0x34,0x1,0xCA,0xF2,0x63,0xF9,0x78,0x0,0xC4,0xFB,0x58,0xFF,0x68,0x8,0x82,
0x10,0xB1,0x12,0xFE,0xB,0xC2,0xF,0x7E,0x16,0x7F,0xC,0xD6,0x4,0x24,0x6,0xA5,0x3,0x4,0x2,0x55,0xFF,0x75,0xFD,0xC6,0x5,0x61,0x9,0xCD,0x4,0x9A,0x7,0xF1,0xA,0xC,
0xA,0x29,0x6,0x3F,0x2,0xCE,0x5,0x38,0x4,0x26,0xFB,0x92,0xF9,0xB,0xFB,0x56,0xF6,0x9C,0xEF,0x78,0xED,0x46,0xEE,0x3E,0xEA,0xE9,0xE2,0xBA,0xE1,0x3F,0xE0,0x1A,0xE1,0xDD,
0xF4,0xDF,0xFD,0xDD,0xF9,0xA5,0x7,0x3C,0x12,0x82,0xF,0x91,0xC,0xC5,0x5,0xB4,0x3,0x10,0x6,0x86,0xFB,0xD7,0xF6,0xD7,0xFD,0x86,0xFD,0xB6,0xFE,0x9,0x5,0x41,0x8,0xCB,
0xF,0x24,0x11,0x2D,0xB,0x41,0x11,0x14,0x11,0xC8,0x6,0xBA,0x3,0xF1,0x3,0x89,0x4,0x74,0x3,0x29,0xFF,0x31,0x1,0x8F,0x9,0xCC,0x9,0x6C,0x6,0x85,0x9,0xD1,0xB,0x54,
0xA,0xFC,0x5,0x4B,0x4,0xDD,0x6,0x77,0x1,0xEB,0xF9,0xB2,0xFA,0xF2,0xF8,0x0,0xF3,0xAA,0xF0,0xBE,0xEF,0x97,0xEC,0x79,0xE9,0xC6,0xE6,0xAF,0xE3,0xC0,0xDD,0x32,0xE1,0x8,
0xF9,0xEB,0x0,0x48,0xFA,0x76,0x5,0x8C,0x11,0x36,0x12,0xCD,0xA,0x52,0x1,0x4D,0x4,0x78,0x5,0xD3,0xF8,0x4C,0xF6,0x93,0xFD,0x25,0x1,0xF4,0x2,0x34,0x5,0x67,0xC,0x53,
0x14,0x85,0x11,0xEE,0xB,0x1,0xF,0x26,0x10,0xF6,0x7,0xB3,0x1,0x7B,0x4,0x41,0x6,0x81,0x3,0xDA,0x3,0xAB,0x7,0x2D,0xA,0xEF,0x8,0x41,0x8,0x21,0xA,0xA7,0xA,0x1E,
0x7,0x2F,0x3,0x87,0x3,0x97,0x3,0x81,0xFF,0x94,0xFB,0x75,0xFC,0xA2,0xFB,0x8,0xF7,0x17,0xF4,0x74,0xF1,0xB1,0xF0,0xB2,0xEF,0x74,0xE9,0xE6,0xE3,0x4C,0xE1,0xE3,0xDA,0x57,
0xE2,0x75,0xF8,0xA6,0xFA,0x7,0xFA,0x31,0x9,0x95,0x10,0xDD,0xE,0xF5,0x9,0xC1,0x2,0x9C,0x3,0xEF,0x2,0x9C,0xF8,0x20,0xF7,0x8E,0xFD,0x7,0x0,0xF4,0x2,0x41,0x7,0x69,
0xC,0x76,0x13,0xEF,0x11,0x83,0xB,0x53,0xD,0x69,0xC,0xF5,0x5,0xBD,0x2,0xC9,0xFF,0xCD,0x1,0xE6,0x5,0x58,0x3,0x14,0x4,0x9B,0x9,0x88,0xA,0xAE,0x9,0x51,0x9,0x0,
0x8,0x87,0x8,0x94,0x5,0x76,0xFF,0x86,0x1,0x59,0x4,0x7,0xFE,0x7A,0xFA,0x22,0xFD,0xE2,0xFC,0x20,0xF9,0xB5,0xF3,0x55,0xF2,0x17,0xF5,0xE2,0xEF,0x14,0xE8,0x21,0xE6,0xAD,
0xE3,0xF,0xDB,0xCB,0xDD,0xA,0xF6,0x75,0xFE,0xCE,0xF8,0xCE,0x3,0x8E,0x10,0x8F,0x13,0xA9,0xD,0x22,0x1,0x56,0x2,0xF6,0x7,0x31,0xFC,0x2B,0xF4,0x56,0xFB,0x13,0x2,0x67,
0x3,0xCB,0x4,0xEE,0xA,0x7A,0x14,0x25,0x14,0x60,0xC,0xAC,0xE,0x8,0x12,0xEF,0x9,0x10,0x3,0x85,0x2,0x50,0x3,0x38,0x4,0x61,0x1,0xAD,0x2,0xED,0x8,0x79,0xA,0x19,
0x9,0x8C,0x9,0x61,0xB,0x11,0xB,0x95,0x6,0x3B,0x2,0xE1,0x3,0x84,0x4,0xEA,0xFE,0x6C,0xFB,0xB1,0xFB,0xBD,0xFA,0x32,0xF8,0xE7,0xF4,0x8,0xF4,0xE4,0xF3,0x30,0xF2,0x28,
0xEF,0x3B,0xEC,0x6C,0xE8,0x4A,0xE3,0xEB,0xDE,0xEB,0xE5,0xED,0xF7,0x3C,0xFB,0x25,0xFB,0x1C,0x7,0x23,0x10,0x90,0xF,0xEC,0x9,0x98,0x4,0x3C,0x6,0x76,0x6,0x10,0xFC,0xF9,
0xF9,0x7E,0x0,0x91,0x0,0xEA,0x0,0x66,0x5,0x6,0x9,0x32,0xE,0x59,0xE,0x53,0xB,0x3C,0xE,0xA,0xE,0x63,0x8,0x1C,0x4,0x67,0x3,0xB3,0x4,0x79,0x3,0x5F,0xFF,0x4,
0x2,0xB7,0x8,0x99,0x7,0xC0,0x4,0x4C,0x7,0x82,0x9,0xD1,0x8,0xD0,0x6,0x82,0x4,0x7B,0x4,0x7B,0x3,0x8F,0xFD,0x3B,0xFA,0xF2,0xFA,0x1,0xF8,0xA8,0xF3,0x13,0xF3,0x35,
0xF5,0x70,0xF5,0xAB,0xF1,0x69,0xEC,0xF1,0xEB,0xDD,0xEA,0xC,0xE4,0x53,0xDF,0x3,0xE9,0xC7,0xF9,0x90,0xF9,0x51,0xF9,0x34,0x5,0x71,0xC,0x3D,0xC,0xA1,0x7,0x91,0x3,0xBB,
0x6,0xB7,0x6,0xAE,0xFD,0x14,0xFD,0x6,0x3,0x31,0x4,0x7E,0x3,0x34,0x5,0x2B,0xA,0x22,0xE,0x44,0xC,0xB,0xA,0x9F,0xC,0xE3,0xC,0x8F,0x8,0xD7,0x5,0xF2,0x5,0x30,
0x6,0x3B,0x5,0xB6,0x2,0xFF,0x3,0x5,0x8,0x98,0x7,0xDF,0x5,0x8C,0x7,0xE4,0x9,0xE9,0xA,0xBE,0x8,0xAA,0x4,0xD2,0x5,0xB7,0x4,0x39,0xFE,0xD9,0xFA,0xAE,0xF9,0x35,
0xF8,0xDC,0xF6,0x4E,0xF4,0xEC,0xF3,0xD4,0xF5,0xCB,0xF2,0x50,0xF0,0x72,0xF0,0x32,0xEC,0x3D,0xE7,0x4E,0xE6,0x44,0xE5,0xBA,0xEB,0x2C,0xF6,0x6C,0xF7,0xFD,0xFC,0xD5,0x6,0x6A,
0x9,0x53,0xA,0x7,0xA,0xDD,0x6,0xC1,0x7,0xAA,0x6,0xBD,0x1,0x98,0x2,0x83,0x4,0x82,0x4,0xE6,0x5,0x52,0x7,0x7B,0x9,0xE5,0xC,0xA8,0xC,0x6D,0xB,0x93,0xC,0xB7,
0xB,0x3A,0x9,0xCF,0x7,0x87,0x6,0x35,0x5,0x3C,0x5,0xED,0x4,0xC3,0x4,0x81,0x6,0x3E,0x7,0xB5,0x6,0xAD,0x7,0x40,0x8,0xEE,0x6,0x33,0x5,0x1C,0x3,0x3B,0x1,0xD,
0xFF,0x3,0xFB,0x4F,0xF8,0xBF,0xF7,0x10,0xF6,0x3A,0xF4,0x2F,0xF3,0x5D,0xF2,0x69,0xF2,0xC5,0xF1,0xD0,0xEE,0x4D,0xED,0x1,0xEC,0xB2,0xEA,0x14,0xEC,0x95,0xEC,0xA7,0xF0,0xAF,
0xF7,0xBF,0xFA,0x90,0xFE,0x7A,0x3,0xB4,0x5,0x66,0x7,0xC1,0x7,0x39,0x6,0xF,0x6,0x6B,0x6,0xDD,0x5,0x9,0x6,0x6A,0x6,0xFC,0x6,0xFF,0x7,0xBA,0x8,0x8F,0x9,0xE3,
0x9,0x6E,0xA,0xD3,0xA,0x61,0xA,0x7B,0x9,0xB,0x9,0xEB,0x8,0x72,0x7,0x9C,0x6,0x33,0x6,0xB5,0x5,0x40,0x6,0xEB,0x5,0x26,0x5,0xC5,0x5,0x17,0x5,0x30,0x4,0xFF,
0x3,0x8E,0x1,0x32,0x0,0x97,0xFF,0x2E,0xFD,0x7F,0xFB,0xC8,0xF9,0x20,0xF7,0xBC,0xF6,0xBB,0xF5,0x63,0xF3,0x12,0xF4,0x38,0xF4,0xC,0xF4,0x19,0xF4,0x41,0xF2,0xB2,0xF1,0x7,
0xF2,0xFB,0xF0,0xF2,0xF0,0x69,0xF2,0xE,0xF3,0xF1,0xF5,0xEE,0xF9,0x1F,0xFC,0x37,0xFF,0x8B,0x1,0xB9,0x2,0x17,0x5,0xA2,0x6,0xD3,0x5,0x4A,0x6,0xB0,0x7,0xD9,0x7,0x6F,
0x8,0x6A,0x8,0x58,0x8,0x5D,0x9,0x5D,0x9,0xA,0x9,0x17,0xA,0x44,0xA,0x3A,0xA,0x4F,0xB,0xE9,0xA,0x34,0xA,0x0,0xA,0x9F,0x8,0x94,0x7,0x7F,0x7,0x49,0x6,0x14,
0x5,0xA4,0x4,0xD3,0x3,0x82,0x3,0x35,0x2,0xFB,0x0,0xC1,0x0,0x5E,0xFF,0x15,0xFD,0x74,0xFB,0x42,0xFA,0x6E,0xF8,0x71,0xF7,0x27,0xF6,0x5D,0xF5,0x8B,0xF6,0xAA,0xF6,0xE9,
0xF5,0x1C,0xF7,0x4E,0xF8,0x6A,0xF8,0x7B,0xF8,0x55,0xF8,0x45,0xF8,0xBD,0xF8,0x11,0xF9,0xC1,0xF7,0xB6,0xF7,0x5A,0xF9,0xB9,0xFA,0x89,0xFB,0x96,0xFB,0xB4,0xFC,0x89,0xFF,0xF7,
0x0,0xA,0x1,0xC7,0x2,0xF6,0x4,0xE1,0x5,0x5B,0x6,0x6F,0x6,0x45,0x7,0x6F,0x8,0xA1,0x7,0x34,0x7,0xF,0x8,0xEE,0x8,0xCB,0x8,0x8F,0x8,0x39,0x9,0x87,0x9,0xF5,
0x8,0xAA,0x7,0x9D,0x6,0x39,0x6,0xCA,0x4,0x16,0x3,0x78,0x2,0x3,0x2,0x87,0x1,0xB9,0x0,0xB,0x0,0x16,0x0,0x8,0x0,0x79,0xFE,0xA1,0xFD,0x94,0xFD,0xCD,0xFC,0x77,
0xFB,0xE1,0xF9,0xE5,0xF9,0x5E,0xFA,0x41,0xF9,0x6C,0xF8,0x3B,0xF9,0x27,0xFA,0xDC,0xF9,0xFC,0xF8,0x23,0xF9,0xB5,0xF9,0x65,0xFA,0x26,0xFA,0xD4,0xF9,0xDF,0xFA,0xB8,0xFB,0x7C,
0xFB,0x80,0xFB,0xEF,0xFB,0x91,0xFC,0x4B,0xFD,0x2,0xFD,0xF4,0xFD,0x45,0xFF,0x33,0xFF,0xD7,0xFF,0x31,0x1,0x2A,0x1,0x9E,0x1,0x1A,0x2,0xA4,0x1,0x86,0x2,0xB2,0x3,0x18,
0x3,0x83,0x3,0x85,0x5,0xFB,0x4,0xBA,0x4,0x2B,0x5,0xD4,0x4,0xD0,0x4,0x77,0x4,0x66,0x4,0xC7,0x4,0xA2,0x4,0x31,0x4,0xD6,0x3,0xF,0x4,0x2C,0x4,0x54,0x3,0xE5,
0x2,0x4C,0x3,0x54,0x3,0x56,0x2,0xA7,0x1,0x4B,0x1,0x79,0x1,0xA2,0x0,0xB5,0xFF,0x2,0x0,0x7E,0xFF,0x0,0xFF,0xA1,0xFE,0x81,0xFE,0xE0,0xFE,0xD6,0xFE,0xAF,0xFD,0x5,
0xFE,0x4F,0xFE,0x53,0xFD,0xBA,0xFD,0x59,0xFD,0x35,0xFD,0xE4,0xFD,0x94,0xFC,0x4F,0xFD,0x53,0xFE,0x15,0xFD,0xF8,0xFD,0x7,0xFE,0x52,0xFE,0x8E,0xFE,0x77,0xFD,0xBE,0xFE,0x30,
0xFF,0xD0,0xFE,0x8A,0xFF,0xE1,0xFE,0xFC,0xFE,0x9B,0xFF,0xF0,0xFE,0x5B,0xFF,0x76,0x0,0x25,0x0,0xC,0x0,0x9,0x1,0x89,0x0,0xE5,0x0,0x51,0x1,0xE2,0x0,0x71,0x1,0x26,
0x1,0x19,0x1,0xEF,0x0,0x13,0x1,0xFE,0x0,0xA0,0x1,0xC2,0x1,0x1A,0x1,0xE7,0x1,0x9E,0x1,0xB,0x2,0xB3,0x1,0x48,0x1,0xE7,0x0,0xBC,0x0,0xCA,0x0,0x21,0x1,0x6D,
0x0,0x56,0x0,0x62,0x1,0x98,0x0,0x6D,0x0,0xF4,0xFF,0xCD,0x0,0xCB,0x0,0x60,0x0,0x85,0x0,0xB0,0x0,0x4,0x0,0xB,0xFF,0xDE,0xFE,0x54,0xFF,0x99,0xFF,0x5B,0xFE,0xD5,
0xFE,0x30,0xFF,0xDF,0xFE,0xBF,0xFE,0x81,0xFE,0xEC,0xFE,0x88,0xFE,0xEA,0xFD,0x5E,0xFE,0x70,0xFE,0x33,0xFE,0x6D,0xFE,0x55,0xFE,0x16,0xFE,0x2E,0xFF,0x95,0xFE,0x8F,0xFD,0xD9,
0xFE,0xD4,0xFE,0xAF,0xFE,0x8A,0xFE,0x72,0xFE,0x96,0xFF,0x9E,0xFE,0x4E,0xFE,0x9F,0xFF,0x19,0xFF,0x97,0xFF,0x4E,0xFF,0x19,0x0,0xA5,0x0,0xE7,0xFF,0xD9,0xFF,0x9C,0xFF,0xA4,
0x0,0x94,0xFF,0x2,0x0,0x3A,0x0,0x40,0x0,0x7,0x1,0x2C,0x0,0xA1,0x0,0x64,0x1,0x4F,0x1,0xCD,0x0,0xB7,0x0,0x11,0x1,0xF8,0x0,0xC6,0x0,0x8C,0x0,0xD0,0x0,0xA4,
0x1,0x1E,0x1,0xA2,0x0,0xC7,0x0,0x8,0x1,0x47,0x0,0xDF,0x0,0xCD,0x0,0xD2,0x0,0xEF,0x1,0x17,0x1,0xBE,0x0,0x9F,0x0,0xD9,0x0,0x3E,0x0,0xA2,0x0,0x7B,0x0,0xB9,
0x0,0x66,0x0,0x2C,0x0,0x76,0x0,0x13,0x0,0x53,0x1,0x4C,0x0,0x33,0x0,0x75,0x0,0xED,0x0,0xBA,0x0,0xE2,0xFF,0x7,0x0,0xC5,0x0,0x4F,0x0,0x8D,0xFF,0xFD,0xFF,0xAC,
0x0,0xC8,0x0,0x9F,0xFF,0xC5,0xFF,0x84,0x0,0xE4,0x0,0x76,0xFF,0xE4,0xFF,0x4C,0x0,0xA4,0x0,0xA2,0xFF,0x41,0xFF,0x46,0x0,0xFF,0xFF,0x8D,0xFF,0x36,0xFF,0x6F,0xFF,0x7F,
0xFF,0x2C,0x0,0xD1,0xFE,0x3D,0x0,0x55,0x0,0x26,0xFF,0x49,0xFF,0x3D,0xFF,0x4F,0xFF,0xF6,0xFF,0xE7,0xFF,0xEE,0xFE,0x97,0xFF,0xD0,0xFF,0x92,0xFF,0x54,0xFE,0x3E,0xFF,0x97,
0xFF,0x65,0xFF,0x75,0xFF,0xDB,0xFE,0xAC,0xFF,0xF9,0xFF,0xD8,0xFE,0xA9,0xFE,0xDA,0xFF,0xC1,0xFF,0x49,0xFF,0xD0,0xFF,0xDF,0xFF,0x53,0xFF,0x72,0xFF,0x81,0xFF,0xB2,0xFF,0x27,
0x0,0xD,0x0,0xD8,0xFF,0x3F,0x0,0x60,0x0,0xD7,0xFF,0xED,0xFF,0xE4,0xFF,0x58,0x0,0xC0,0x0,0xED,0xFF,0x1D,0x0,0x3D,0x0,0x31,0x0,0x42,0x0,0xDE,0xFF,0xB1,0xFF,0x3B,
0x0,0x36,0x0,0xF6,0xFF,0x26,0x0,0x5C,0x0,0x2C,0x0,0xDA,0xFF,0x0,0x0,0x43,0x0,0x52,0x0,0xAF,0xFF,0x99,0x0,0xB7,0x0,0x60,0x0,0x79,0x0,0xD9,0xFF,0xCF,0xFF,0x2F,
0x0,0x58,0x0,0x93,0x0,0x67,0x0,0x2D,0x0,0xE5,0xFF,0x4D,0x0,0x81,0x0,0xDB,0xFF,0x18,0x0,0x4,0x0,0x1,0x1,0x7C,0x0,0x10,0x0,0x90,0x0,0x18,0x1,0x9A,0x0,0xC9,
0xFF,0x52,0x0,0x18,0x1,0xD2,0x0,0x58,0xFF,0x54,0x0,0xCC,0x0,0x7E,0x0,0x45,0x0,0xE9,0xFF,0xF4,0xFF,0xE8,0x0,0xB2,0x0,0x50,0x0,0xA9,0x1,0x97,0x0,0x37,0x0,0xC5,
0x0,0x4,0x0,0x6D,0x1,0x47,0x0,0xF5,0xFF,0x50,0x0,0xDA,0xFF,0xC9,0x0,0xFB,0xFF,0x7,0x0,0xC6,0xFF,0x9B,0x0,0xEE,0xFF,0xF5,0xFF,0x91,0xFF,0xFF,0xFF,0xC1,0xFF,0x58,
0xFF,0xC2,0x0,0x2A,0xFF,0x77,0x0,0xFC,0xFF,0x23,0xFF,0xC9,0xFF,0x19,0x0,0xCF,0xFF,0xA2,0xFF,0x1A,0x0,0xA,0x0,0x73,0xFF,0xA8,0xFF,0x1,0x0,0xFB,0xFF,0x24,0x0,0x5B,
0xFF,0x39,0x0,0x85,0xFF,0xE2,0xFF,0xC,0x0,0xB4,0x0,0xD3,0xFF,0x35,0xFF,0x11,0x1,0xB1,0xFF,0x26,0x0,0x24,0x0,0x9A,0x0,0x3C,0x0,0xC6,0xFF,0xE8,0xFF,0xA7,0x0,0xE9,
0xFF,0x52,0xFF,0xED,0x0,0x11,0x0,0x1E,0x0,0x3B,0xFF,0x74,0xFF,0x2A,0x0,0x47,0x0,0x5B,0xFF,0xE3,0xFF,0x2,0x0,0xF3,0xFE,0x95,0x0,0xC4,0xFF,0x90,0xFF,0x6F,0x0,0xD6,
0xFF,0x96,0xFF,0x99,0xFF,0x7D,0xFF,0xF3,0xFF,0xE6,0xFE,0x56,0xFF,0x6A,0x0,0x13,0xFF,0x63,0xFF,0x13,0xFF,0x2F,0xFF,0x21,0x0,0x10,0xFF,0x64,0xFF,0xD1,0xFF,0x7F,0xFF,0x30,
0x0,0xD7,0xFE,0x7F,0xFE,0x12,0x0,0x22,0xFF,0x95,0xFF,0xA7,0xFF,0x30,0xFF,0x52,0x0,0x82,0xFE,0x94,0xFF,0x80,0x0,0x46,0xFF,0x45,0x0,0x65,0xFF,0x2B,0x0,0xB3,0xFF,0x8D,
0xFF,0x2C,0x0,0xD8,0xFF,0x44,0x0,0xB6,0xFF,0xE0,0xFF,0xCF,0xFF,0x85,0x0,0x5B,0xFF,0xE,0x0,0x5,0x0,0xC3,0xFF,0x5C,0x0,0x9B,0xFF,0x9B,0x0,0xAD,0x0,0x9C,0xFF,0xA,
0x0,0xA,0x1,0x74,0xFF,0xED,0xFF,0x95,0x0,0x20,0x0,0xBB,0x0,0xC,0x0,0x1,0x0,0x97,0x0,0x95,0x0,0xF8,0x0,0x3E,0x0,0x82,0x0,0xC0,0x0,0x5F,0x0,0x69,0x0,0x4,
0x1,0xE2,0x0,0xC3,0x0,0xE0,0x0,0xA1,0x0,0x16,0x1,0x41,0x0,0xD2,0x0,0x63,0x1,0x51,0x0,0x8C,0x1,0x76,0x1,0x42,0x0,0xF,0x1,0x25,0x0,0x5,0x1,0x8B,0x0,0x5B,
0x0,0x29,0x1,0x5E,0x0,0x3A,0x0,0x89,0x0,0x1B,0x1,0x81,0x0,0x4F,0x0,0xF9,0x0,0x67,0x0,0xF4,0xFF,0xC5,0x0,0x8C,0xFF,0xED,0xFF,0x1E,0x0,0xB5,0xFF,0x57,0xFF,0x57,
0x0,0xE7,0x0,0x36,0xFF,0xB7,0xFF,0xE7,0x0,0xAF,0xFF,0xAA,0xFF,0xE8,0xFF,0xA7,0xFF,0x3E,0x0,0x12,0xFF,0xD0,0xFF,0x7E,0xFF,0x76,0xFF,0x76,0xFF,0xC1,0xFF,0x6A,0xFF,0x85,
0xFF,0xD8,0xFF,0x3A,0xFF,0xB7,0xFF,0xE2,0xFF,0x55,0xFF,0x50,0xFF,0x1F,0x0,0xCE,0xFE,0xD3,0xFF,0x35,0xFF,0xCD,0xFF,0x74,0xFF,0x34,0xFF,0x9E,0xFF,0x70,0xFE,0xCA,0xFF,0x45,
0xFF,0x8,0x0,0x90,0xFF,0x42,0xFF,0x2C,0xFF,0x1F,0x0,0xA8,0xFF,0x2C,0xFF,0xE4,0xFF,0x70,0xFF,0xA9,0xFF,0x6A,0xFF,0xFE,0xFF,0x73,0xFF,0x26,0x0,0x7E,0xFF,0x7,0xFF,0x32,
0x0,0x42,0xFF,0x75,0xFF,0x10,0x0,0x25,0xFF,0x95,0xFF,0x19,0xFF,0x3B,0x0,0xFB,0xFF,0x55,0xFF,0xD9,0x0,0x37,0x0,0xE7,0xFF,0x1F,0x0,0x21,0x0,0x95,0xFF,0xE,0x0,0xCE,
0xFF,0x19,0x0,0xC5,0xFF,0x87,0xFF,0x49,0x0,0x6A,0x0,0xAD,0xFF,0xE3,0xFF,0x52,0x0,0x49,0x0,0x91,0x0,0x84,0x0,0x82,0x0,0x75,0x0,0x3B,0x0,0xFD,0xFF,0xF7,0xFF,0xDC,
0xFF,0xC0,0x0,0x11,0x0,0xA2,0x0,0xEA,0xFF,0xFE,0xFF,0x38,0x1,0xEB,0xFF,0x47,0x0,0x51,0x0,0xDB,0xFF,0x7,0x0,0xD2,0xFF,0xB3,0x0,0x49,0x0,0x21,0x0,0xD2,0x0,0x4,
0x0,0x26,0x0,0x14,0x0,0xF8,0xFF,0x7E,0x0,0x5A,0x1,0x3C,0xFF,0x8F,0x0,0xB9,0x0,0x2A,0xFF,0x32,0x0,0x13,0x0,0x5D,0x0,0x59,0x0,0x9B,0x0,0x40,0x0,0x43,0x0,0x8,
0x0,0xA8,0x0,0x2A,0x0,0x2C,0x0,0x4,0x1,0x31,0x0,0x92,0xFF,0x28,0x0,0x50,0x0,0xC7,0xFF,0xFC,0xFF,0xC6,0xFF,0xE6,0xFF,0x7C,0x0,0xFB,0xFF,0x2D,0x0,0x53,0x0,0xC8,
0xFF,0x8B,0x0,0x11,0x0,0xF5,0xFF,0x16,0x0,0xDC,0xFF,0x8A,0xFF,0xB7,0xFF,0x4B,0x0,0x64,0xFF,0x48,0xFF,0x6F,0x0,0xC8,0xFF,0x82,0xFF,0xB9,0x0,0x71,0xFF,0xB8,0x0,0x1A,
0x0,0x35,0xFF,0x24,0x0,0xE1,0xFE,0xD0,0xFF,0x6A,0xFF,0xE0,0xFE,0xD0,0xFF,0x60,0xFF,0xCD,0xFF,0x4B,0x0,0xB9,0xFF,0x3B,0x0,0x45,0xFF,0x5B,0xFF,0x8E,0xFF,0xF1,0xFF,0x38,
0xFF,0xE6,0xFE,0xB9,0xFF,0x3C,0xFF,0x8D,0xFF,0x48,0xFF,0xB4,0xFF,0x8E,0xFF,0x54,0xFF,0xC,0x0,0xA3,0xFF,0x6E,0xFF,0x73,0xFF,0x10,0xFF,0x1F,0x0,0x3E,0xFF,0x53,0xFF,0x72,
0xFF,0xB,0xFF,0x94,0xFF,0xC3,0xFF,0x5F,0xFF,0xDC,0xFF,0xB8,0xFF,0xAF,0xFF,0x88,0x0,0x72,0xFF,0x95,0xFF,0x78,0xFF,0xEB,0xFF,0xDB,0xFF,0x0,0x0,0x66,0xFF,0xD9,0xFF,0xF9,
0xFE,0xF3,0xFF,0xD7,0x0,0x76,0xFE,0x60,0x0,0x3,0x0,0xC6,0xFF,0x80,0x0,0x4E,0xFF,0xEA,0xFF,0xF8,0x0,0xA8,0xFF,0x3A,0x0,0x94,0x0,0x2D,0x0,0xC0,0x0,0xDB,0xFF,0x25,
0x0,0xAD,0x0,0x43,0xFF,0xCB,0x0,0x4A,0x0,0x11,0x0,0xAC,0x1,0xA0,0xFF,0x19,0x1,0x8B,0x0,0x79,0x0,0x9F,0x0,0xD6,0xFF,0x13,0x1,0x62,0x1,0xE,0x0,0xFD,0x0,0x0,
0x1,0x85,0xFF,0x12,0x1,0x26,0x0,0xDD,0x0,0xD0,0x0,0x4D,0x0,0x9A,0x0,0xD4,0x0,0x88,0x0,0x2B,0x1,0x92,0x0,0x0,0x0,0x90,0x0,0x96,0x0,0x12,0x0,0x40,0x0,0xFD,
0x0,0xF8,0xFE,0xB5,0x0,0x45,0x0,0xB8,0x0,0xA8,0x0,0x5F,0x0,0x71,0x0,0x5E,0xFF,0xDC,0x0,0x50,0x0,0x9F,0xFF,0xDC,0xFF,0x2D,0x0,0xF,0xFF,0x7,0x0,0x4F,0x0,0x85,
0xFF,0x0,0x0,0x40,0xFF,0xFA,0xFF,0xAE,0x0,0x27,0xFF,0xD1,0xFF,0x9C,0xFF,0x18,0xFF,0x15,0x0,0x16,0xFF,0xF7,0xFF,0xFA,0xFF,0x0,0xFF,0x7A,0xFF,0xD3,0xFF,0x94,0xFF,0xC7,
0xFF,0x31,0xFF,0xF1,0xFF,0x4,0x0,0x97,0xFE,0x68,0x0,0xB9,0xFE,0xE3,0xFF,0x16,0x0,0x7C,0xFE,0xA1,0x0,0xFE,0xFE,0xEA,0xFE,0xE0,0xFF,0x7D,0xFF,0xF3,0xFF,0x63,0xFF,0x86,
0xFF,0xAC,0xFF,0x5C,0xFF,0xF2,0xFF,0xEB,0xFE,0xE,0x0,0xF8,0xFF,0x5A,0xFF,0x64,0xFF,0xD9,0xFF,0xC6,0x0,0x7F,0xFF,0xE0,0xFF,0xAD,0xFF,0xB2,0xFF,0x65,0xFF,0x30,0x0,0xB9,
0xFF,0x7F,0xFF,0xDE,0xFF,0x8B,0xFF,0xF7,0xFF,0x17,0x0,0x8C,0x0,0x2,0x0,0x2C,0x0,0x96,0xFF,0x95,0x0,0x1B,0x0,0x11,0x0,0xFD,0x0,0xDE,0xFF,0x23,0x0,0x3F,0x0,0x4F,
0x0,0xCF,0x0,0x3D,0x0,0x74,0x0,0x4F,0x0,0xA1,0xFF,0x9C,0x0,0xDD,0x0,0xEC,0xFF,0x21,0x0,0xC9,0x0,0x1A,0x0,0x5A,0x0,0x4F,0x0,0x2F,0x0,0x85,0x0,0x8A,0x0,0xB8,
0xFF,0xC9,0x0,0x17,0x0,0x9,0x0,0x86,0x0,0x6F,0x0,0xB7,0x0,0x5D,0xFF,0xD3,0x0,0x90,0x0,0x39,0x0,0xE3,0xFF,0x75,0x0,0x68,0x0,0x29,0x0,0x9,0x0,0x71,0x0,0x5A,
0x0,0xBB,0xFF,0x92,0x0,0x55,0x0,0x31,0x0,0x1C,0x0,0x3B,0x0,0xD,0x0,0xE5,0x0,0xAA,0xFF,0x77,0x0,0xD8,0x0,0xD0,0xFF,0x33,0x0,0xBE,0xFF,0x89,0xFF,0x34,0x0,0x31,
0x0,0x3F,0xFF,0x35,0x0,0xF2,0x0,0x3A,0x0,0xB9,0xFF,0xAF,0x0,0xC0,0xFF,0x38,0x0,0x3D,0x0,0xF,0x0,0x44,0x0,0x3D,0xFF,0x32,0x0,0xFB,0xFF,0x8D,0xFF,0xBE,0xFF,0xF2,
0x0,0x73,0xFF,0x20,0x0,0xA9,0xFF,0x24,0x0,0xFA,0x0,0xFC,0xFE,0x10,0x0,0xE0,0xFF,0x75,0x0,0x24,0xFF,0xA1,0xFF,0x5D,0xFF,0x70,0xFF,0x69,0xFF,0xE4,0xFF,0x2A,0x0,0x20,
0xFF,0xF9,0xFF,0x4E,0xFF,0xBA,0x0,0xD7,0xFF,0xB0,0xFE,0xB9,0xFF,0xDD,0xFF,0x72,0xFF,0xF4,0xFF,0xC8,0xFF,0x45,0xFF,0x5,0x0,0xD2,0xFF,0x55,0xFF,0x8F,0xFF,0xCD,0xFF,0x20,
0x0,0xA7,0xFF,0xA4,0xFF,0xCA,0x0,0x5,0x0,0x4D,0xFF,0xF4,0xFF,0x22,0xFF,0xE5,0xFF,0x9D,0x0,0xA9,0xFE,0x48,0xFF,0x31,0x0,0xD,0x0,0x13,0x0,0xAD,0xFF,0xB8,0xFF,0x72,
0x0,0x7F,0xFF,0xC3,0xFF,0x64,0x0,0x77,0xFF,0xEF,0xFF,0x5F,0xFF,0xFB,0xFF,0x30,0x0,0x32,0xFF,0x7D,0xFF,0x10,0x0,0x24,0x0,0xCA,0xFF,0xA6,0xFF,0x32,0x0,0x7C,0xFF,0xFC,
0xFF,0xCE,0xFF,0x71,0xFF,0x81,0x0,0x8B,0xFF,0xA,0x0,0x6E,0xFF,0x5F,0x0,0x7C,0x0,0x0,0x0,0xA6,0xFF,0x11,0x0,0xB5,0x0,0x6A,0xFF,0x53,0x0,0x22,0x0,0xD3,0xFF,0x36,
0x0,0x60,0x0,0x3B,0x0,0xD7,0xFF,0x14,0x0,0xAF,0x0,0x8C,0x0,0xF3,0xFF,0xA5,0xFF,0x2E,0x1,0xB4,0x0,0xC2,0x0,0xDE,0xFF,0x34,0x0,0xDF,0x0,0x6E,0x0,0xC4,0x0,0xCD,
0xFF,0xBF,0x0,0x36,0x0,0x72,0x1,0xEA,0xFF,0x91,0xFF,0xE,0x1,0x42,0x1,0x1C,0x0,0x9B,0xFF,0xA,0x1,0xE1,0x0,0xA9,0x0,0xB6,0xFF,0x3C,0x0,0x5D,0x0,0xB3,0x0,0xFC,
0xFF,0xB7,0xFF,0x18,0x0,0x77,0x0,0x2E,0x0,0xD9,0xFF,0xA,0x0,0x75,0x0,0x9,0x0,0x86,0x0,0xBC,0x0,0xC7,0xFE,0x16,0x0,0x39,0x0,0x5,0x0,0xA5,0xFF,0x17,0xFF,0x80,
0x0,0x44,0x1,0xBA,0xFE,0x72,0xFF,0x20,0x0,0x7C,0x0,0x2,0x0,0xCD,0xFE,0x49,0x0,0xCA,0xFF,0xED,0xFF,0x8F,0xFE,0x57,0xFF,0x16,0x0,0xE4,0xFF,0x21,0xFF,0xFE,0xFF,0xAB,
0xFF,0xBA,0xFF,0x32,0x0,0xD5,0xFF,0x4B,0xFF,0xC0,0xFF,0x6B,0x0,0xE4,0xFE,0x19,0x0,0xB0,0xFE,0x18,0x0,0xD9,0xFF,0x72,0xFF,0x5A,0xFF,0xC2,0xFF,0xF2,0xFF,0xD9,0xFF,0xB2,
0xFF,0x6E,0xFE,0xD7,0x0,0x7F,0xFF,0x7D,0xFF,0xDF,0xFF,0xE2,0xFF,0xF2,0xFF,0x1C,0x0,0xFF,0xFF,0xDD,0xFF,0x39,0x0,0x42,0xFF,0x11,0x0,0x48,0xFF,0x99,0xFF,0xF0,0xFF,0x6F,
0xFF,0xFA,0xFF,0xCB,0xFF,0x4A,0x0,0x9A,0xFF,0xAD,0x0,0xB6,0xFF,0xA1,0xFF,0xD3,0x0,0x52,0x0,0x42,0x0,0xB8,0xFF,0x50,0x0,0x66,0x0,0xC1,0x0,0xE3,0xFF,0xFF,0xFF,0xA2,
0x0,0x58,0x0,0xC3,0xFF,0x5D,0x0,0x7A,0x0,0x93,0x0,0x2D,0x0,0x30,0x0,0x91,0x0,0x22,0x0,0xB,0x0,0x9C,0x0,0x7C,0x0,0x8F,0x0,0xBB,0x0,0xE3,0xFF,0xF9,0x0,0x37,
0x0,0x44,0x0,0x89,0x0,0xAA,0xFF,0xCB,0xFF,0xD2,0x0,0x36,0x0,0x13,0x0,0xE5,0xFF,0xE9,0x0,0xAB,0x0,0x15,0x0,0xE,0x0,0xE7,0xFF,0x40,0x1,0xB6,0xFF,0xA2,0xFF,0x28,
0x0,0x1B,0x0,0xB1,0xFF,0x7E,0x0,0x93,0xFF,0x9A,0x0,0xCC,0x0,0x62,0xFF,0x86,0xFF,0x23,0x0,0x6C,0x0,0xA5,0xFF,0x5D,0x0,0x26,0xFF,0x5F,0x0,0x25,0x0,0x95,0xFF,0x29,
0x0,0xD7,0xFF,0xBE,0xFF,0x50,0x0,0x4F,0xFF,0x59,0xFF,0x34,0x0,0x81,0xFF,0xD9,0x0,0xD9,0xFE,0x80,0xFF,0xA4,0x0,0xFC,0xFF,0x34,0xFF,0xDD,0xFE,0x3F,0x0,0xA7,0xFF,0xD7,
0xFF,0xDE,0xFF,0xF1,0xFF,0x73,0xFF,0xF3,0xFF,0xB7,0xFF,0xA1,0xFF,0x82,0x0,0xB3,0xFF,0x68,0xFF,0x75,0x0,0x89,0xFF,0x65,0xFF,0x19,0x0,0xE6,0xFE,0x9F,0x0,0x5C,0xFF,0xA8,
0xFF,0xEF,0xFF,0xFC,0xFF,0x11,0x0,0x81,0xFF,0x4C,0x0,0x5E,0xFF,0x50,0x0,0x9E,0xFF,0xCF,0xFF,0x0,0x0,0x6B,0xFF,0xFA,0xFF,0x21,0x0,0xCA,0xFE,0x1C,0x0,0xB5,0x0,0x60,
0xFF,0x8,0x0,0x82,0xFF,0x43,0x0,0x78,0x0,0x8A,0xFF,0x72,0xFF,0x81,0x0,0xE,0x0,0xC7,0xFF,0xBE,0xFF,0x89,0xFF,0x2F,0x0,0xD,0x0,0xDD,0xFF,0xBA,0x0,0x19,0x0,0x18,
0x0,0x18,0x1,0x26,0x0,0x4,0x0,0x5D,0x0,0x79,0x0,0x1A,0xFF,0xF6,0xFF,0x3F,0x0,0xFE,0xFF,0x4A,0xFF,0x6F,0x0,0xB5,0x0,0x5B,0x0,0x2D,0x0,0x43,0x0,0x78,0x0,0xC7,
0xFF,0xB3,0x0,0x75,0xFF,0xB5,0x0,0xA,0x0,0x33,0x0,0x96,0xFF,0xC9,0x0,0xBB,0xFF,0x9C,0xFF,0x7A,0x0,0x8A,0xFF,0x8A,0x0,0x7D,0xFF,0x4D,0x0,0x20,0xFF,0x31,0x0,0xD,
0x0,0xD9,0xFF,0x37,0x0,0x7C,0x0,0xC8,0xFF,0xEB,0xFF,0x5,0x0,0xC4,0x0,0x25,0x0,0x36,0xFF,0xC8,0x0,0xF5,0xFF,0x2D,0x0,0x57,0xFF,0x22,0x0,0x5E,0x0,0x2D,0x0,0x6A,
0x0,0xBF,0xFF,0x76,0x0,0x7A,0x0,0xB5,0xFF,0x7B,0x0,0xCF,0xFF,0x60,0x0,0x5E,0x0,0x20,0x0,0xBF,0x0,0x2A,0x0,0xE3,0x0,0xA2,0x0,0xDD,0xFF,0x1,0x0,0xBF,0x0,0x83,
0x0,0xF,0xFF,0x20,0x0,0xCA,0x0,0xA1,0x0,0x52,0x0,0x9F,0x0,0x63,0x0,0x5,0x0,0x96,0x1,0xA8,0xFF,0xFA,0xFF,0x0,0x0,0xA0,0x0,0xA8,0xFF,0x42,0x0,0xE6,0xFF,0xD1,
0xFF,0xAB,0x0,0xB7,0xFE,0x50,0x0,0x26,0x0,0x75,0xFF,0x40,0x0,0xF7,0xFF,0x31,0xFF,0xB2,0x0,0x76,0xFF,0xB8,0xFF,0xB3,0xFF,0xB,0x0,0xDC,0xFF,0xFF,0xFF,0xFA,0xFF,0xE0,
0xFE,0xC8,0xFF,0x52,0x0,0x7B,0xFF,0xD5,0xFF,0x58,0x0,0xF7,0xFE,0xCA,0xFF,0xBD,0xFF,0x68,0x0,0x4D,0xFF,0x6F,0xFF,0xDB,0xFF,0x5E,0xFF,0xE7,0xFF,0xCF,0xFE,0x7C,0x0,0xF0,
0xFF,0xA9,0xFE,0x9D,0xFF,0xD3,0xFF,0xF1,0x0,0x34,0xFF,0x16,0x0,0x31,0xFF,0x45,0x0,0xE3,0xFF,0x3B,0xFE,0x64,0x0,0x16,0xFF,0x9D,0x0,0xA6,0xFE,0xBC,0xFF,0x5F,0x0,0x63,
0x0,0x9B,0xFF,0x9E,0xFF,0x5B,0x0,0xCA,0xFF,0x11,0x0,0x22,0xFF,0xAD,0x0,0xE5,0xFE,0xE0,0xFF,0xA,0x0,0x3E,0x0,0x7C,0xFF,0x56,0x0,0x2D,0x0,0x93,0xFF,0xC4,0x0,0x69,
0xFF,0xAC,0x0,0xA3,0xFF,0xDA,0xFF,0x9B,0x0,0x0,0x0,0xC,0xFF,0xE9,0xFF,0x63,0x0,0xCE,0x0,0xE9,0xFF,0xDD,0xFF,0x9F,0x0,0x92,0x0,0xE,0x0,0x74,0xFF,0xD1,0x0,0xDE,
0xFF,0xFC,0x0,0xA9,0xFE,0x8A,0x0,0x64,0x0,0x7D,0x0,0x65,0x0,0x36,0xFF,0x4F,0x1,0xDD,0xFF,0x72,0x1,0xF2,0xFE,0xE5,0x0,0xD5,0x0,0xCE,0x0,0xCD,0xFF,0xC8,0xFF,0x34,
0x1,0x20,0x0,0x69,0x0,0x86,0xFF,0xF3,0x0,0x3B,0x0,0xC,0x0,0x13,0x0,0x29,0x1,0x3C,0x0,0x45,0x0,0x25,0x0,0xC0,0xFF,0xEC,0xFF,0xE4,0x0,0x2E,0x0,0xB2,0xFF,0x64,
0x0,0x90,0xFF,0x53,0x0,0xF1,0xFF,0x9,0x0,0xDA,0xFF,0x81,0x0,0x54,0xFF,0x2E,0x0,0x4A,0x0,0xCD,0xFF,0x77,0x0,0xEC,0xFE,0x15,0x0,0xB5,0xFF,0x79,0xFF,0x1D,0x0,0x2F,
0x0,0xBD,0xFF,0xE0,0xFF,0x5D,0x0,0xC5,0xFE,0x84,0xFF,0xFE,0xFF,0xCC,0xFF,0xA2,0xFF,0xF6,0xFF,0x5D,0xFF,0x62,0xFF,0xC2,0xFF,0xBE,0xFE,0xDC,0xFF,0x44,0xFF,0xB,0x0,0xE4,
0xFF,0xDC,0xFE,0x10,0x0,0xD5,0xFF,0xEF,0xFF,0x82,0xFF,0x1F,0xFF,0x5D,0x0,0x3E,0x0,0x77,0xFF,0x48,0xFF,0x22,0x0,0xF6,0xFF,0x7C,0xFF,0xE7,0xFF,0xAB,0xFF,0x93,0x0,0xC6,
0xFF,0x37,0xFF,0xA3,0xFF,0x7C,0xFF,0x74,0x0,0xAA,0xFF,0x58,0xFF,0xDD,0xFF,0x58,0x0,0x64,0xFF,0x36,0xFF,0xF5,0xFF,0x5,0x0,0x68,0x0,0xAE,0xFF,0x74,0x0,0xBA,0xFF,0x4F,
0x0,0xCF,0xFF,0x5B,0xFF,0xCC,0xFF,0x24,0x0,0x47,0x0,0xF8,0xFF,0xFA,0xFF,0xD8,0xFF,0x96,0x0,0xC3,0xFE,0x38,0x0,0x5B,0x0,0x21,0x0,0xFA,0xFF,0x81,0xFF,0x81,0x0,0x4F,
0x0,0x3F,0x0,0xF2,0xFF,0x6E,0x0,0x5,0x0,0x6D,0x0,0x86,0x0,0x2B,0x0,0xC1,0x0,0xDD,0xFF,0x14,0x0,0xBF,0x0,0x24,0x0,0xC9,0xFF,0x36,0x0,0x86,0x0,0xD6,0xFF,0x1D,
0x1,0x7A,0x0,0xBE,0xFF,0x2E,0x0,0xDC,0xFF,0x1C,0x0,0xE9,0xFF,0x11,0x0,0xF2,0xFF,0x9,0x0,0xF9,0xFF,0x4,0x0,0xFE,0xFF,0xFF,0xFF,0x2,0x0,0xFC,0xFF,0x3,0x0,0xFB,
0xFF,0x3,0x0,0xFB,0xFF,0x3,0x0,0xFC,0xFF,0x3,0x0,0xFD,0xFF,0x2,0x0,0xFD,0xFF,0x1,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,
0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,0xFF,
0xFF,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,
0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x0,0x2,
0x0,0x1,0x0,0x2,0x0,0x2,0x0,0x1,0x0,0x2,0x0,0x1,0x0,0x2,0x0,0x3,0x0,0x2,0x0,0x2,0x0,0x3,0x0,0x3,0x0,0x2,0x0,0x2,0x0,0x3,0x0,0x3,0x0,0x2,
0x0,0x3,0x0,0x2,0x0,0x2,0x0,0x2,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x2,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,
0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFE,0xFF,0xFE,0xFF,0xFE,0xFF,0xFE,0xFF,0xFE,0xFF,0xFD,
0xFF,0xFE,0xFF,0xFE,0xFF,0xFD,0xFF,0xFC,0xFF,0xFC,0xFF,0xFD,0xFF,0xFB,0xFF,0xFC,0xFF,0xFB,0xFF,0xFB,0xFF,0xFB,0xFF,0xFA,0xFF,0xFA,0xFF,0xFA,0xFF,0xF8,0xFF,0xF9,0xFF,0xF8,
0xFF,0xF8,0xFF,0xF7,0xFF,0xF6,0xFF,0xF7,0xFF,0xF5,0xFF,0xF5,0xFF,0xF4,0xFF,0xF5,0xFF,0xF4,0xFF,0xF3,0xFF,0xF4,0xFF,0xF3,0xFF,0xF3,0xFF,0xF2,0xFF,0xF2,0xFF,0xF2,0xFF,0xF2,
0xFF,0xF1,0xFF,0xF1,0xFF,0xF2,0xFF,0xF1,0xFF,0xF1,0xFF,0xF2,0xFF,0xF2,0xFF,0xF2,0xFF,0xF2,0xFF,0xF3,0xFF,0xF2,0xFF,0xF4,0xFF,0xF3,0xFF,0xF3,0xFF,0xF5,0xFF,0xF5,0xFF,0xF5,
0xFF,0xF6,0xFF,0xF7,0xFF,0xF7,0xFF,0xF8,0xFF,0xF9,0xFF,0xFA,0xFF,0xFA,0xFF,0xFB,0xFF,0xFD,0xFF,0xFC,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x2,0x0,0x2,0x0,0x3,
0x0,0x5,0x0,0x4,0x0,0x6,0x0,0x7,0x0,0x8,0x0,0x9,0x0,0x9,0x0,0xA,0x0,0xB,0x0,0xB,0x0,0xC,0x0,0xD,0x0,0xD,0x0,0xE,0x0,0xE,0x0,0xE,0x0,0xF,
0x0,0xF,0x0,0x10,0x0,0x10,0x0,0xF,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0xF,0x0,0xF,0x0,0x10,0x0,0xF,0x0,0xE,0x0,0xF,0x0,0xE,0x0,0xE,0x0,0xD,0x0,0xC,
0x0,0xC,0x0,0xB,0x0,0xB,0x0,0xA,0x0,0x9,0x0,0x9,0x0,0x9,0x0,0x8,0x0,0x7,0x0,0x7,0x0,0x7,0x0,0x7,0x0,0x5,0x0,0x6,0x0,0x5,0x0,0x4,0x0,0x3,
0x0,0x3,0x0,0x3,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFD,0xFF,0xFC,0xFF,0xFB,
0xFF,0xFA,0xFF,0xF9,0xFF,0xF8,0xFF,0xF7,0xFF,0xF6,0xFF,0xF6,0xFF,0xF5,0xFF,0xF4,0xFF,0xF4,0xFF,0xF3,0xFF,0xF3,0xFF,0xF3,0xFF,0xF2,0xFF,0xF2,0xFF,0xF2,0xFF,0xF2,0xFF,0xF0,
0xFF,0xEF,0xFF,0xEF,0xFF,0xEF,0xFF,0xEE,0xFF,0xEC,0xFF,0xED,0xFF,0xEC,0xFF,0xED,0xFF,0xED,0xFF,0xED,0xFF,0xEE,0xFF,0xF1,0xFF,0xF2,0xFF,0xF4,0xFF,0xF5,0xFF,0xF7,0xFF,0xF9,
0xFF,0xFB,0xFF,0xFE,0xFF,0x0,0x0,0x2,0x0,0x3,0x0,0x5,0x0,0x8,0x0,0xA,0x0,0xB,0x0,0xB,0x0,0xC,0x0,0xD,0x0,0xE,0x0,0xD,0x0,0xB,0x0,0xA,0x0,0xB,
0x0,0xB,0x0,0x8,0x0,0x7,0x0,0x7,0x0,0x6,0x0,0x7,0x0,0x6,0x0,0x6,0x0,0x5,0x0,0x4,0x0,0x4,0x0,0x3,0x0,0x2,0x0,0x1,0x0,0xFF,0xFF,0xFC,0xFF,0xFA,
0xFF,0xF8,0xFF,0xF7,0xFF,0xF5,0xFF,0xF3,0xFF,0xF1,0xFF,0xEE,0xFF,0xEE,0xFF,0xEE,0xFF,0xEE,0xFF,0xF1,0xFF,0xF2,0xFF,0xF3,0xFF,0xF6,0xFF,0xF6,0xFF,0xF8,0xFF,0xF6,0xFF,0xF6,
0xFF,0xF7,0xFF,0xF7,0xFF,0xF6,0xFF,0xF6,0xFF,0xF7,0xFF,0xF9,0xFF,0xF9,0xFF,0xFB,0xFF,0xFD,0xFF,0x0,0x0,0x3,0x0,0x5,0x0,0x9,0x0,0xA,0x0,0xA,0x0,0xB,0x0,0xA,
0x0,0xA,0x0,0xD,0x0,0xE,0x0,0xF,0x0,0xF,0x0,0xE,0x0,0xF,0x0,0xF,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0xF,0x0,0xE,0x0,0xE,0x0,0xD,
0x0,0xC,0x0,0xB,0x0,0xB,0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xF,0x0,0xE,0x0,0xF,0x0,0x10,0x0,0x12,0x0,0x12,0x0,0x12,0x0,0x13,0x0,0x14,0x0,0x15,0x0,0x16,
0x0,0x19,0x0,0x19,0x0,0x1B,0x0,0x1C,0x0,0x1D,0x0,0x20,0x0,0x21,0x0,0x23,0x0,0x23,0x0,0x24,0x0,0x25,0x0,0x24,0x0,0x25,0x0,0x25,0x0,0x25,0x0,0x27,0x0,0x25,
0x0,0x24,0x0,0x24,0x0,0x23,0x0,0x20,0x0,0x20,0x0,0x1E,0x0,0x1F,0x0,0x1F,0x0,0x1E,0x0,0x1F,0x0,0x1E,0x0,0x1F,0x0,0x1F,0x0,0x21,0x0,0x20,0x0,0x1F,0x0,0x1E,
0x0,0x1D,0x0,0x1A,0x0,0x18,0x0,0x15,0x0,0x10,0x0,0xB,0x0,0x7,0x0,0x3,0x0,0xFD,0xFF,0xF9,0xFF,0xF6,0xFF,0xF5,0xFF,0xF7,0xFF,0xFA,0xFF,0xFE,0xFF,0x2,0x0,0x8,
0x0,0x10,0x0,0x17,0x0,0x1D,0x0,0x23,0x0,0x28,0x0,0x2B,0x0,0x2B,0x0,0x29,0x0,0x28,0x0,0x21,0x0,0x19,0x0,0xF,0x0,0x4,0x0,0xF9,0xFF,0xEC,0xFF,0xE0,0xFF,0xD2,
0xFF,0xC7,0xFF,0xBE,0xFF,0xB5,0xFF,0xAD,0xFF,0xA7,0xFF,0xA2,0xFF,0x9E,0xFF,0xA0,0xFF,0xA3,0xFF,0xA7,0xFF,0xAC,0xFF,0xB3,0xFF,0xBF,0xFF,0xCC,0xFF,0xD9,0xFF,0xE8,0xFF,0xF7,
0xFF,0x7,0x0,0x16,0x0,0x24,0x0,0x34,0x0,0x3F,0x0,0x4A,0x0,0x4E,0x0,0x54,0x0,0x58,0x0,0x57,0x0,0x53,0x0,0x4E,0x0,0x4A,0x0,0x40,0x0,0x39,0x0,0x2A,0x0,0x23,
0x0,0xB,0x0,0x1E,0x0,0x5C,0x0,0x66,0x0,0x55,0x0,0x25,0x0,0xE0,0xFF,0x8F,0xFF,0x33,0xFF,0xD2,0xFE,0x6D,0xFE,0xA,0xFE,0xAB,0xFD,0x4F,0xFD,0xF5,0xFC,0x9D,0xFC,0x44,
0xFC,0xE5,0xFB,0x80,0xFB,0x1B,0xFB,0xB6,0xFA,0x59,0xFA,0x11,0xFA,0xE5,0xF9,0xE0,0xF9,0x10,0xFA,0x7E,0xFA,0x2F,0xFB,0x20,0xFC,0x4B,0xFD,0xA5,0xFE,0x19,0x0,0x97,0x1,0x13,
0x3,0x79,0x4,0xB7,0x5,0xC3,0x6,0x93,0x7,0x26,0x8,0x75,0x8,0x86,0x8,0x5F,0x8,0xFE,0x7,0x71,0x7,0xBF,0x6,0xF1,0x5,0x14,0x5,0x2B,0x4,0x44,0x3,0x69,0x2,0xA1,
0x1,0xF1,0x0,0x57,0x0,0xD6,0xFF,0x6D,0xFF,0x16,0xFF,0xD2,0xFE,0x97,0xFE,0x61,0xFE,0x2D,0xFE,0xF2,0xFD,0xAE,0xFD,0x5F,0xFD,0xFD,0xFC,0x86,0xFC,0xF8,0xFB,0x50,0xFB,0x91,
0xFA,0xC6,0xF9,0xE8,0xF8,0x7,0xF8,0x3E,0xF7,0x96,0xF6,0x13,0xF6,0xD3,0xF5,0xEB,0xF5,0x69,0xF6,0x54,0xF7,0x9F,0xF8,0x3B,0xFA,0xD,0xFC,0xC,0xFE,0x11,0x0,0xF9,0x1,0xB4,
0x3,0x2F,0x5,0x63,0x6,0x50,0x7,0xF6,0x7,0x52,0x8,0x73,0x8,0x63,0x8,0x21,0x8,0xB5,0x7,0x21,0x7,0x6B,0x6,0x9E,0x5,0xB8,0x4,0xBD,0x3,0xBC,0x2,0xBF,0x1,0xD2,
0x0,0xF9,0xFF,0x37,0xFF,0x8E,0xFE,0x8,0xFE,0xA2,0xFD,0x5A,0xFD,0x33,0xFD,0x2C,0xFD,0x45,0xFD,0x7A,0xFD,0xC3,0xFD,0x1E,0xFE,0x88,0xFE,0xFE,0xFE,0x7D,0xFF,0xFC,0xFF,0x78,
0x0,0xF1,0x0,0x61,0x1,0xC4,0x1,0x22,0x2,0x78,0x2,0xC2,0x2,0x3,0x3,0x3B,0x3,0x66,0x3,0x87,0x3,0x9C,0x3,0x9F,0x3,0x8F,0x3,0x6A,0x3,0x2D,0x3,0xD9,0x2,0x6A,
0x2,0xE4,0x1,0x4C,0x1,0xA5,0x0,0xEF,0xFF,0x38,0xFF,0x7D,0xFE,0xC9,0xFD,0x1F,0xFD,0x7E,0xFC,0xF1,0xFB,0x79,0xFB,0x15,0xFB,0xC9,0xFA,0x9A,0xFA,0x85,0xFA,0x8D,0xFA,0xB0,
0xFA,0xEE,0xFA,0x45,0xFB,0xB0,0xFB,0x32,0xFC,0xC3,0xFC,0x63,0xFD,0xF,0xFE,0xB9,0xFE,0x61,0xFF,0x3,0x0,0x98,0x0,0x1D,0x1,0x8D,0x1,0xE3,0x1,0x1F,0x2,0x3D,0x2,0x3F,
0x2,0x29,0x2,0xF8,0x1,0xB0,0x1,0x56,0x1,0xF0,0x0,0x82,0x0,0x10,0x0,0x9D,0xFF,0x2E,0xFF,0xC9,0xFE,0x6E,0xFE,0x1F,0xFE,0xDB,0xFD,0x9F,0xFD,0x6F,0xFD,0x4D,0xFD,0x31,
0xFD,0x1E,0xFD,0x16,0xFD,0x16,0xFD,0x18,0xFD,0x22,0xFD,0x33,0xFD,0x46,0xFD,0x61,0xFD,0x81,0xFD,0xAB,0xFD,0xE0,0xFD,0x20,0xFE,0x71,0xFE,0xD6,0xFE,0x53,0xFF,0xE6,0xFF,0x93,
0x0,0x5C,0x1,0x39,0x2,0x27,0x3,0x1D,0x4,0x14,0x5,0x5,0x6,0xE8,0x6,0xAE,0x7,0x52,0x8,0xCA,0x8,0xE,0x9,0x1B,0x9,0xEF,0x8,0x8A,0x8,0xEC,0x7,0x23,0x7,0x30,
0x6,0x1C,0x5,0xF2,0x3,0xBA,0x2,0x7E,0x1,0x46,0x0,0x1B,0xFF,0x2,0xFE,0xFC,0xFC,0x11,0xFC,0x44,0xFB,0x91,0xFA,0xF9,0xF9,0x7B,0xF9,0x13,0xF9,0xBE,0xF8,0x7A,0xF8,0x44,
0xF8,0x14,0xF8,0xE9,0xF7,0xD3,0xF7,0xD6,0xF7,0xF2,0xF7,0x32,0xF8,0xB2,0xF8,0x7F,0xF9,0x9F,0xFA,0xD,0xFC,0xBD,0xFD,0xA2,0xFF,0x9E,0x1,0x95,0x3,0x64,0x5,0xF7,0x6,0x43,
0x8,0x3E,0x9,0xE7,0x9,0x40,0xA,0x59,0xA,0x3C,0xA,0xEE,0x9,0x78,0x9,0xDE,0x8,0x27,0x8,0x53,0x7,0x6B,0x6,0x72,0x5,0x74,0x4,0x85,0x3,0xAD,0x2,0xEF,0x1,0x55,
0x1,0xEA,0x0,0xA9,0x0,0x8F,0x0,0x97,0x0,0xB3,0x0,0xDF,0x0,0x12,0x1,0x43,0x1,0x6C,0x1,0x8D,0x1,0xA4,0x1,0xB2,0x1,0xB2,0x1,0x9E,0x1,0x7B,0x1,0x4A,0x1,0x6,
0x1,0xAD,0x0,0x3C,0x0,0xB7,0xFF,0x21,0xFF,0x79,0xFE,0xBD,0xFD,0xF0,0xFC,0x1B,0xFC,0x37,0xFB,0x49,0xFA,0x5C,0xF9,0x66,0xF8,0x6E,0xF7,0x8F,0xF6,0xCC,0xF5,0x28,0xF5,0xB7,
0xF4,0x90,0xF4,0xC7,0xF4,0x6C,0xF5,0x7F,0xF6,0xF6,0xF7,0xC2,0xF9,0xD2,0xFB,0x4,0xFE,0x35,0x0,0x4B,0x2,0x2F,0x4,0xD7,0x5,0x34,0x7,0x42,0x8,0x8,0x9,0x8C,0x9,0xD5,
0x9,0xE8,0x9,0xCE,0x9,0x92,0x9,0x38,0x9,0xBE,0x8,0x25,0x8,0x6E,0x7,0xA2,0x6,0xC3,0x5,0xD8,0x4,0xEC,0x3,0x4,0x3,0x2C,0x2,0x6A,0x1,0xBA,0x0,0x2A,0x0,0xBB,
0xFF,0x69,0xFF,0x34,0xFF,0x18,0xFF,0x13,0xFF,0x24,0xFF,0x44,0xFF,0x65,0xFF,0x85,0xFF,0xA0,0xFF,0xB2,0xFF,0xB3,0xFF,0x9E,0xFF,0x73,0xFF,0x31,0xFF,0xE0,0xFE,0x7B,0xFE,0xE,
0xFE,0x98,0xFD,0x1D,0xFD,0xA3,0xFC,0x31,0xFC,0xC9,0xFB,0x6F,0xFB,0x25,0xFB,0xEF,0xFA,0xD4,0xFA,0xD1,0xFA,0xEB,0xFA,0x24,0xFB,0x83,0xFB,0x9,0xFC,0xB6,0xFC,0x8C,0xFD,0x89,
0xFE,0xA5,0xFF,0xD5,0x0,0xF,0x2,0x42,0x3,0x64,0x4,0x60,0x5,0x2C,0x6,0xC3,0x6,0x1B,0x7,0x38,0x7,0x19,0x7,0xC6,0x6,0x46,0x6,0x9F,0x5,0xDB,0x4,0x4,0x4,0x1E,
0x3,0x32,0x2,0x4F,0x1,0x76,0x0,0xAD,0xFF,0xFB,0xFE,0x5D,0xFE,0xDC,0xFD,0x75,0xFD,0x21,0xFD,0xDE,0xFC,0xA6,0xFC,0x79,0xFC,0x4D,0xFC,0x1A,0xFC,0xDB,0xFB,0x91,0xFB,0x37,
0xFB,0xCF,0xFA,0x5B,0xFA,0xE4,0xF9,0x67,0xF9,0xDB,0xF8,0x60,0xF8,0xF9,0xF7,0xA1,0xF7,0x73,0xF7,0x76,0xF7,0xA9,0xF7,0x3E,0xF8,0x32,0xF9,0x81,0xFA,0x4,0xFC,0xD1,0xFD,0xC8,
0xFF,0xA8,0x1,0x97,0x3,0x35,0x5,0xA6,0x6,0xCC,0x7,0xAA,0x8,0x5A,0x9,0x8D,0x9,0xB7,0x9,0xA8,0x9,0x5F,0x9,0xF9,0x8,0x74,0x8,0xDF,0x7,0x3C,0x7,0x97,0x6,0xD5,
0x5,0x35,0x5,0x87,0x4,0xEF,0x3,0x46,0x3,0xB3,0x2,0x21,0x2,0x7F,0x1,0xFD,0x0,0x6F,0x0,0x4,0x0,0x82,0xFF,0x21,0xFF,0xD3,0xFE,0x9A,0xFE,0x63,0xFE,0x2D,0xFE,0xFD,
0xFD,0xE7,0xFD,0xEF,0xFD,0x83,0xFD,0x78,0xFD,0x2F,0xFD,0xD3,0xFC,0x8F,0xFC,0xF3,0xFB,0xCB,0xFB,0x12,0xFB,0xB8,0xFA,0x5F,0xFA,0xBB,0xF9,0x5A,0xF9,0xD,0xF9,0xD1,0xF8,0x49,
0xF8,0x29,0xF8,0x2B,0xF8,0xCD,0xF7,0xE2,0xF7,0x43,0xF8,0x53,0xF8,0xEA,0xF8,0x9A,0xF9,0xB2,0xFA,0xB,0xFC,0x3D,0xFD,0xB8,0xFE,0x82,0x0,0x16,0x2,0x82,0x3,0xE3,0x4,0xB,
0x6,0xF3,0x6,0x99,0x7,0xF6,0x7,0x3A,0x8,0x3B,0x8,0xE7,0x7,0xAB,0x7,0xFB,0x6,0xB4,0x6,0x48,0x5,0x9F,0x4,0x98,0x4,0x57,0x2,0xF0,0x1,0x3A,0x2,0x5E,0x0,0x6F,
0x0,0x41,0x1,0xE6,0xFF,0x9E,0x0,0x49,0x1,0x11,0x0,0x63,0x2,0x32,0x2,0x6F,0xFF,0x79,0x1,0x18,0x2,0x73,0x1,0x31,0x1,0x58,0xFF,0x16,0x1,0x81,0x3,0xCD,0xFD,0x20,
0xFD,0x77,0x0,0x5F,0xFC,0x3C,0xFB,0xD0,0xF8,0xE2,0xF4,0x19,0xF4,0x60,0xF1,0xD8,0xED,0x7,0xEF,0xFC,0xEE,0x49,0xEC,0xA1,0xF0,0x70,0xF3,0x15,0xF4,0xA2,0xF9,0x94,0xFE,0x5A,
0x2,0xA4,0x6,0x7F,0x8,0xEF,0xC,0xE,0x11,0xC2,0xD,0xDB,0xF,0x3D,0x13,0xD4,0xC,0x72,0xF,0x3C,0xE,0xB1,0x7,0xDC,0xE,0xF1,0x6,0x69,0x6,0xD8,0xB,0x1C,0x1,0xA8,
0x5,0xF1,0x6,0x66,0xFD,0xA2,0x1,0x53,0x0,0x13,0xFB,0x2F,0x2,0x87,0xFD,0x14,0xF9,0x46,0xFC,0xE5,0xFF,0x62,0xFB,0x34,0xF7,0x12,0x2,0xC2,0xFA,0xBD,0xF5,0xE0,0xF7,0xCA,
0xF8,0x5E,0xF3,0x3B,0xEB,0x53,0xF9,0xCF,0xED,0x6C,0xE1,0x27,0xEB,0xA8,0xE9,0x1F,0xDF,0x86,0xE2,0x15,0xED,0x3B,0xE5,0xC8,0xE8,0x46,0xF3,0x9F,0xF7,0x4,0xFA,0x3C,0xFF,0xDC,
0xB,0xA2,0xF,0xD5,0xC,0x2A,0x16,0x3D,0x1E,0x5C,0x13,0x90,0x15,0x24,0x1B,0xCC,0x10,0x19,0xE,0xAA,0x10,0x98,0xC,0x8F,0x0,0x4B,0x9,0x76,0x8,0x1E,0xFB,0x27,0x7,0xDE,
0x2,0xD5,0x3,0x60,0x6,0xAA,0xFF,0x63,0xA,0x61,0x9,0x77,0x1,0x7D,0x8,0x2C,0xA,0xD9,0xFD,0x84,0xA,0x25,0x1,0x90,0xFC,0x54,0xA,0xC4,0xF5,0x8B,0x3,0xF3,0xFE,0x2A,
0xF5,0x20,0x0,0xC7,0xF2,0x33,0xF6,0x88,0xF6,0xEA,0xEC,0x62,0xEC,0x68,0xEE,0xE1,0xE4,0x9D,0xE1,0x32,0xE6,0x5D,0xDE,0x1C,0xE5,0x3C,0xE3,0x6F,0xE4,0x5B,0xF3,0x37,0xEC,0x73,
0xFA,0x29,0x9,0x57,0x3,0x3C,0x12,0x86,0x1C,0x99,0x19,0xA3,0x1F,0xB8,0x26,0x80,0x21,0x37,0x1F,0x23,0x22,0xB5,0x19,0xA3,0x19,0x6A,0x12,0xC2,0xE,0xF2,0xD,0x2D,0x4,0x19,
0x9,0x87,0x0,0xAD,0x0,0x28,0x4,0x71,0xFB,0x6A,0x1,0xB,0x0,0x62,0xFF,0xB9,0x3,0x2C,0x1,0xB0,0x4,0x74,0xFE,0x47,0x7,0x5B,0x8,0x61,0xF7,0x1F,0xB,0x6C,0x3,0xE9,
0xFA,0xDA,0x3,0xBA,0xF7,0xBB,0x4,0xC5,0xEB,0xBF,0xF1,0x71,0x3,0x88,0xD6,0xA5,0xEE,0x12,0xED,0x8E,0xD4,0xCD,0xE6,0xC4,0xDD,0xCF,0xE1,0x67,0xE3,0xCC,0xE0,0xBC,0xF7,0x4C,
0xEE,0x4,0xF7,0x36,0x10,0x46,0x4,0xB7,0x15,0x3E,0x1E,0xA2,0x1B,0xE5,0x26,0x35,0x22,0x2C,0x28,0x2D,0x22,0x89,0x1D,0xF6,0x21,0xD6,0x13,0x38,0x14,0xEB,0x12,0xC7,0x5,0x36,
0xB,0x1E,0x3,0xED,0xFF,0x0,0x6,0x1B,0xF7,0x69,0x6,0x89,0xFA,0x35,0xFF,0xD,0x7,0xAD,0xF2,0x1A,0x13,0xB3,0xF9,0xB6,0x0,0xBA,0xF,0x8F,0xF4,0x21,0x13,0xA6,0xF9,0x46,
0xFF,0x21,0xB,0x8A,0xED,0xC0,0x8,0xB,0xED,0x51,0xF1,0x24,0xFD,0x3C,0xD9,0x9E,0xF2,0xA1,0xDE,0xEC,0xDD,0xAE,0xE7,0x1C,0xD2,0x33,0xEC,0xB6,0xDA,0x96,0xE5,0x96,0xF5,0x8E,
0xE8,0xCA,0x3,0x62,0x2,0xD5,0xC,0xC0,0x15,0x7D,0x18,0x69,0x25,0x7C,0x1F,0x52,0x26,0x2,0x29,0xF8,0x1E,0x19,0x23,0xE4,0x1D,0xB,0x16,0x11,0x16,0x54,0xC,0xBE,0xB,0xC1,
0x1,0xF0,0x3,0x82,0x0,0x69,0xF7,0x70,0x0,0x97,0xF8,0xD1,0xFA,0x3C,0xFB,0xE5,0xFB,0x40,0xFD,0x95,0xFE,0x5D,0xFE,0x8,0x0,0x99,0x3,0x27,0xFE,0xD3,0x7,0x2E,0xFA,0xCA,
0x3,0xD3,0xFC,0xC6,0xF8,0x94,0xFB,0x6E,0xEB,0xA3,0xFD,0x9A,0xE0,0x8F,0xE8,0xAB,0xE8,0x7A,0xD7,0xA5,0xE5,0x8E,0xD6,0x7C,0xDF,0x96,0xDE,0x10,0xE0,0xED,0xEC,0x59,0xE9,0x1E,
0xF9,0x7C,0x0,0x5A,0x4,0x9,0x11,0x48,0x16,0xC0,0x1C,0xD6,0x1F,0xE7,0x24,0x4B,0x24,0xE8,0x22,0xF7,0x21,0x8B,0x1F,0xF9,0x19,0xBD,0x14,0x19,0x13,0xD9,0xA,0xE2,0x7,0x3D,
0x4,0xA4,0xFE,0x37,0x2,0xA3,0xF6,0xDF,0xFC,0x3C,0xFC,0x8D,0xF4,0xCA,0x2,0x88,0xF3,0x1D,0x3,0x94,0xFB,0xD5,0xFB,0x22,0x7,0x6C,0xF5,0x30,0xA,0x24,0xF8,0x1,0xFC,0xB3,
0x0,0xE5,0xEC,0xAA,0xFE,0xEF,0xEE,0x1C,0xEA,0xA0,0xED,0x41,0xE2,0xA9,0xE7,0x10,0xDB,0x33,0xE4,0x49,0xE0,0xB4,0xDE,0xBE,0xE8,0x13,0xE4,0xE5,0xF0,0xFD,0xF0,0x99,0x0,0x6,
0x0,0xD3,0xC,0x38,0x17,0x55,0x14,0x8A,0x21,0xC4,0x20,0x75,0x25,0x1B,0x21,0x63,0x24,0x53,0x1E,0x60,0x19,0xF4,0x19,0x94,0x12,0x69,0xD,0x7A,0x8,0x64,0x5,0x2F,0x3,0xC4,
0xFC,0xBD,0xFB,0xA,0xFC,0xC1,0xF8,0x1,0xFB,0x8A,0xF5,0xD6,0xFE,0x70,0xFA,0x74,0xFB,0x5D,0xFC,0xA4,0xFB,0x8F,0x2,0xCF,0xF7,0x17,0x3,0xD9,0xF9,0xB4,0xFF,0x72,0xFB,0x21,
0xF2,0xF5,0xFF,0x95,0xE8,0xA0,0xF0,0x34,0xEA,0xBD,0xDF,0x17,0xE7,0x9,0xDC,0xA7,0xE1,0xE7,0xDD,0xB1,0xE1,0x98,0xE8,0x16,0xE7,0xA2,0xF6,0xC2,0xFA,0x5,0x0,0xE3,0xC,0x47,
0x12,0xEA,0x18,0x3E,0x1D,0x7A,0x24,0x8,0x21,0x51,0x25,0x3,0x23,0x25,0x22,0x1,0x1D,0xAE,0x16,0x6B,0x18,0x7E,0xC,0x82,0xE,0x6,0x5,0xD8,0x2,0x91,0x0,0x42,0xFC,0xE1,
0xF9,0x4D,0xFB,0xD2,0xF6,0x0,0xFA,0xFA,0xFA,0xF8,0xF4,0x8A,0xFD,0x75,0xF6,0xCA,0xFE,0xBD,0xF6,0x7,0xFD,0x93,0xF7,0xB5,0xF7,0x60,0xFB,0x1B,0xF0,0xD6,0xFC,0x40,0xE7,0x19,
0xF1,0xD9,0xEA,0x63,0xE2,0x5E,0xEA,0x10,0xDD,0x34,0xE6,0xF1,0xDD,0x14,0xE9,0xA4,0xE8,0xC0,0xEA,0xB5,0xFD,0xFF,0xF7,0xB7,0x8,0x6A,0xC,0x9F,0x16,0xF0,0x18,0x6F,0x1F,0xAC,
0x24,0xBF,0x1F,0xA1,0x26,0x7,0x1F,0xAC,0x21,0x52,0x16,0xB6,0x1C,0xC7,0xD,0x9D,0xD,0x60,0xC,0xF5,0xFC,0xDB,0x7,0xD1,0xF5,0x64,0x0,0xF7,0xF7,0x24,0xF7,0x13,0xFC,0xE,
0xF6,0x84,0xFE,0xEF,0xF4,0x4D,0xFF,0x4E,0xF9,0x6B,0xFC,0xE,0x0,0x35,0xF8,0xCA,0x0,0xAD,0xF1,0x1B,0xFC,0x19,0xF5,0x6A,0xEA,0x25,0xF2,0x94,0xE4,0x6C,0xE8,0xF8,0xDF,0xF9,
0xE2,0x1C,0xE2,0x34,0xDF,0x23,0xE9,0xC2,0xE6,0x4A,0xF0,0x5F,0xF9,0xC4,0xFD,0xB,0x6,0x68,0x10,0xA8,0x15,0x9F,0x1A,0x30,0x21,0x1E,0x23,0x64,0x23,0xE0,0x25,0x5B,0x21,0x15,
0x1D,0x87,0x1C,0xC9,0x13,0x41,0x12,0x5D,0xA,0x7,0x9,0x39,0x0,0xC0,0x0,0x1,0xFF,0xF3,0xF3,0x93,0x0,0xE6,0xF2,0xE5,0xFD,0xF5,0xF5,0x7B,0xFC,0xAE,0xFA,0xBF,0xF2,0x15,
0x8,0x4E,0xF2,0x57,0x1,0x72,0xF9,0x6B,0xFD,0x6C,0xF8,0x16,0xF1,0x6A,0xF6,0xA5,0xE7,0xFD,0xEF,0x2F,0xE0,0x50,0xE5,0x65,0xDE,0x59,0xDE,0x6A,0xE2,0x4,0xE0,0x33,0xEC,0xD4,
0xEA,0x47,0xF9,0x93,0xFF,0x8E,0x6,0x4A,0x12,0x87,0x16,0x6A,0x1F,0x98,0x22,0xFC,0x27,0x9A,0x26,0x5B,0x26,0x2D,0x27,0xFE,0x1F,0x3D,0x1F,0xB6,0x14,0xC2,0x17,0x38,0xB,0x89,
0x9,0xF8,0x4,0x2C,0xFF,0xF3,0x0,0x3C,0xF5,0xEB,0xFF,0x43,0xF6,0x6F,0xFF,0x7C,0xF8,0x22,0xFE,0xD4,0xFD,0xCB,0xFD,0xC8,0x2,0x96,0xF7,0x6B,0x1,0x14,0xF6,0x53,0x0,0xFF,
0xF1,0x6E,0xF1,0x7C,0xF0,0xFF,0xE5,0xF,0xEB,0xA6,0xE0,0x9D,0xE3,0xCC,0xDD,0x58,0xE3,0x6B,0xE4,0x69,0xE7,0x44,0xF0,0x22,0xF4,0x41,0x2,0x29,0x4,0xF7,0x13,0x9D,0x15,0x9D,
0x1F,0x23,0x25,0x99,0x24,0x6,0x2C,0x53,0x24,0x20,0x2A,0x70,0x1D,0x17,0x21,0xC,0x16,0x88,0x12,0xA7,0xE,0x61,0x4,0x15,0x4,0x4A,0x0,0x4E,0xF9,0xB5,0xFB,0x2F,0xF8,0xEA,
0xF7,0x17,0xFA,0x90,0xF3,0xF1,0x0,0xB0,0xF1,0xDF,0x2,0xBD,0xF5,0xFA,0xFE,0xF6,0xF6,0xC1,0xF9,0x82,0xFB,0x7D,0xE7,0x61,0xF9,0xEF,0xE3,0x9C,0xEC,0x4,0xDC,0xDD,0xE8,0x3F,
0xDA,0xD6,0xDD,0x46,0xE7,0xB8,0xDD,0xED,0xEF,0x4C,0xED,0x42,0x0,0x24,0xFF,0x72,0x10,0xD3,0x13,0xCE,0x1B,0x70,0x23,0x13,0x25,0xD5,0x2B,0x5E,0x24,0x2C,0x2D,0x5,0x1F,0xCF,
0x23,0xE,0x1C,0xDA,0x10,0x79,0x14,0x7F,0x1,0xE0,0x9,0x51,0xFA,0x1D,0xFC,0xAB,0xF9,0x86,0xF3,0x4A,0xFA,0x8E,0xF3,0x47,0xF7,0x5C,0xF5,0x5D,0xFE,0x41,0xF3,0x8F,0xFA,0x7A,
0xF5,0x4,0xFD,0x79,0xF6,0x8D,0xEF,0x41,0xF5,0x42,0xE8,0xE,0xEC,0x39,0xE2,0xBD,0xE6,0x9D,0xDC,0xFA,0xE1,0xB3,0xE1,0x9,0xE3,0x62,0xE9,0x9D,0xF0,0xFB,0xFB,0x9D,0xFE,0x89,
0xE,0x5F,0x12,0x39,0x1C,0x3A,0x21,0x8E,0x26,0xB,0x29,0x9C,0x29,0x3E,0x29,0x44,0x21,0x8C,0x20,0x66,0x1A,0x2E,0x12,0x76,0xF,0x49,0x7,0xE5,0xFF,0x2A,0x2,0x5B,0xF9,0x97,
0xF8,0xCC,0xF8,0xAF,0xF3,0x5B,0xFA,0xB1,0xF4,0xAD,0xFB,0x9F,0xF7,0x74,0xFD,0x9F,0xFB,0xAC,0xF6,0xA8,0x1,0x6E,0xEF,0xEB,0xF3,0x7B,0xED,0xC7,0xE8,0xAC,0xE6,0xD9,0xDD,0x5B,
0xE0,0xD2,0xDA,0xDD,0xDF,0x8B,0xE0,0x0,0xE6,0xE7,0xF1,0xC7,0xF4,0x9E,0x3,0x1E,0x9,0xB0,0x16,0x72,0x1D,0x5,0x24,0x90,0x2B,0xC4,0x2A,0x98,0x2E,0xEF,0x28,0x13,0x2B,0xDE,
0x21,0xDF,0x20,0xD4,0x13,0xD0,0x12,0x53,0xA,0xF0,0x3,0xC2,0xFD,0xAD,0xFA,0x1C,0xF9,0x61,0xEE,0x2B,0xFA,0xAB,0xF0,0x2A,0xF6,0x18,0xF2,0xF4,0xF7,0xAF,0xF8,0x7D,0xF1,0x8,
0xFE,0x35,0xF0,0xDB,0xED,0xBD,0xF0,0x98,0xE3,0x3E,0xE5,0x95,0xDB,0xAF,0xDC,0xD1,0xDC,0x48,0xD6,0x14,0xE3,0xA1,0xE1,0x38,0xF0,0x28,0xF8,0xC4,0x1,0x13,0x10,0x74,0x18,0xDC,
0x21,0x78,0x2B,0xA8,0x31,0x33,0x32,0x76,0x35,0xC3,0x2F,0x5F,0x2C,0x8D,0x25,0xFF,0x1E,0xA0,0x10,0x15,0x11,0x3A,0xFF,0x53,0xFE,0xA4,0xF8,0xA8,0xEF,0xF3,0xF5,0x6A,0xEC,0xCB,
0xF1,0x97,0xED,0xF9,0xFB,0xB3,0xF1,0x81,0xFA,0xC4,0xF6,0xB6,0xFF,0xB4,0xF2,0xBE,0xE8,0x1,0xF7,0xB4,0xDA,0xEB,0xE3,0x34,0xD8,0xDD,0xD7,0x21,0xD3,0x90,0xD7,0xD4,0xDE,0xBF,
0xE0,0xAD,0xF2,0xBC,0xF6,0x9E,0x4,0xDB,0x12,0x3D,0x1A,0xA4,0x27,0xAE,0x2E,0xAA,0x35,0xD1,0x33,0xD4,0x36,0x10,0x32,0xA3,0x27,0x51,0x25,0xD4,0x18,0xBF,0xE,0x49,0x5,0xCE,
0x0,0xC3,0xF4,0xEA,0xF6,0x9D,0xEC,0xCF,0xEF,0x92,0xEE,0x75,0xF1,0x37,0xEE,0x94,0xF6,0xB8,0xF9,0xD3,0xEB,0xB1,0x2,0x13,0xEB,0x5E,0xE6,0x65,0xE9,0xB8,0xDE,0xF,0xD7,0x40,
0xD2,0xDC,0xD7,0x8,0xCE,0x0,0xD6,0x3,0xE2,0xA2,0xE3,0x95,0xF6,0x7B,0xFB,0x71,0xE,0xE9,0x1C,0xE8,0x23,0xA1,0x37,0xE4,0x35,0x42,0x42,0xD1,0x3C,0x18,0x37,0xC8,0x32,0x6F,
0x25,0xFF,0x1B,0x7E,0xB,0xF1,0x8,0xF8,0xF8,0xE8,0xF2,0x45,0xF3,0x61,0xEA,0x81,0xEE,0x3A,0xED,0xD9,0xF2,0xA3,0xEF,0x30,0xFD,0xD4,0xF5,0xBD,0xFB,0x13,0x5,0xAC,0xE6,0x32,
0xEC,0xB1,0xE3,0xDB,0xD2,0x42,0xCB,0x9D,0xCC,0x8C,0xC6,0x80,0xC2,0x74,0xD3,0x31,0xDF,0xF8,0xE5,0x53,0xFF,0x62,0x13,0xC4,0x1D,0x75,0x32,0x1A,0x43,0x47,0x48,0x6,0x49,0xE7,
0x4C,0xE5,0x3C,0xD4,0x33,0xB1,0x22,0x3A,0x12,0xE6,0x2,0x51,0xF9,0xFF,0xEF,0x86,0xEA,0xD2,0xF0,0x27,0xE7,0x26,0xF6,0xA7,0xF5,0xC5,0xFB,0x60,0x0,0xC8,0xA,0xCB,0xFD,0xC,
0x3,0x17,0x5,0x92,0xDE,0x11,0xE7,0x96,0xD2,0x4D,0xC2,0x55,0xB4,0x2F,0xBE,0xAD,0xB4,0xA,0xBB,0xDF,0xDD,0xB1,0xE1,0x50,0xFA,0x8B,0x18,0x8B,0x2D,0xC2,0x35,0x54,0x52,0x25,
0x56,0x4,0x51,0xE2,0x51,0xE1,0x45,0xFC,0x33,0x5D,0x1D,0xD1,0x12,0xDC,0xFB,0xA5,0xEF,0xBB,0xEC,0x46,0xEB,0x98,0xE9,0x42,0xF0,0x7B,0xFA,0x73,0xFC,0xE4,0x3,0xCC,0x5,0x20,
0x15,0x4B,0xF8,0x11,0xF,0x59,0x2,0x77,0xD4,0xAA,0xE9,0xAC,0xC0,0xB0,0xB9,0xE3,0xAB,0xCF,0xB1,0x3D,0xB7,0x7B,0xBC,0x4F,0xE8,0xCE,0xEF,0x56,0xD,0x5A,0x28,0x73,0x41,0x45,
0x4A,0xAC,0x5B,0x44,0x5C,0xA4,0x51,0x54,0x49,0x8B,0x37,0xAB,0x23,0xD6,0x8,0x3D,0x2,0x8D,0xED,0xE9,0xE9,0x9A,0xEA,0xBC,0xEF,0x2D,0xF3,0x1E,0x1,0x37,0x4,0xFC,0x9,0x83,
0x7,0x80,0x11,0x8A,0x5,0x2F,0xFC,0xC9,0xE,0xF0,0xD2,0xA,0xD8,0x9,0xC5,0xA1,0xAC,0xF0,0xA7,0x26,0xA2,0xB,0xBD,0x33,0xB3,0xC1,0xE5,0x22,0xFD,0x1E,0x7,0x7E,0x39,0xE9,
0x44,0xE3,0x55,0xC9,0x57,0x59,0x5B,0x3B,0x4F,0xC5,0x33,0x59,0x35,0x50,0x16,0xB5,0x1,0x62,0xFB,0x9F,0xEF,0x4A,0xEA,0x7D,0xEF,0xAE,0xFA,0x8D,0xF7,0xDB,0x5,0xA1,0xD,0x71,
0x6,0xD7,0xA,0x94,0x13,0x8A,0xF3,0xF,0x3,0x2D,0x1,0x2D,0xC1,0xA1,0xD4,0xEA,0xB5,0xBA,0xA1,0xFD,0xA2,0x3F,0xA6,0xC4,0xC3,0xA2,0xBF,0x24,0xFE,0x72,0xE,0x79,0x1B,0xB2,
0x49,0x40,0x4F,0xE2,0x58,0x6D,0x4A,0x23,0x56,0x3D,0x3C,0x2E,0x1E,0x6E,0x26,0xBA,0x3,0xEB,0xF9,0x6A,0xF4,0x68,0xF6,0x7,0xF5,0x4,0xF8,0x21,0xB,0xCC,0xB,0xCB,0x9,0xD5,
0x15,0x20,0xC,0x9,0x9,0x2C,0xA,0x76,0xEC,0x88,0xA,0x3D,0xD7,0xA1,0xB6,0x19,0xCA,0x1B,0x9C,0x98,0x9D,0x8D,0xA2,0x60,0xBC,0xEA,0xCE,0x44,0xDE,0x23,0x1F,0x23,0x1E,0x77,
0x37,0xC4,0x58,0xE1,0x4E,0x5A,0x51,0xFD,0x3E,0xDA,0x42,0x4E,0x22,0x76,0x14,0x74,0xE,0x22,0xFF,0x94,0xF5,0x6C,0xF6,0x22,0x0,0xC8,0x2,0xFE,0x8,0x45,0x12,0x3D,0x16,0x87,
0xE,0xA3,0xA,0x5C,0x4,0xAF,0xD,0xC1,0xE5,0x94,0x3,0x20,0xE6,0xC0,0xAE,0x7,0xC3,0x1D,0xA4,0x8A,0xA2,0xBC,0x97,0x5E,0xC0,0xFC,0xDC,0x82,0xE0,0xA2,0x18,0xA,0x2C,0x64,
0x3A,0xBC,0x4A,0x29,0x50,0xCF,0x4C,0x71,0x35,0x38,0x31,0xFA,0x23,0x85,0xA,0xB6,0x11,0xBB,0xFD,0xA6,0xFE,0xE8,0xFF,0xB3,0x2,0xB3,0x11,0x59,0x1,0xD8,0x1E,0x71,0x6,0xFF,
0x13,0x38,0x4,0xC3,0xFD,0xA7,0x9,0xEC,0xE3,0xD6,0xA,0x3D,0xD2,0x3B,0xB4,0xF7,0xBD,0xBB,0xA4,0x86,0x9D,0x24,0x9D,0x6C,0xCA,0xDF,0xDF,0x9C,0xEB,0x1F,0x20,0x46,0x31,0x63,
0x3D,0xDE,0x43,0xE4,0x4C,0x49,0x43,0x7D,0x29,0x47,0x2D,0x9F,0x18,0x70,0xF,0xEC,0xA,0xA8,0x1,0x2,0x9,0xB1,0x2,0xAB,0xA,0xE8,0xD,0xB9,0x8,0x2E,0x15,0x33,0x4,0xEC,
0x14,0xD3,0xF8,0xDC,0xFE,0x3C,0xFF,0x37,0xF2,0x82,0xFF,0xD7,0xB4,0x6E,0xC9,0x58,0xB1,0xFA,0x92,0xFF,0xA9,0x96,0xA8,0xE5,0xD9,0xBF,0xDE,0x27,0xA,0x8E,0x30,0x46,0x2B,0xDC,
0x49,0x2A,0x46,0x38,0x44,0x5B,0x38,0xA0,0x23,0xF8,0x28,0xC5,0x10,0x1A,0xA,0x61,0xA,0x1E,0x3,0x55,0xA,0x1B,0xFF,0x13,0x14,0x67,0xD,0xD2,0xD,0xD4,0xB,0x59,0xB,0x21,
0x6,0x57,0xF8,0x2C,0x3,0x5E,0xEE,0x93,0xA,0x92,0xCA,0x0,0xBC,0x94,0xC0,0x35,0x97,0xC7,0xAC,0x58,0x97,0x7A,0xD1,0xA9,0xE7,0x96,0xF6,0x23,0x26,0xC3,0x2D,0x39,0x48,0xC7,
0x3E,0x3,0x3D,0x3F,0x3E,0x9B,0x27,0x91,0x1D,0x3,0x14,0x92,0x17,0x3E,0xC,0xF,0x3,0x7A,0xE,0x92,0xA,0x4B,0xC,0xCF,0x7,0x51,0x14,0xB2,0x4,0xB8,0x9,0x0,0x1,0xAD,
0xF7,0xFE,0x2,0xC,0xED,0xCA,0x10,0x49,0xCD,0xF2,0xB4,0xE6,0xC6,0xD,0x98,0x67,0xAD,0xDF,0x9B,0xAC,0xD2,0xCA,0xEE,0xF2,0xEC,0xCF,0x2D,0xD9,0x2B,0xD1,0x46,0x10,0x3B,0xE,
0x38,0xE3,0x43,0xC1,0x1E,0xEA,0x1C,0xCD,0x15,0xAB,0x19,0x1C,0x10,0xA9,0x5,0x1C,0xF,0x47,0xD,0x82,0xD,0x15,0x6,0x6D,0xD,0xCE,0x6,0xC1,0x5,0xF7,0xFC,0xB8,0xFE,0x44,
0x0,0xC3,0xF0,0xAE,0xF,0xFD,0xD0,0xFF,0xB5,0x6D,0xB7,0x10,0xA7,0x8,0xB0,0x45,0x97,0x3,0xDA,0x82,0xF4,0x32,0xF8,0x70,0x1F,0x3C,0x2C,0xB6,0x48,0xF8,0x37,0xF4,0x32,0xD4,
0x37,0xBE,0x22,0xB1,0x21,0x38,0xE,0xD4,0x15,0xEA,0x19,0x7E,0x9,0xF5,0xE,0x21,0x9,0xDA,0x14,0xD6,0x8,0xDF,0xFD,0xB5,0x5,0xA9,0x4,0xBF,0xFA,0xC9,0xFA,0xBB,0xF9,0x9D,
0x3,0x13,0x3,0x89,0xC3,0x83,0xB4,0x4A,0xB0,0x75,0xB1,0x83,0xA8,0x85,0xA6,0x55,0xE2,0x6A,0xFD,0x87,0xB,0xD7,0x19,0xD2,0x31,0xD6,0x48,0x96,0x36,0x73,0x2A,0x59,0x31,0x6D,
0x2A,0xF2,0x17,0x4F,0x10,0x8C,0x1C,0xA0,0x1A,0xCE,0xC,0xA7,0xA,0x85,0x11,0x4,0xE,0x72,0x4,0x22,0xFE,0xC9,0x4,0xCE,0x7,0x8E,0xF4,0xC0,0xFB,0x23,0xFA,0xF5,0x13,0x5B,
0xE4,0xE,0xA4,0x41,0xBB,0x90,0xB2,0xF9,0xB2,0x35,0x9D,0xA6,0xBF,0xF8,0x0,0xAA,0x8,0xEE,0xE,0xB2,0x22,0x4D,0x3F,0x1,0x45,0x7E,0x2A,0xD0,0x29,0x22,0x31,0xBB,0x21,0xD,
0x19,0xAC,0x12,0xCB,0x1C,0xA8,0x18,0x5C,0xA,0xFD,0x8,0xB1,0xC,0x6D,0x13,0xE7,0x2,0x8F,0xF8,0x7,0x6,0x77,0xFD,0xA4,0xFE,0xFA,0xEE,0x8B,0xD,0x72,0xFF,0x96,0xB1,0x68,
0xB8,0x40,0xB3,0x93,0xBA,0x15,0xA5,0x65,0xB3,0xC7,0xED,0xB9,0x0,0x50,0x13,0x77,0x19,0x57,0x31,0xD0,0x41,0x53,0x34,0xC8,0x27,0xE,0x27,0xF1,0x29,0xE3,0x22,0xF1,0x11,0x39,
0x12,0x18,0x1A,0xE0,0x16,0xEE,0xA,0x18,0x9,0x45,0x11,0x97,0xD,0xFB,0xFC,0x39,0xFD,0x3E,0xFA,0x51,0xFF,0xC6,0xF5,0x31,0x1,0x56,0x3,0xC8,0xC4,0xDF,0xB6,0x91,0xB4,0x2C,
0xBB,0xDF,0xB2,0x56,0xAC,0xBE,0xDB,0x4B,0x2,0xE8,0xE,0x28,0x17,0x1,0x20,0x42,0x39,0xB6,0x3E,0xBE,0x2A,0x22,0x28,0x44,0x24,0xDE,0x28,0x5E,0x1C,0x8F,0xE,0xE9,0x18,0xDF,
0x15,0x69,0x12,0x30,0x9,0x41,0x4,0x2B,0xF,0x6,0x1,0xE2,0x1,0x16,0xF4,0x13,0xFA,0x8B,0x3,0xD4,0xFF,0x4A,0xF9,0x54,0xC7,0x5A,0xC1,0x40,0xB4,0x5A,0xAD,0xF5,0xB2,0x3B,
0xBA,0x9C,0xD8,0xEC,0xF2,0xBB,0xC,0xAF,0x1B,0xC2,0x21,0x88,0x2C,0x2D,0x36,0x2C,0x37,0xF3,0x2A,0x6D,0x21,0x21,0x23,0x69,0x22,0xBA,0x1A,0x49,0x16,0xA0,0x17,0xF9,0x12,0x6B,
0x10,0x6B,0x1,0x81,0x9,0x96,0x1,0xFC,0x1,0x3F,0xF4,0x6F,0xF9,0xE9,0x0,0x60,0x2,0x18,0xFB,0x5,0xBB,0xF8,0xC0,0x43,0xB5,0xBA,0xBE,0x20,0xB3,0xDA,0xB1,0x2A,0xE2,0xB9,
0xFB,0x4D,0x13,0x2,0x13,0x76,0x1F,0x37,0x36,0xB4,0x3A,0x75,0x2E,0x0,0x27,0x98,0x1E,0x4,0x27,0xB1,0x21,0x56,0x18,0x19,0x18,0xAC,0x13,0x7C,0x18,0x9A,0x11,0x1E,0x7,0xF2,
0x8,0x50,0xFF,0xED,0x3,0xA6,0xF3,0x6E,0xFB,0x5C,0xFE,0xAF,0x0,0x71,0xF4,0xD4,0xBC,0x90,0xBD,0x7,0xB9,0x1B,0xC4,0xB3,0xB7,0x9A,0xBB,0x17,0xDC,0x81,0x0,0x3B,0x14,0x2,
0x18,0x2C,0x1F,0x7A,0x2D,0xD6,0x3E,0x2B,0x31,0x28,0x2B,0x63,0x1C,0xF4,0x28,0x56,0x24,0xC6,0x18,0xF1,0x15,0x5F,0xF,0xB0,0x18,0x1B,0xD,0xE2,0x6,0x42,0x6,0x98,0x3,0xC4,
0x2,0xAE,0xF1,0x90,0xFD,0x3,0xFD,0x4E,0x3,0x7A,0xE4,0x23,0xBB,0xFD,0xC0,0x21,0xB5,0xEF,0xC0,0x12,0xB3,0xCB,0xC6,0xD,0xE6,0x66,0x3,0x1F,0x13,0x7E,0x13,0x86,0x20,0xD8,
0x2E,0x70,0x3A,0x1D,0x30,0xCB,0x29,0x6F,0x1F,0x38,0x28,0x15,0x22,0x41,0x1D,0xE1,0x12,0x5F,0x10,0x3F,0x17,0x6C,0xB,0xD3,0x6,0xAE,0xFC,0x4B,0x2,0xA7,0xFA,0xBD,0xF6,0x44,
0xFD,0x4E,0xFB,0x96,0xFC,0x2C,0xD3,0x9B,0xB9,0x32,0xB5,0xE4,0xBD,0x82,0xBE,0x11,0xB8,0x5B,0xCB,0x81,0xEC,0x66,0xD,0xD6,0xF,0x84,0x1A,0x22,0x21,0x4D,0x36,0x2D,0x38,0xF1,
0x2F,0x97,0x24,0x85,0x1C,0xA6,0x29,0x42,0x20,0x30,0x1C,0x7E,0xF,0xE5,0xF,0x7A,0x11,0xB3,0xB,0x11,0x5,0x22,0xFD,0x79,0x0,0x22,0xF9,0xB9,0xFD,0x7A,0xF5,0xD7,0xFA,0xD6,
0xF1,0x4,0xC8,0x83,0xBE,0x53,0xB3,0xD3,0xBE,0x96,0xBC,0xF1,0xBE,0xE0,0xD8,0x9D,0xED,0x31,0xC,0x7E,0x17,0x65,0x1B,0xD7,0x26,0xDC,0x31,0x12,0x37,0x62,0x31,0xD1,0x22,0xE1,
0x23,0xA3,0x22,0xBF,0x1E,0xE2,0x19,0x90,0xC,0x6,0xF,0x29,0x10,0xD9,0xB,0x92,0x4,0x78,0xFC,0x33,0xFF,0xDC,0xF9,0xA7,0xFC,0x60,0xF8,0x2F,0xFE,0x19,0xE6,0xAD,0xC3,0xEA,
0xB7,0x90,0xB4,0xA4,0xC7,0x6E,0xBB,0xC3,0xC7,0xBF,0xD8,0xE9,0xF8,0x2A,0x11,0xB4,0x14,0x59,0x1F,0xDC,0x28,0xAA,0x35,0x95,0x36,0x82,0x2F,0x16,0x22,0xAC,0x23,0x5B,0x1F,0x40,
0x1F,0xC9,0x15,0x4A,0xF,0x79,0xF,0xCF,0xA,0xE5,0x9,0x99,0x3,0x51,0xFE,0xD7,0xF6,0xC2,0xF5,0x7F,0xFE,0x4A,0xFD,0xBB,0xF4,0x3F,0xD6,0x78,0xBE,0x21,0xBF,0x11,0xBB,0x2,
0xBD,0x87,0xBD,0x4E,0xCD,0x7E,0xE9,0xE5,0x0,0xD5,0x10,0x7,0x1B,0xEF,0x23,0x25,0x2F,0xDD,0x33,0xBA,0x2F,0xFE,0x2A,0x42,0x24,0x8C,0x23,0xF8,0x20,0x8E,0x19,0x88,0x14,0x6D,
0xE,0x4E,0xC,0x23,0x8,0x31,0x2,0xE8,0x2,0x43,0xFD,0x41,0xF5,0x45,0xF6,0x6D,0xF5,0x63,0xFB,0x6E,0xEE,0xC4,0xCC,0xDB,0xC1,0x3F,0xBB,0xFD,0xC2,0x2A,0xC2,0xE,0xC3,0x98,
0xD7,0x5A,0xEA,0x2B,0x6,0x9F,0x12,0x6D,0x1B,0x9D,0x27,0x5D,0x2D,0xB,0x33,0x86,0x30,0x8,0x28,0xB3,0x24,0x88,0x22,0x66,0x1E,0xD,0x1C,0x1C,0x14,0x7,0xE,0xA6,0x8,0x8D,
0x4,0x9F,0x6,0x99,0x0,0x52,0xFC,0xAF,0xF2,0xC2,0xF9,0x82,0xF9,0xD0,0xF9,0x10,0xE9,0x12,0xC5,0x2D,0xC9,0xEC,0xBD,0x39,0xC3,0xDA,0xBE,0xCB,0xC6,0xAA,0xDE,0xC2,0xF1,0xA0,
0x8,0x44,0xE,0xF5,0x1B,0x28,0x27,0xFA,0x33,0x1C,0x31,0x36,0x31,0x32,0x29,0x72,0x27,0xAC,0x24,0x8E,0x1B,0x3D,0x18,0x30,0xF,0x78,0xF,0x6C,0x7,0x3,0x3,0x20,0x1,0x16,
0xFF,0x53,0xFF,0x34,0xF6,0xAD,0xFA,0xD5,0xF2,0x12,0xF8,0x64,0xEA,0x9C,0xCE,0xCB,0xCC,0x1D,0xBD,0x9D,0xC7,0xAB,0xC3,0x2A,0xCD,0x76,0xDB,0x73,0xEE,0xDE,0x2,0xD0,0xF,0x54,
0x1B,0x54,0x26,0xE9,0x30,0xAB,0x2E,0x39,0x34,0xA1,0x26,0x63,0x28,0x3B,0x20,0xDB,0x1D,0x68,0x17,0xD5,0x10,0xC9,0xE,0xDC,0x8,0x2B,0x5,0x3,0x3,0x26,0x2,0xA8,0xFD,0xD5,
0xF9,0x1,0xF8,0xC7,0xFA,0x46,0xF5,0x77,0xEE,0x7A,0xD6,0x9F,0xD4,0xF6,0xC4,0xD5,0xC5,0x4C,0xC7,0xD8,0xCC,0xE8,0xDB,0xFB,0xE6,0x59,0xFD,0xA2,0x6,0x3B,0x18,0xB4,0x1E,0xD6,
0x2C,0x1F,0x2A,0xB8,0x34,0x94,0x2D,0xA1,0x29,0x17,0x23,0x5C,0x1D,0x4F,0x1D,0xB9,0xF,0x2E,0x11,0x5,0x6,0xCD,0x7,0x97,0x3,0xB9,0x3,0xDA,0xFE,0x6A,0xFD,0x7A,0xF6,0xFE,
0xF9,0x73,0xF6,0x37,0xF6,0x67,0xEB,0xCD,0xD8,0xB4,0xD2,0xF5,0xC6,0x35,0xCC,0x36,0xC9,0x27,0xD4,0x51,0xDA,0x5B,0xF0,0xF7,0xFB,0x5A,0xC,0xC6,0x15,0x9B,0x20,0x23,0x29,0xAA,
0x29,0x91,0x31,0x31,0x28,0x2A,0x2A,0xA4,0x20,0xB1,0x22,0xE0,0x13,0x6E,0xE,0x9,0xA,0xA3,0x5,0x30,0x4,0x62,0xFE,0x54,0x1,0x5D,0x0,0xD,0x3,0x5E,0xFD,0x12,0xF9,0x57,
0xF6,0xE4,0xF7,0xE7,0xE9,0x6,0xDC,0x65,0xD0,0x51,0xCB,0x65,0xCB,0x55,0xCD,0x5E,0xD4,0x7D,0xDD,0xE5,0xEC,0xC0,0xFC,0xC,0xB,0x6C,0x15,0xF9,0x20,0xA0,0x26,0x19,0x2B,0x3A,
0x2C,0x5F,0x2A,0x67,0x27,0xC6,0x21,0x69,0x1B,0x79,0x13,0x67,0xB,0x5D,0x7,0xB6,0x2,0x77,0x1,0xCB,0x1,0x71,0x4,0x96,0x3,0x4D,0x4,0x87,0x0,0x84,0xFD,0xB7,0xF9,0xFB,
0xF4,0x31,0xF0,0x72,0xDF,0x85,0xD8,0xED,0xCC,0x1E,0xD0,0xAA,0xD0,0x21,0xD5,0xEC,0xDB,0xE5,0xE9,0xF9,0xF9,0x62,0x2,0x13,0xE,0x92,0x14,0xB,0x21,0xF3,0x21,0xA3,0x25,0x5A,
0x25,0x61,0x26,0x1D,0x21,0x23,0x1D,0x12,0x17,0xCB,0xE,0xD1,0xC,0x1D,0xA,0x7F,0x7,0xBD,0x2,0xFE,0x3,0x55,0x6,0x1,0x6,0x8,0x1,0x2E,0xFC,0x65,0xFA,0x69,0xF6,0xF8,
0xF0,0xBB,0xEC,0x95,0xE4,0xDD,0xE0,0xAD,0xDA,0x53,0xD8,0x42,0xDB,0x24,0xDF,0x4E,0xE4,0xD9,0xEA,0xE3,0xF4,0x33,0xFD,0x70,0x5,0xC0,0xD,0xC5,0x15,0x4B,0x1A,0x7,0x20,0x30,
0x23,0xBD,0x1F,0xDA,0x1F,0xE5,0x1B,0x10,0x1A,0x45,0x16,0x4E,0x10,0xFE,0xD,0xA,0x8,0x1A,0xC,0x2A,0xC,0x71,0xA,0x7E,0xC,0x4A,0xA,0x88,0x6,0xED,0x0,0xB0,0xFE,0xBC,
0xF7,0x72,0xED,0x80,0xEC,0x5F,0xE9,0xAF,0xE0,0xC5,0xD5,0xB6,0xD1,0xDA,0xD1,0xBA,0xD5,0x72,0xDA,0x9F,0xE1,0x81,0xEE,0x3D,0xF7,0x4B,0x5,0xF0,0xE,0x6E,0x18,0x93,0x1F,0xE5,
0x23,0xFB,0x26,0x56,0x26,0xC1,0x21,0xAA,0x1E,0x3A,0x1A,0xDC,0x12,0x30,0xF,0x44,0xA,0x61,0x9,0x6,0x2,0x25,0x0,0x44,0x0,0x96,0x0,0x9F,0xFE,0x75,0xFB,0x14,0xF8,0x2C,
0xF5,0xF,0xF9,0xC,0xEB,0xDC,0xDA,0x87,0xCE,0xB3,0xC8,0x7C,0xC7,0x39,0xC5,0x3D,0xC5,0xA8,0xCB,0x7,0xDD,0x35,0xF0,0x32,0xFE,0x61,0x9,0xD,0x19,0x6B,0x28,0x7A,0x33,0xBE,
0x35,0x81,0x35,0x20,0x30,0x25,0x2B,0x82,0x26,0x40,0x17,0x9A,0xC,0x2A,0x9,0x2E,0x5,0x9A,0x2,0x84,0xFF,0x2D,0xFF,0x2D,0x2,0xBC,0x4,0x98,0x1,0xC2,0xFE,0x2,0xFB,0xE4,
0xF6,0x10,0xF8,0xD0,0xEC,0x7F,0xDD,0xA4,0xD3,0x66,0xCD,0xEB,0xCA,0xFC,0xC8,0x75,0xC9,0x2E,0xD5,0xBF,0xE2,0xA3,0xF0,0xB2,0xFE,0x4D,0x9,0x7C,0x1A,0x40,0x29,0x95,0x32,0x18,
0x35,0x6,0x33,0xD1,0x31,0x98,0x2D,0x3D,0x21,0x8A,0x14,0xB2,0xE,0xE2,0xA,0x7C,0x5,0x70,0x1,0x79,0x1,0x9F,0x2,0xB5,0x2,0x5B,0x5,0x23,0x3,0xB8,0xFD,0x55,0xFC,0x53,
0xF8,0x2E,0xF8,0xD4,0xEE,0x8F,0xE1,0xD6,0xDD,0x3E,0xD9,0x30,0xD6,0xE7,0xD2,0x5E,0xD2,0x14,0xD8,0x9A,0xE2,0xA3,0xED,0x70,0xF8,0xAB,0x2,0x2C,0x10,0x99,0x23,0x21,0x28,0xB2,
0x26,0xC2,0x2C,0x99,0x29,0xA,0x25,0x3A,0x21,0xC6,0x15,0x52,0x11,0xB3,0xB,0x81,0x7,0xB5,0x5,0x37,0x3,0xD5,0x6,0xFE,0x3,0xB9,0x6,0xFC,0x4,0xD7,0xFC,0xAA,0xFB,0x13,
0xFB,0x62,0xF6,0xC2,0xF0,0xD,0xF1,0xD4,0xEB,0xEC,0xE5,0xCB,0xE6,0x52,0xE7,0x1F,0xE8,0x7C,0xE9,0xAE,0xEB,0x83,0xF0,0xBB,0xF3,0xF9,0xF8,0x80,0xFE,0x86,0x0,0x20,0x4,0x91,
0xA,0xC7,0xF,0xDB,0x14,0x73,0x17,0x6B,0x16,0xD1,0x18,0xA7,0x15,0x9D,0x12,0x32,0x14,0x42,0x11,0xEB,0xD,0x50,0xF,0x25,0x10,0x8D,0xA,0xFA,0x5,0x86,0x6,0x84,0x3,0x6A,
0xFF,0x7B,0xFF,0x42,0xFB,0x60,0xF8,0xE7,0xF7,0x62,0xF5,0xC3,0xF3,0xF7,0xEF,0x53,0xEE,0x51,0xF2,0x83,0xF2,0xCC,0xEE,0x2,0xF0,0x41,0xF4,0x38,0xF6,0x31,0xF4,0xC8,0xF4,0x54,
0xF8,0xDB,0xF9,0x9A,0xF9,0xF3,0xFB,0x9D,0xFF,0x56,0x2,0x3A,0x4,0x47,0x7,0xBF,0x9,0xDD,0xB,0xE,0x10,0xF6,0xE,0xFC,0x12,0x83,0xE,0xAB,0xB,0xB7,0x12,0x77,0x9,0xF9,
0x4,0xFD,0x6,0x9F,0x4,0x70,0x0,0xB6,0xFE,0x67,0x2,0xDB,0xFD,0x59,0xF9,0xDD,0xFB,0xDF,0xF9,0x9D,0xF6,0x4F,0xF6,0xD6,0xF5,0x9C,0xF4,0x33,0xF6,0x9B,0xF5,0x50,0xF3,0x5B,
0xF2,0xA9,0xF0,0x19,0xF1,0xA9,0xF2,0x2D,0xF2,0x38,0xF1,0x21,0xF6,0x8B,0xF8,0x4B,0xF8,0x8B,0xFA,0x72,0xFD,0x58,0x4,0x8C,0x7,0x96,0x5,0x54,0x8,0x7,0xB,0xA4,0xC,0xA4,
0xD,0x25,0xF,0xB7,0xD,0x3D,0xD,0x49,0xE,0x50,0x6,0x26,0xA,0x8A,0x9,0x2B,0x3,0xDD,0x2,0xFC,0x2,0xB5,0x3,0x19,0xFE,0x2,0xFE,0x53,0xFE,0x47,0xFB,0x29,0xFB,0xFC,
0xF8,0x7C,0xF7,0x5D,0xFB,0xA4,0xF6,0xB3,0xF5,0x94,0xF7,0x11,0xF6,0xDC,0xF7,0x4F,0xF3,0x58,0xF3,0xD2,0xF5,0xE1,0xF6,0xC9,0xF9,0x35,0xF9,0x3C,0xF8,0xFD,0xFD,0x48,0xFE,0x8E,
0xFE,0x5,0x2,0x7E,0x2,0x46,0x8,0xC9,0x7,0xB0,0x7,0xEA,0xB,0xF4,0xB,0x8E,0xD,0xE1,0xA,0x32,0x9,0x5E,0xE,0xAA,0xB,0xCD,0x9,0x60,0x8,0x2A,0x6,0x42,0x5,0xDD,
0x0,0xA2,0x4,0x4F,0x1,0x4A,0xFC,0xA,0xFE,0x8E,0xFE,0xAC,0xFD,0x87,0xF8,0x58,0xFC,0x67,0xFB,0x0,0xFB,0x9A,0xFB,0xC5,0xF9,0xB5,0xFB,0xA3,0xF6,0x8A,0xFB,0xF,0xFA,0x53,
0xF5,0xB5,0xF8,0x2,0xF8,0x23,0xF9,0x58,0xF9,0x62,0xFA,0x6B,0xFD,0x39,0xFA,0xBA,0xFB,0x31,0x2,0x47,0x2,0x30,0x6,0x53,0x2,0x0,0x3,0x66,0xB,0x5A,0xA,0xFA,0xA,0x58,
0x7,0xB8,0x9,0x1,0xD,0x6E,0x8,0xDA,0xB,0xF9,0x9,0xB4,0x6,0xAA,0x4,0xF3,0x6,0xF7,0x4,0x72,0xFC,0xD2,0x3,0xE2,0x2,0x35,0xFC,0x34,0xFC,0xB2,0xFF,0xA4,0xFF,0x55,
0xFC,0xD3,0xFA,0xC9,0xFC,0xC7,0xFD,0xF1,0xF9,0x69,0xF9,0x4B,0xF8,0x5F,0xFA,0xCF,0xF9,0x19,0xF7,0x2C,0xF6,0xB6,0xF7,0x1E,0xF9,0x88,0xFA,0x26,0xFD,0xD0,0xF9,0x75,0xFA,0xF4,
0xFD,0xCC,0xFF,0x64,0x3,0x82,0x2,0x79,0x3,0x65,0x6,0x9D,0x8,0xEE,0x8,0x54,0x7,0x69,0x8,0x14,0xA,0xE2,0x8,0x6D,0x9,0xB5,0xA,0x6C,0x7,0xEE,0x9,0xAB,0x9,0x4C,
0x3,0x85,0x6,0x69,0x3,0xF5,0x0,0x36,0x3,0x84,0xFE,0xC4,0x3,0xC8,0xFD,0x3B,0xFB,0xE4,0xFD,0x27,0xFB,0x1E,0xFC,0x7F,0xF8,0xC1,0xF8,0xCA,0xFC,0x2F,0xFD,0xA0,0xF9,0xD2,
0xF8,0x75,0xF8,0x23,0xF9,0xD4,0xF5,0x6A,0xF9,0xA4,0xF8,0x4A,0xF6,0x4B,0xF9,0x1,0xF9,0x75,0xFA,0x48,0xFA,0xC0,0xFE,0xB5,0xFF,0xF2,0x0,0xC9,0x1,0x49,0x3,0x46,0x6,0xD5,
0x2,0x5B,0x7,0xF1,0x9,0xE1,0x9,0x88,0x8,0x26,0x7,0xE4,0xA,0xAD,0xA,0xA0,0xB,0xDE,0x6,0x5C,0x9,0xE6,0x5,0x23,0x6,0xE8,0x7,0xFE,0x0,0x9D,0x5,0x88,0x1,0x5C,
0x2,0x49,0x0,0x5D,0xFF,0xBB,0xFF,0x42,0xFC,0x1,0xFF,0x74,0xFB,0x93,0xFE,0x40,0xFE,0x7E,0xF7,0xCA,0xFA,0xA8,0xFE,0xDE,0xFB,0xA1,0xF6,0x71,0xF7,0xB2,0xFA,0x85,0xFA,0xD3,
0xF8,0x2A,0xF7,0xAC,0xF9,0x21,0xF8,0x11,0xF9,0x84,0xFA,0xEE,0xF8,0xF4,0xFA,0x2B,0xFC,0xA7,0xFC,0x32,0xFE,0xDA,0xFF,0xA8,0xFD,0x76,0x2,0x1B,0x6,0xC1,0x4,0x3,0x7,0xF0,
0x9,0x59,0x9,0x1B,0xC,0x3A,0xA,0x66,0xA,0x36,0xC,0x96,0x7,0xA8,0xE,0x29,0xD,0x3E,0x3,0x1,0x8,0x8,0xD,0x3,0x2,0x6,0x4,0x39,0x4,0xB5,0x0,0x34,0xFF,0xA7,
0xFD,0x4E,0x0,0x7,0xFA,0x8E,0xFD,0x12,0xFA,0x82,0xFC,0x21,0xFF,0xBE,0xF6,0xF5,0xF7,0x7A,0xF8,0x77,0xFB,0x73,0xFB,0x1F,0xF6,0xBA,0xF4,0x32,0xF8,0x25,0xF8,0xE7,0xF2,0x61,
0xF5,0x8,0xF6,0xA3,0xF8,0xF9,0xF8,0x4D,0xF7,0xB8,0xFD,0x18,0xFD,0x5D,0x0,0x6F,0x3,0xA1,0x6,0xB2,0xA,0x2F,0xD,0x47,0xB,0xD7,0xC,0x97,0x12,0xF,0xF,0xEE,0xA,0x98,
0xB,0x8D,0xA,0x2,0x8,0xD8,0x9,0xF2,0x3,0x62,0x9,0x77,0x6,0x43,0x3,0xEA,0x4,0x95,0xFF,0x45,0x0,0x9E,0x0,0x0,0xFC,0xC,0xF7,0x4F,0x0,0x2,0xFA,0x28,0xFF,0x99,
0xFA,0x86,0xF1,0x2D,0xFC,0xF0,0xFC,0x1B,0xFC,0xC9,0xF3,0x20,0xF1,0xCE,0xF5,0xC6,0xF9,0x2B,0xF2,0x19,0xEE,0x61,0xF0,0x1B,0xF4,0x1D,0xFB,0x6,0xFA,0xCF,0xF6,0x7,0xFF,0x1E,
0x6,0x43,0x7,0xDC,0x7,0x9B,0x9,0x9C,0xC,0x3B,0x10,0x40,0x12,0x83,0xD,0xA2,0x10,0x5E,0xE,0xE9,0xD,0xFA,0xB,0x64,0xA,0x52,0xC,0x12,0x4,0x82,0x2,0xD7,0x7,0x2D,
0x3,0x35,0xFD,0xF3,0xF9,0x18,0x0,0xCC,0x6,0x76,0xF8,0xA2,0xF6,0x87,0xFC,0x47,0xFF,0x3E,0xFB,0xC8,0xF5,0xA4,0xF3,0x76,0xF5,0x37,0xFB,0x7D,0xF5,0x49,0xEC,0x39,0xEC,0xA4,
0xF0,0x21,0xF2,0x37,0xF3,0xBB,0xED,0xF7,0xEC,0x34,0xF6,0xE7,0xFD,0xA7,0xFE,0x37,0xFE,0xC9,0x1,0x91,0xD,0x7B,0x11,0xB3,0xE,0x5E,0x10,0x4C,0x12,0xF6,0x14,0xF3,0x15,0xD6,
0xE,0xE2,0x9,0x99,0xD,0xAF,0xE,0x35,0x8,0x14,0x3,0x80,0xB,0x77,0x5,0xB8,0x1,0xF2,0x4,0x89,0xFD,0x42,0xFE,0x85,0x2,0xF0,0x0,0xDD,0xFE,0xB9,0xFA,0x84,0xFB,0xE2,
0xFC,0x9E,0xF6,0xF9,0xF1,0xF,0xF0,0x9D,0xF5,0x5C,0xF3,0xE9,0xE9,0x18,0xE5,0x1,0xE6,0x46,0xEA,0x1E,0xEE,0x77,0xEA,0xD4,0xE8,0x46,0xF2,0x39,0xFC,0x6,0x2,0xE9,0x1,0x86,
0x4,0x0,0x12,0x89,0x18,0xA4,0x15,0x5C,0x16,0xF0,0x17,0x1A,0x1C,0x5A,0x1B,0x10,0x12,0xD3,0x10,0xEB,0xF,0x7C,0x8,0xE2,0x6,0xA3,0x0,0x77,0x4,0x34,0x6,0xC4,0xFF,0xDA,
0x4,0x8F,0x4,0xA4,0xFD,0xE4,0xFB,0xBE,0xF7,0x54,0xFB,0xD3,0xF6,0xB9,0xF0,0x68,0xF1,0xB7,0xE8,0xFD,0xF5,0xD1,0xF4,0xE3,0xE8,0xC5,0xE6,0x3B,0xE8,0xF,0xEB,0xFA,0xE7,0xB8,
0xE4,0xEF,0xE3,0xFF,0xEE,0xAA,0xF4,0xFC,0xF5,0xCC,0xFF,0xB2,0x4,0xE4,0xD,0xE,0x1C,0x87,0x1B,0xDF,0x20,0xAF,0x26,0x8,0x23,0x65,0x23,0x67,0x1D,0x1D,0x10,0x94,0xF,0x6B,
0xB,0x89,0x2,0xBC,0x2,0x54,0xFE,0x69,0xFF,0xB1,0x4,0xA7,0x3,0x24,0x2,0xBF,0x1,0xA7,0x5,0x7E,0x3,0xE6,0xFC,0xA6,0xF8,0x32,0xFA,0xDD,0xF8,0x53,0xEB,0xE1,0xEE,0x8B,
0xED,0x8D,0xDF,0x8,0xDD,0x17,0xDC,0xA,0xD8,0x0,0xDB,0x24,0xE0,0xBA,0xDE,0xCC,0xEA,0xBD,0xF1,0x61,0xFA,0xD,0x11,0xF7,0x10,0xB6,0x16,0x70,0x29,0xF2,0x29,0x8,0x2E,0x62,
0x2F,0xB0,0x21,0x1C,0x25,0x57,0x1F,0x89,0xD,0x80,0x6,0xBF,0xFF,0xC6,0xFB,0x87,0xFE,0x1F,0xF9,0x63,0xF7,0x92,0xFF,0x7,0x5,0x2B,0x9,0xB6,0x0,0xBF,0x3,0x38,0x4,0x4A,
0x6,0x4C,0xF9,0x2,0xF8,0xAC,0xF2,0x6F,0xE7,0xC1,0xF6,0x3,0xE2,0x1F,0xD2,0x24,0xD5,0x50,0xD7,0xF2,0xD9,0x93,0xDB,0x71,0xD4,0x2,0xE0,0xE7,0xF2,0xA1,0xFA,0xE8,0x6,0x8E,
0x11,0x3,0x18,0x76,0x29,0x25,0x35,0x19,0x2E,0x3E,0x34,0xB1,0x32,0x95,0x2A,0xA0,0x26,0xAC,0x13,0x54,0x8,0x9A,0x6,0xA1,0xF6,0x22,0xF7,0xBA,0xF8,0x7C,0xF2,0xCD,0xF9,0xFB,
0xFF,0x14,0x4,0x27,0x7,0x75,0x8,0xB,0x3,0xD7,0x7,0xF6,0xFF,0xEF,0xF7,0x20,0xFB,0x16,0xEB,0xEE,0xF2,0x42,0xEC,0x3A,0xD1,0x3C,0xD0,0xFB,0xD3,0xFB,0xCF,0x8A,0xD3,0x34,
0xD1,0xF2,0xD1,0x84,0xEB,0x9C,0xF7,0x61,0xFD,0xF5,0x10,0xE0,0x19,0x52,0x28,0x24,0x3E,0xA8,0x36,0x37,0x39,0x89,0x3C,0xB7,0x31,0x33,0x2D,0xD2,0x1A,0x62,0x7,0x49,0x3,0xA,
0xF9,0x23,0xEE,0xA2,0xF1,0x68,0xED,0xD4,0xF4,0xEF,0xFD,0x38,0xFE,0xF0,0x7,0x5D,0xD,0x16,0x9,0x3E,0x9,0xAF,0x1,0x7D,0xF9,0x31,0x0,0x61,0xEB,0x64,0xEB,0x69,0xEE,0x8,
0xD1,0x98,0xCC,0xC3,0xCF,0x58,0xC9,0x80,0xCF,0x5,0xD1,0x8D,0xCD,0xCE,0xE8,0x38,0xF6,0x3,0xFF,0xE9,0x15,0x7C,0x1B,0x7B,0x2E,0xD1,0x41,0x5F,0x3D,0x21,0x3D,0x18,0x3E,0x4E,
0x38,0x3D,0x2F,0x32,0x1C,0xF2,0x7,0x5A,0x2,0x21,0xF8,0xA2,0xEA,0x82,0xEB,0x93,0xEB,0x2B,0xEE,0xA,0xF7,0x63,0xFE,0x3F,0x3,0x4B,0xD,0xCE,0x8,0x40,0x9,0x2D,0x8,0x7E,
0xFD,0x2F,0x0,0xBE,0xED,0x3C,0xF5,0x3C,0xEE,0xB3,0xC6,0xAE,0xC5,0x1B,0xCC,0xF8,0xC8,0xD,0xC8,0xF3,0xC3,0x97,0xCC,0x2A,0xF0,0x18,0xFB,0x8A,0x1,0x62,0x19,0x0,0x28,0x65,
0x3F,0xB9,0x4A,0xE1,0x3D,0xAB,0x42,0x47,0x45,0xC3,0x39,0x94,0x2B,0xB7,0x13,0xA5,0x2,0xA9,0xFF,0x3F,0xF3,0xF5,0xE6,0x4D,0xE7,0xEC,0xE8,0xF1,0xF4,0x2B,0xFA,0x26,0xFE,0x6F,
0x8,0x53,0x13,0x9A,0xC,0x4E,0xA,0x31,0x0,0x3C,0x1,0xA8,0xFD,0xE8,0xE9,0x8C,0xF7,0x76,0xDC,0xA2,0xC1,0xEE,0xC4,0xA0,0xC3,0x60,0xC0,0xD0,0xC4,0x83,0xC1,0xC5,0xD8,0xA7,
0xFA,0x30,0xFE,0x2,0x16,0xD3,0x24,0xFC,0x33,0x79,0x4D,0xE7,0x48,0xB0,0x3F,0x95,0x44,0x4A,0x38,0x74,0x2D,0xA8,0x1B,0x88,0x1,0x9E,0xF9,0x4F,0xF3,0xE6,0xE7,0xA0,0xE7,0x42,
0xEA,0x97,0xF1,0xC3,0xFC,0xE1,0x2,0x9,0xB,0x9A,0x13,0x11,0x11,0x7A,0x5,0xA3,0xA,0x27,0xF7,0xE0,0xF6,0xAD,0xEB,0xD2,0xE1,0xD9,0xF5,0x59,0xD6,0xD3,0xBE,0xD0,0xC5,0x4,
0xCB,0x6,0xCA,0x7,0xC8,0xAB,0xC2,0x37,0xE6,0x45,0xFE,0x2,0x1,0x2C,0x13,0xE6,0x20,0xB0,0x3B,0x7C,0x4C,0x91,0x41,0xB8,0x3B,0x52,0x45,0xE0,0x3D,0xAA,0x2F,0xC9,0x15,0x3B,
0x7,0x56,0x3,0xB7,0xF8,0xD3,0xE7,0xB5,0xE8,0xF0,0xF1,0xB4,0xF5,0xF6,0xF9,0xFF,0xFF,0x9F,0xE,0x3E,0x12,0x95,0xA,0xA2,0x3,0x45,0x5,0xBE,0xF6,0x7C,0xF8,0x18,0xE7,0xB1,
0xEB,0xF5,0xF3,0x66,0xCB,0x78,0xBF,0x7,0xC8,0xEE,0xC8,0xBD,0xC6,0xF3,0xC2,0x3,0xC9,0x6E,0xF0,0xF,0x0,0xBE,0x5,0x1D,0x19,0xB2,0x30,0xF4,0x43,0x5,0x49,0x2A,0x42,0xF7,
0x42,0xDB,0x44,0xA7,0x35,0xCE,0x22,0x6E,0x12,0x8,0x5,0x3C,0xFB,0x78,0xED,0x9D,0xE4,0xBF,0xEE,0x64,0xF1,0x5D,0xF5,0xDF,0xFC,0xF9,0xA,0x72,0x11,0x83,0xF,0x9A,0x6,0xE3,
0x3,0xE7,0xFD,0x3B,0xF6,0x60,0xED,0xCA,0xE4,0x71,0xF4,0xBF,0xDB,0xED,0xC1,0x1B,0xC6,0xC,0xC8,0x5,0xC9,0xEA,0xC3,0x4E,0xC8,0xFC,0xE7,0x9E,0xFF,0x1D,0x5,0x8A,0x15,0xD6,
0x2C,0xDD,0x42,0xE,0x49,0x20,0x3F,0x85,0x3E,0x2C,0x42,0x22,0x33,0xB3,0x1F,0xE0,0x11,0xFA,0x8,0x92,0xFD,0xF0,0xEE,0x16,0xEB,0xD9,0xF6,0x6A,0xF7,0x13,0xF9,0x2,0x2,0x1B,
0xD,0xEB,0x15,0xC3,0xC,0x4E,0x5,0xD1,0x3,0x8C,0xFC,0x34,0xED,0xE,0xE9,0x1,0xE0,0x8B,0xEF,0x73,0xEB,0x3E,0xC4,0x21,0xC6,0xA8,0xCE,0xED,0xCA,0x92,0xC3,0x22,0xC1,0x7,
0xDC,0xC,0xFB,0x82,0xFA,0xA5,0x6,0x66,0x23,0x6A,0x3B,0x59,0x43,0xDF,0x3D,0xB7,0x3E,0x1,0x48,0x1E,0x3D,0x67,0x27,0x6,0x1E,0x62,0x16,0x3E,0xB,0x66,0xF4,0x85,0xEE,0x85,
0xF3,0xA9,0xF9,0xA2,0xF1,0x48,0xF7,0x76,0x6,0xCD,0x11,0x16,0x9,0xCA,0x4,0xB2,0xB,0xBE,0x4,0xFC,0xF4,0x23,0xE2,0x6F,0xF4,0xD7,0xE6,0xB7,0xF1,0x7C,0xE0,0x2A,0xC5,0xED,
0xD6,0x80,0xCB,0x8E,0xC2,0x4A,0xBF,0xAE,0xC9,0x61,0xE0,0xC4,0xF0,0x7B,0xF1,0xF,0xF,0x8E,0x26,0x7B,0x34,0xBA,0x3C,0x2E,0x41,0xDD,0x48,0xE8,0x44,0xCA,0x36,0x75,0x2C,0x41,
0x27,0x50,0x15,0x5D,0x3,0xEA,0xF6,0xE4,0xF5,0xE7,0xF2,0xDF,0xF1,0x52,0xF0,0xC1,0x0,0x44,0x3,0x99,0xA,0x9F,0x9,0x7A,0x8,0x6D,0xB,0xB,0xFD,0xEB,0xF1,0xEC,0xEA,0xA1,
0xF2,0xD9,0xE1,0x4F,0xF2,0xCE,0xDF,0x80,0xC9,0xC6,0xD3,0x5A,0xC7,0xE0,0xC5,0x87,0xC0,0x95,0xC8,0xC6,0xE2,0x41,0xEE,0x17,0xF5,0x8D,0x10,0x8E,0x23,0x55,0x34,0x83,0x3B,0xB6,
0x40,0xD9,0x49,0xF5,0x41,0x95,0x37,0x91,0x2F,0xD,0x27,0xAD,0x14,0xAD,0x1,0xE0,0xF8,0x33,0xF5,0x92,0xF1,0xD0,0xEC,0xF7,0xF3,0x56,0xFE,0x49,0x1,0x6,0x8,0x69,0x8,0x2F,
0x9,0x56,0x5,0x49,0xFC,0x21,0xF4,0x7,0xED,0x75,0xEE,0xD2,0xE1,0x44,0xF2,0x80,0xE0,0x9D,0xC9,0x28,0xD6,0x91,0xC8,0xA5,0xC5,0x1E,0xC1,0xB8,0xC8,0xD0,0xE1,0x63,0xE8,0x7F,
0xEF,0x2B,0x10,0x38,0x1E,0x91,0x2D,0x4E,0x38,0xF2,0x3D,0x7D,0x4A,0x13,0x40,0x4,0x38,0x1F,0x36,0xAA,0x27,0x1E,0x16,0x81,0x6,0x4E,0xFB,0x4E,0xF9,0xA1,0xEC,0x48,0xED,0x31,
0xF3,0x1A,0xFB,0x50,0xF9,0x47,0x1,0x54,0x4,0x33,0x7,0xD3,0x2,0x23,0xF9,0xE1,0xFC,0x9C,0xEB,0x1E,0xF4,0x5B,0xDF,0xC0,0xF2,0x8C,0xE3,0x45,0xCB,0xA,0xDA,0xB8,0xC6,0x49,
0xCC,0x11,0xC3,0xF7,0xCB,0x34,0xE1,0xBE,0xE7,0xE8,0xEE,0xB8,0xE,0x11,0x18,0x9A,0x28,0xA3,0x33,0x2A,0x39,0xA9,0x47,0x97,0x39,0xF,0x3B,0x11,0x36,0xE3,0x29,0x6C,0x1C,0x7C,
0xB,0xD8,0x2,0x53,0xFD,0x42,0xEF,0x87,0xF5,0xC3,0xF4,0x64,0xF8,0x9D,0xFC,0x85,0xFE,0xDB,0x5,0xD0,0xFF,0x87,0x3,0xA8,0xFB,0x75,0xFE,0x4C,0xED,0xA8,0xF8,0x4E,0xE5,0x6F,
0xF3,0xAD,0xEF,0xB1,0xD2,0xE6,0xE6,0x38,0xC9,0xF7,0xD6,0x91,0xC3,0x94,0xCC,0x2,0xDC,0x0,0xDD,0x33,0xE7,0x9E,0xFF,0x41,0xB,0xFB,0x15,0x78,0x29,0x41,0x2D,0x95,0x43,0x20,
0x35,0x7D,0x42,0x92,0x3C,0xD4,0x32,0xEE,0x2B,0x72,0x18,0x8A,0x13,0xA9,0x4,0xA5,0xF7,0xCB,0xFA,0xBC,0xF2,0xEA,0xF5,0xFE,0xF7,0x47,0xFA,0x4E,0x1,0x8D,0xF9,0xE9,0x3,0xCF,
0xFA,0xB5,0xFF,0xDA,0xF5,0xB,0xFA,0x3F,0xF2,0xC,0xF3,0xB,0xF8,0xC3,0xDF,0xA4,0xEC,0x3B,0xD6,0x67,0xDB,0xE3,0xD0,0x44,0xCE,0x90,0xDF,0x0,0xD9,0x18,0xEB,0xBA,0xF4,0xB8,
0x2,0xBD,0xB,0x23,0x13,0xC2,0x1F,0x49,0x2B,0xE2,0x2C,0xAF,0x33,0x3D,0x34,0xC3,0x2E,0x40,0x2C,0x16,0x1F,0xFB,0x1D,0x18,0x12,0xCE,0x9,0xC5,0xA,0xB3,0x1,0xF1,0x5,0x68,
0xFF,0xB8,0x0,0xDB,0x3,0xA0,0xF9,0xFB,0xFF,0x4D,0xFA,0xFF,0xF9,0xCC,0xF8,0xA9,0xF4,0x6A,0xF8,0x36,0xF1,0x14,0xF6,0x72,0xEF,0x7E,0xE8,0xE,0xE2,0x6B,0xDC,0xE3,0xD7,0x44,
0xD1,0x7A,0xD5,0x35,0xD1,0x6E,0xD9,0x32,0xDD,0x7B,0xED,0x44,0xF7,0x34,0xFF,0x1C,0x12,0x12,0x19,0x97,0x2A,0xE3,0x2F,0x3D,0x38,0xCF,0x3A,0xC9,0x39,0x6F,0x38,0x53,0x30,0x54,
0x29,0x3C,0x1F,0x22,0x15,0x77,0xE,0x12,0x7,0x71,0x1,0xDC,0xFA,0x8E,0xF6,0xBA,0xF4,0xAA,0xEF,0x96,0xF1,0x27,0xEB,0x1D,0xF0,0xF6,0xEE,0x33,0xEF,0xA4,0xF2,0x93,0xF6,0xD4,
0xF1,0xDB,0xE3,0xC3,0xE3,0x71,0xD9,0xA3,0xD3,0xBB,0xCF,0xA1,0xCF,0x81,0xD1,0x80,0xD5,0x18,0xE2,0xE,0xF0,0x48,0xFA,0x16,0x7,0xE4,0x14,0xAD,0x23,0x6A,0x2F,0x75,0x36,0x78,
0x3E,0x3B,0x3E,0xAF,0x3D,0x6B,0x37,0xF4,0x2E,0xB1,0x26,0x1A,0x19,0x12,0x13,0xB4,0xA,0x37,0x4,0x3F,0x0,0x20,0xFA,0xF4,0xF7,0xAA,0xF2,0x91,0xF2,0x4B,0xF0,0xBD,0xEF,0x5D,
0xF1,0xEB,0xF0,0xBF,0xF1,0xD6,0xF0,0x77,0xF8,0x1,0xEE,0x9D,0xE2,0x4B,0xE2,0x11,0xD3,0xDE,0xD2,0x83,0xCC,0xCE,0xCC,0xF5,0xD1,0xC8,0xD3,0x7,0xE6,0xFC,0xEE,0x35,0xFE,0x8D,
0xA,0x67,0x17,0xC6,0x27,0xE5,0x30,0x9A,0x38,0xF9,0x3D,0xAB,0x3D,0x46,0x3C,0x5E,0x35,0xDC,0x2C,0x47,0x23,0xCE,0x17,0x79,0x12,0x99,0x8,0xBF,0x3,0x2A,0xFD,0x8,0xF9,0x85,
0xF7,0xF8,0xF1,0xF2,0xF2,0x26,0xF0,0x18,0xF0,0x44,0xF2,0xE3,0xEF,0xF1,0xF0,0xF7,0xF0,0xCD,0xF6,0x1C,0xEA,0x6F,0xE0,0x8F,0xDE,0xEE,0xD0,0xBF,0xD0,0x35,0xCA,0x7F,0xCD,0xA4,
0xD0,0xEC,0xD5,0x2C,0xE7,0xD3,0xF1,0x52,0xFF,0x95,0xB,0xA6,0x1A,0x68,0x29,0x84,0x31,0xB8,0x3A,0x16,0x3E,0x2E,0x3D,0x59,0x3C,0x7A,0x34,0xD5,0x2C,0x21,0x21,0xE,0x18,0xAA,
0x10,0x6C,0x8,0x1,0x4,0x8F,0xFD,0x61,0xFA,0x6F,0xF6,0xDA,0xF2,0xF9,0xF1,0x8,0xEF,0x38,0xF0,0x67,0xEF,0x38,0xF0,0xCC,0xEF,0x80,0xF3,0xA8,0xF4,0x73,0xE4,0xDB,0xE2,0xAA,
0xD9,0x5,0xD1,0xF9,0xCF,0x1C,0xC9,0xF4,0xCE,0x49,0xD0,0xE3,0xDA,0x82,0xE9,0x3,0xF4,0x77,0x3,0xC4,0xE,0xD8,0x1E,0x20,0x2B,0x4D,0x34,0x2D,0x3C,0x8C,0x3C,0x3,0x3E,0x39,
0x39,0x34,0x32,0x8B,0x28,0xC3,0x1D,0x5E,0x16,0x7B,0xD,0xE8,0x7,0xC,0x2,0x27,0xFD,0x65,0xFA,0xF3,0xF5,0x2E,0xF4,0xD2,0xF1,0xE0,0xEE,0x10,0xF0,0x33,0xEF,0x83,0xF0,0x94,
0xEE,0x1C,0xF4,0x8F,0xF2,0xCA,0xE3,0x3A,0xE3,0x77,0xD8,0x20,0xD3,0x78,0xD0,0x81,0xCB,0xBF,0xD1,0x21,0xD2,0xF1,0xDD,0x31,0xEC,0xD,0xF7,0x90,0x5,0x6C,0x10,0xB6,0x1F,0x76,
0x2B,0xA5,0x33,0xA3,0x39,0x93,0x3A,0x6E,0x3B,0xC8,0x35,0x44,0x2F,0xD0,0x25,0xCC,0x1B,0xBC,0x14,0x86,0xC,0xCB,0x6,0x9F,0x0,0x34,0xFC,0xC,0xF9,0x15,0xF5,0x79,0xF3,0x7,
0xF1,0x7F,0xEF,0x86,0xEF,0x1,0xEF,0x96,0xEF,0x20,0xEE,0xA8,0xF5,0xCE,0xEF,0x31,0xE4,0x1A,0xE3,0x5E,0xD8,0x6E,0xD5,0x3B,0xD0,0x1C,0xCE,0x6C,0xD1,0x73,0xD3,0x34,0xE0,0xFE,
0xEB,0x90,0xF8,0x24,0x5,0x52,0x11,0x22,0x20,0xE5,0x2B,0x25,0x34,0xC0,0x38,0x3D,0x3B,0x71,0x3A,0xF3,0x35,0xE,0x2F,0xA8,0x25,0x41,0x1C,0x4D,0x14,0x8C,0xD,0xAE,0x6,0xDB,
0x0,0x60,0xFC,0x9F,0xF9,0x77,0xF5,0xCF,0xF2,0x7F,0xF1,0x28,0xF0,0x16,0xF0,0x1A,0xF0,0x82,0xEF,0x67,0xEF,0x6B,0xF3,0x5F,0xEC,0x18,0xE3,0x70,0xDD,0xFB,0xD5,0xF,0xD2,0xB4,
0xCD,0x6B,0xCE,0x97,0xD1,0x71,0xD8,0xCC,0xE2,0x77,0xF0,0x1E,0xFE,0xB3,0x8,0xCC,0x16,0xFF,0x22,0x3D,0x2E,0x45,0x34,0x39,0x38,0x63,0x3A,0xEA,0x36,0xC3,0x33,0xB3,0x2B,0x48,
0x24,0x2F,0x1B,0x5D,0x13,0x6E,0xE,0xFE,0x6,0xD,0x2,0x2D,0xFD,0x31,0xFA,0x3,0xF6,0x2D,0xF3,0xB8,0xF2,0x5D,0xF1,0xF,0xF1,0x72,0xF1,0xAE,0xEF,0x93,0xF0,0xFB,0xF0,0xA4,
0xE9,0x60,0xE1,0x8D,0xD8,0xA5,0xD4,0xE1,0xCF,0x73,0xCC,0x93,0xCE,0xB9,0xD1,0x29,0xDC,0x6B,0xE4,0x2A,0xF3,0x85,0x1,0xAC,0xA,0x8,0x1A,0xD8,0x23,0x11,0x2F,0x84,0x32,0x30,
0x36,0x6F,0x39,0xF9,0x33,0x5E,0x32,0xC2,0x29,0x8E,0x24,0x19,0x1C,0xF8,0x14,0x81,0x11,0xB0,0x8,0x5F,0x4,0x35,0xFF,0x80,0xFC,0xFD,0xF7,0x44,0xF4,0x69,0xF4,0x5C,0xF2,0x9B,
0xF1,0xDF,0xF2,0xA1,0xF1,0x7E,0xF1,0x7B,0xF1,0x43,0xEC,0xBD,0xE4,0x0,0xDA,0x3E,0xD6,0x48,0xD2,0x72,0xCD,0xDA,0xCF,0xED,0xD0,0x37,0xDB,0x26,0xE3,0xEE,0xEE,0x1A,0xFF,0xBA,
0x7,0xF5,0x16,0xF0,0x20,0xB9,0x2B,0x58,0x31,0x63,0x34,0x4,0x38,0x19,0x34,0x95,0x32,0x66,0x2B,0x84,0x26,0xB4,0x1D,0xF6,0x15,0x5B,0x11,0xB6,0x8,0xD5,0x3,0x23,0xFE,0xE5,
0xFA,0x6D,0xF6,0x0,0xF3,0x87,0xF3,0x50,0xF1,0xAB,0xF1,0xC4,0xF2,0x1C,0xEF,0x65,0xF4,0x7C,0xEE,0xC5,0xE9,0xD9,0xE4,0x22,0xD4,0x5D,0xD7,0xB,0xCE,0x43,0xCC,0x3F,0xCF,0xDA,
0xCE,0x6A,0xDE,0x2E,0xE2,0xD7,0xF3,0xEF,0x0,0xE3,0xA,0xC8,0x1A,0xD8,0x22,0x80,0x30,0x8E,0x2F,0x14,0x35,0x76,0x35,0x3F,0x31,0x33,0x2F,0x40,0x25,0x65,0x22,0xA1,0x17,0x85,
0x14,0xF8,0xD,0x56,0x8,0xA9,0x3,0x93,0xFE,0x7B,0xFD,0x30,0xF7,0xD6,0xF5,0xA3,0xF3,0x61,0xF3,0xC4,0xF1,0xBE,0xF2,0x5,0xF0,0xD5,0xF3,0xAE,0xEB,0x8A,0xE9,0x6A,0xE2,0x37,
0xCF,0x59,0xD9,0x1F,0xCE,0x4B,0xD0,0x5C,0xD4,0x32,0xD4,0x59,0xE4,0x55,0xE8,0x37,0xFA,0x35,0x4,0x50,0xF,0xF,0x1C,0x29,0x24,0xCE,0x2E,0xD8,0x30,0xA,0x35,0x59,0x33,0xA0,
0x30,0x8,0x2B,0x97,0x23,0x9E,0x1D,0x89,0x15,0xA5,0x10,0x39,0xA,0x38,0x7,0xE1,0x1,0x5,0xFF,0x38,0xFD,0xD8,0xF8,0x40,0xF8,0xE4,0xF5,0x42,0xF7,0x6A,0xF3,0x26,0xF6,0x38,
0xF0,0x3D,0xF5,0x98,0xF1,0x36,0xE6,0xD,0xEC,0x0,0xD4,0x3F,0xD4,0x3E,0xD0,0x2E,0xCC,0x37,0xCF,0x6C,0xD1,0x80,0xE0,0x65,0xE5,0xC4,0xF7,0xF4,0x2,0xBC,0x11,0x23,0x1B,0xDB,
0x25,0xD7,0x2F,0x67,0x31,0x3,0x36,0x4B,0x35,0xE8,0x31,0x20,0x2A,0x76,0x25,0x1D,0x1C,0x8,0x14,0x60,0xD,0xC,0x8,0x5D,0x3,0x3B,0xFF,0x86,0xFE,0x70,0xFD,0x71,0xFA,0xC5,
0xFA,0x19,0xF9,0x55,0xF9,0x33,0xF6,0x69,0xF9,0x81,0xF2,0x52,0xF3,0xD7,0xF5,0x39,0xE3,0x1A,0xEB,0xE1,0xD6,0x30,0xD1,0x3D,0xD0,0x88,0xCA,0x53,0xCE,0x55,0xCF,0x4,0xDE,0xA0,
0xE2,0x21,0xF6,0xE1,0x0,0x8D,0xF,0xB7,0x1C,0xAF,0x24,0x4A,0x30,0x2A,0x36,0x66,0x34,0x32,0x36,0x99,0x33,0x71,0x29,0x55,0x24,0xD4,0x1B,0x83,0x13,0x8,0xB,0x88,0x6,0x5D,
0x2,0x4E,0xFF,0xA4,0xFB,0x51,0xFD,0x1C,0xFA,0x2C,0xF9,0xD1,0xF8,0x4C,0xFB,0xCF,0xF5,0x4D,0xFA,0x26,0xF5,0x42,0xF4,0x49,0xFA,0x5A,0xE4,0x9A,0xEC,0x87,0xDD,0x86,0xCF,0x7A,
0xD2,0xF9,0xCF,0xC,0xCC,0x5A,0xD1,0x47,0xDE,0x43,0xE3,0x4A,0xF5,0x8A,0x1,0x10,0xE,0xBA,0x1D,0x1D,0x26,0x20,0x2E,0x46,0x39,0x2D,0x35,0xBD,0x36,0x3E,0x35,0xB0,0x2A,0xFE,
0x23,0xA,0x1D,0xD6,0x12,0x2,0xC,0xE4,0x7,0x9,0x0,0x74,0x0,0x53,0xFA,0x7A,0xFB,0xF5,0xFA,0x70,0xF8,0x8A,0xF7,0x95,0xFA,0xA4,0xF7,0xF9,0xF8,0xE5,0xF9,0x31,0xF0,0x45,
0xFD,0x1C,0xEA,0x15,0xE4,0xFA,0xE6,0xA8,0xD0,0xAA,0xCD,0x9D,0xD1,0x9C,0xCC,0x9,0xCC,0xF1,0xDA,0x1,0xE2,0x77,0xEE,0x18,0x0,0xC9,0xA,0x77,0x1A,0xCA,0x27,0xDC,0x2A,0x8E,
0x38,0xB8,0x38,0xF,0x33,0x3F,0x36,0xCD,0x2D,0x73,0x21,0x31,0x1C,0x5F,0x14,0xA4,0x7,0x3F,0x6,0xB5,0x0,0x9D,0xFC,0x5F,0xFD,0x33,0xFC,0xFC,0xFA,0x23,0xFD,0x44,0xFA,0xC8,
0xF9,0x15,0xFC,0x85,0xF9,0x9C,0xF8,0x9D,0xF2,0xC1,0xF9,0x0,0xEE,0x36,0xE2,0x21,0xE5,0xA3,0xD5,0x93,0xCA,0x91,0xCC,0xE5,0xCE,0x81,0xC8,0xF3,0xD3,0xEA,0xE0,0x55,0xEA,0xFD,
0xFB,0x6A,0x8,0xBF,0x18,0xC1,0x27,0x44,0x2C,0xB7,0x37,0x92,0x3D,0x79,0x36,0x69,0x37,0x22,0x33,0xEB,0x25,0x7A,0x1C,0x12,0x15,0x8F,0x9,0x26,0x4,0xB,0xFE,0xB0,0xFB,0x50,
0xFA,0xFA,0xF8,0x97,0xF8,0x3A,0xFB,0xCF,0xF8,0xDC,0xF7,0x3F,0xFE,0x83,0xF8,0x15,0xFA,0x42,0xF4,0x61,0xFC,0x1E,0xEE,0x3,0xE2,0xB3,0xE5,0xB2,0xD4,0xD5,0xC9,0x82,0xCA,0xD3,
0xD1,0x22,0xC8,0xA0,0xD4,0xBE,0xE4,0x6,0xEE,0x4,0xFE,0x67,0xD,0xF1,0x1B,0xD0,0x2B,0xB4,0x2F,0x2D,0x38,0xB9,0x40,0x23,0x37,0xEE,0x35,0x2D,0x32,0x90,0x24,0x7A,0x18,0xE6,
0x12,0x18,0x8,0xCB,0x0,0x1C,0xFC,0x3C,0xFA,0xCF,0xF8,0xE5,0xF8,0xD9,0xF9,0x4B,0xFB,0x5C,0xFB,0xAA,0xF9,0x5C,0xFE,0x4,0xFC,0x33,0xFB,0xEC,0xF4,0xBF,0xFA,0xAD,0xF2,0x39,
0xE1,0x70,0xE4,0x1C,0xD7,0x58,0xCA,0xAB,0xC9,0xE2,0xCE,0xB0,0xCB,0xD3,0xD3,0x37,0xE2,0xDD,0xEE,0x69,0xFF,0x5B,0xB,0x32,0x1B,0xBF,0x2B,0x85,0x31,0x6A,0x34,0x90,0x3F,0x84,
0x3A,0x71,0x33,0xB6,0x2E,0x1,0x25,0xF8,0x18,0xEC,0xD,0x0,0x7,0xE,0x1,0x70,0xFB,0x6C,0xF8,0xCC,0xF9,0x5E,0xF9,0x98,0xFA,0xFC,0xF9,0x86,0xFD,0x15,0xFB,0x52,0xFB,0xD,
0xFC,0xAD,0xFB,0x8B,0xF3,0x25,0xF5,0x26,0xF8,0x98,0xE0,0x8D,0xDD,0xF,0xDB,0x95,0xCC,0x11,0xC3,0x5D,0xCC,0x89,0xCD,0xFF,0xCE,0x0,0xDD,0xB,0xED,0x1A,0xFF,0xEC,0x8,0x3E,
0x19,0xC6,0x2B,0x1E,0x34,0x5D,0x34,0x63,0x3E,0xEE,0x3E,0x30,0x35,0x52,0x2E,0x8A,0x27,0xCA,0x1A,0x4A,0xF,0x55,0x7,0x3C,0x1,0xA7,0xFC,0x79,0xF8,0x32,0xF8,0xCD,0xFA,0x1A,
0xFC,0x9F,0xF7,0x5E,0x0,0xA0,0xFD,0x17,0xFB,0x16,0xFD,0xC7,0xFB,0xD5,0xF5,0xD5,0xF0,0x17,0xF8,0x10,0xE5,0x8F,0xD9,0x99,0xD9,0xD,0xD1,0x2,0xC5,0x56,0xC8,0xDE,0xCF,0xAD,
0xD1,0x6C,0xDD,0x57,0xEB,0x6C,0xFE,0xD,0xE,0xC1,0x18,0x1D,0x28,0xB6,0x37,0x3,0x37,0x9E,0x39,0x53,0x3E,0xC3,0x36,0x9F,0x2D,0x39,0x24,0xD8,0x1A,0x9A,0xE,0x8B,0x5,0x1F,
0xFF,0x6D,0xFB,0x7C,0xF8,0xD9,0xF6,0x93,0xF9,0x6,0xFD,0xE,0xFB,0xFD,0xFC,0x2D,0x0,0x95,0xFC,0x93,0xFE,0x98,0xF9,0x72,0xF8,0xB9,0xF2,0x7D,0xF5,0x39,0xEC,0xF2,0xD9,0xD1,
0xDA,0xD7,0xD4,0x2B,0xC6,0x84,0xC4,0x9E,0xD0,0x33,0xCF,0x82,0xD7,0x9A,0xE7,0x3B,0xFB,0x9E,0x8,0xE,0x15,0x7F,0x26,0x2D,0x35,0x8B,0x37,0x42,0x38,0xD7,0x3E,0x7B,0x39,0x31,
0x2E,0x33,0x24,0xCC,0x1C,0xFA,0xE,0x75,0x3,0xD6,0xFC,0xED,0xFA,0xB7,0xF6,0x1B,0xF4,0x47,0xF8,0xCC,0xFC,0x6B,0xFB,0x95,0xFC,0x2C,0xFF,0xCA,0xFF,0x9,0xFF,0x45,0xFB,0xCD,
0xFA,0x7F,0xF2,0xAF,0xF8,0xA6,0xED,0x8A,0xD8,0x93,0xDA,0xA4,0xD4,0x90,0xC4,0xB7,0xC1,0x87,0xCE,0xB7,0xCF,0x5F,0xD8,0xAE,0xE6,0x7D,0xFB,0x6B,0xE,0x49,0x16,0xE6,0x26,0x22,
0x3A,0x6C,0x3A,0x53,0x38,0x64,0x40,0xF1,0x3A,0x14,0x2F,0x6D,0x24,0x32,0x1C,0x28,0xF,0xAE,0x5,0x26,0xFC,0xC7,0xF9,0x32,0xF9,0x17,0xF6,0x1,0xF8,0x80,0xFE,0x1C,0xFE,0xAA,
0xFC,0x10,0x2,0x27,0xFF,0x7C,0x2,0x66,0xF8,0xBC,0xFC,0x3F,0xF5,0x5F,0xF1,0x81,0xF3,0x87,0xDD,0x80,0xD7,0xAF,0xD4,0x40,0xCE,0xB5,0xC3,0xD8,0xCA,0xE9,0xD2,0xB7,0xDB,
0xCB,0xE6,0x21,0xF8,0xBE,0xC,0xB7,0x1A,0xCA,0x24,0x12,0x33,0x9D,0x3F,0x58,0x3A,0x66,0x3A,0xC5,0x3A,0xF5,0x32,0x93,0x24,0xC,0x1A,0xBD,0x10,0xAA,0x4,0xA2,0xFD,0x7E,0xF8,
0xBF,0xF6,0xD8,0xF6,0x75,0xF9,0x60,0xFB,0x8B,0x0,0xB1,0x0,0xB8,0x0,0x5A,0x1,0xD3,0x1,0x93,0xFB,0x60,0xF6,0x4,0xFA,0xC3,0xED,0x72,0xF2,0xE3,0xE6,0x20,0xD5,0x59,0xD5,
0xCA,0xD2,0xFF,0xC5,0x7A,0xC5,0xC5,0xD3,0xCD,0xD6,0x18,0xE4,0x8F,0xF0,0xDC,0x3,0xEC,0x14,0x64,0x1E,0xC,0x28,0x6F,0x34,0xD6,0x38,0x6,0x34,0xFF,0x32,0xB0,0x30,0xBE,0x28,
0x7,0x1C,0x22,0x12,0x44,0xB,0x8F,0x7,0x61,0xFE,0xD6,0xFB,0x88,0x0,0xC7,0xFF,0xC4,0xFD,0xBA,0xFF,0x26,0x5,0xA3,0x1,0x4,0xFC,0xF2,0xFB,0x5D,0x0,0x42,0xF4,0x36,0xF2,
0x5F,0xF6,0xCA,0xEC,0xE7,0xF0,0x53,0xEA,0x54,0xDD,0x73,0xDE,0x9A,0xE3,0x8D,0xD7,0xE3,0xD4,0xA4,0xE3,0x5F,0xE7,0xDC,0xE5,0x68,0xF0,0x9B,0x1,0x7F,0x6,0x4E,0x9,0xE5,0x17,
0xE1,0x1E,0x6F,0x1D,0xEA,0x21,0xC2,0x23,0x75,0x24,0x8E,0x1F,0x20,0x1C,0xB8,0x1D,0xE2,0x15,0x52,0x11,0x54,0x14,0x5F,0xE,0x8F,0x7,0x7C,0x9,0x73,0x9,0xAD,0xFF,0x0,0xFD,
0x61,0xFF,0x59,0xFC,0x3A,0xF3,0xBB,0xF1,0x1,0xFB,0x52,0xF3,0x56,0xEC,0xB2,0xF6,0x9,0xF3,0xBC,0xF0,0x4C,0xF9,0x21,0xEF,0x26,0xEB,0x38,0xF8,0xC,0xED,0xDD,0xE2,0x67,0xF2,
0x3D,0xE9,0xEE,0xE4,0x86,0xF1,0xAC,0xF2,0x48,0xF2,0x2F,0xFC,0x31,0x7,0x53,0x8,0x32,0xD,0x7D,0x15,0x6,0x1C,0xBD,0x19,0x9E,0x1E,0x5B,0x20,0x78,0x1D,0x16,0x1D,0x86,0x1B,
0xDD,0x15,0x51,0x12,0xE1,0xE,0x1E,0x7,0xE4,0x7,0x7A,0x0,0x22,0xFD,0xB5,0xF6,0x6E,0xF7,0xA8,0xFC,0xE4,0xEE,0x13,0xEF,0xDE,0xFC,0x4D,0xF3,0x3A,0xF1,0x97,0xF4,0xC8,0xF4,
0xB,0xFE,0xD,0xEE,0xEE,0xED,0xE0,0xFA,0x53,0xF1,0xE6,0xE4,0x45,0xEE,0x57,0xF3,0x45,0xE5,0x43,0xE9,0x37,0xF7,0x4B,0xF2,0xAA,0xF2,0x2E,0x4,0xD5,0x5,0xE6,0x5,0x3,0x10,
0x42,0x17,0x1,0x15,0xAF,0x17,0x11,0x20,0x77,0x1A,0xC3,0x16,0x60,0x19,0x6,0x19,0x23,0x12,0x72,0xB,0x67,0xB,0x33,0xD,0xE3,0xFE,0x5B,0xFA,0xBB,0x2,0x30,0xFD,0xE4,0xF4,
0x67,0xF0,0x43,0x1,0xBA,0xF4,0xEA,0xED,0x4,0xFE,0x65,0xF5,0x20,0xF9,0xE9,0xF2,0x85,0xF8,0xEF,0xFB,0xE1,0xF0,0xF2,0xF6,0x2E,0xEE,0x9B,0xED,0xD5,0xF2,0xC3,0xEC,0x28,0xE9,
0xEB,0xEC,0x65,0xF2,0x2B,0xF3,0x16,0xF3,0xB7,0xFC,0x55,0x5,0x5C,0x4,0xA8,0x9,0x1B,0x14,0xC1,0x14,0x6F,0x12,0x8B,0x19,0x73,0x19,0x36,0x17,0x58,0x17,0xE6,0x15,0x3B,0xF,
0x26,0x13,0x26,0x9,0x73,0x4,0xE1,0xD,0x86,0xF9,0xEC,0xFE,0xDD,0x5,0x86,0xEE,0x14,0xF9,0x74,0x6,0xD0,0xED,0x13,0xF4,0x7,0xFE,0xAB,0xF8,0x37,0xF9,0xA1,0xF2,0xE8,0xFF,
0x68,0xFD,0x6A,0xF3,0xA9,0xF4,0xFB,0xFE,0xC4,0xF2,0xDD,0xE7,0xB3,0xFA,0x24,0xEB,0x6A,0xE9,0x1F,0xF4,0xF5,0xF1,0x83,0xEF,0xE,0xF7,0xF4,0xFE,0x5F,0x2,0x4F,0x2,0x6F,0x4,
0x88,0x14,0x81,0xE,0xA7,0xD,0xA,0x15,0xCE,0x18,0xA0,0x12,0x9F,0x11,0xE,0x12,0xFD,0x13,0x63,0xE,0xA9,0x4,0x7A,0xE,0x74,0x2,0xB0,0x6,0x2D,0xF7,0xB7,0x3,0xA6,0x1,
0x98,0xED,0x1D,0x8,0xE3,0xEF,0x5B,0xF9,0xD,0x0,0x91,0xF5,0x3B,0xFA,0xDB,0xFF,0xDF,0xFA,0x95,0xF8,0xE4,0xFD,0x11,0xFB,0x7,0xF7,0xBC,0xF2,0xE2,0xFF,0xA7,0xED,0x67,0xEE,
0xE8,0xF5,0xA9,0xF5,0x6B,0xF1,0x6D,0xEC,0x8C,0xFC,0x8A,0xFF,0x3E,0xF2,0x34,0xFE,0x89,0xB,0xE2,0x2,0x2,0x7,0x63,0x8,0x83,0x18,0x51,0x8,0xE,0xB,0xEA,0x1A,0x3A,0xD,
0x6C,0xA,0x94,0x9,0x17,0x18,0xD3,0x4,0x9E,0x1,0x77,0x5,0x3A,0xD,0xAA,0xF9,0xA5,0xFD,0x69,0xC,0x65,0xE4,0x18,0x11,0x59,0xF9,0x55,0xEE,0x5C,0x8,0xCD,0xF3,0xF8,0x1,
0xC1,0xF8,0x47,0xF7,0xD,0xFF,0xC2,0x5,0x93,0xF6,0xF0,0xEF,0x2A,0xA,0xF6,0xF7,0xEA,0xED,0x7E,0x1,0x9E,0xF2,0x4,0xF5,0x87,0xF7,0xCA,0xF3,0xAA,0xF7,0x4B,0xF9,0x32,0xF9,
0x6E,0xF5,0x5,0x5,0x41,0xFC,0x7F,0xFB,0xB9,0x13,0x30,0xFC,0xC7,0x2,0xA4,0x18,0xF1,0x2,0x1A,0x5,0x6F,0x13,0xCB,0xD,0x2D,0x3,0x9A,0x8,0x3A,0x9,0x4E,0x10,0x45,0xF5,
0x60,0x8,0x28,0xC,0x85,0xF5,0xDA,0xA,0x1E,0xEC,0x53,0xF,0x80,0x1,0x86,0xE9,0xEB,0xA,0x54,0xFF,0xAB,0xF3,0xE5,0xFA,0x10,0xF,0xCE,0xF1,0xDF,0xF1,0x44,0x11,0xFB,0xF2,
0x8A,0x0,0x1F,0xFC,0x77,0xF7,0x55,0x7,0x63,0xEC,0xA,0x5,0x3F,0xF6,0x95,0xF9,0x71,0xF9,0xE1,0xFA,0x97,0xFB,0x6B,0xEE,0x7E,0xB,0x9E,0xF2,0xE5,0xF6,0x33,0xB,0x20,0xF8,
0x38,0x2,0x8,0x7,0x4,0xFC,0xC4,0x7,0x3B,0x11,0xFB,0xF8,0xEB,0x3,0x6E,0x1A,0x3A,0xFA,0x81,0xFF,0x18,0x18,0x7D,0xFB,0xC2,0xF7,0xB1,0x1E,0xD0,0xF1,0x8F,0xFB,0xB2,0x10,
0x81,0xFC,0xD2,0xF6,0x25,0x4,0x1F,0xE,0xEE,0xE8,0x37,0xB,0xC4,0xFC,0xFA,0xFF,0x8F,0x4,0xD,0xF5,0x47,0x5,0xDD,0xFF,0xDE,0xF8,0xB4,0xF7,0x21,0x15,0x54,0xEB,0x61,0xF6,
0x69,0x10,0x78,0xF3,0xF2,0xFF,0x43,0xFD,0x67,0xF8,0x76,0x0,0x5B,0x1,0x33,0xF6,0x87,0xFC,0x74,0x4,0x2A,0xF8,0x32,0x1,0x13,0x3,0x8,0xF6,0xE5,0xB,0x24,0xFD,0x34,0xFB,
0x63,0xA,0x6E,0x6,0xD,0xF9,0xD0,0x2,0xF9,0x15,0xA,0xEB,0x86,0xF,0x74,0x9,0xA2,0xF7,0xBD,0xB,0x16,0xF7,0x19,0xC,0x1C,0x2,0xE0,0xFB,0x28,0xFF,0x57,0xE,0x77,0xF3,
0x14,0x0,0xF8,0x13,0x4A,0xE5,0x3E,0xD,0x93,0x2,0x65,0xF9,0x66,0xFC,0x84,0x6,0xEF,0xFD,0xDB,0xF7,0xDD,0xD,0x45,0xEF,0x58,0x7,0xA4,0xFC,0xD8,0xFB,0xC1,0x3,0xA8,0xFD,
0x65,0xF5,0x2A,0x10,0xFE,0xE9,0xCA,0x5,0xFA,0x12,0xE5,0xDA,0x5C,0x1F,0xDB,0xE9,0x2,0xD,0xFC,0xFA,0xFD,0xF5,0xBD,0x13,0xB,0xEF,0xFB,0x7,0xE1,0xFB,0x4A,0xB,0xAB,0xF3,
0x25,0x8,0x65,0x4,0xA9,0xF9,0x58,0x5,0x1A,0x1,0x8,0x1,0x6D,0xFF,0x10,0x4,0xC8,0xFC,0xE9,0x7,0x7E,0xF7,0x4B,0xA,0x32,0xFE,0x6F,0xFD,0xCA,0x0,0xEF,0x4,0x5B,0x1,
0xA,0xF4,0xB1,0xE,0x57,0xF7,0x77,0x4,0x8C,0xF4,0xB9,0x12,0x85,0xF1,0x32,0xFD,0xF,0x13,0x69,0xE7,0x8,0xF,0xB7,0x0,0x35,0xF7,0x90,0x5,0xBE,0x2,0xDB,0xED,0x88,0x1B,
0x91,0xEA,0xFC,0xF9,0x83,0x1D,0x16,0xDD,0x9A,0xF,0x6D,0xD,0x85,0xE0,0x96,0x19,0x5B,0xF7,0x2E,0xFB,0xE6,0xB,0x58,0xEB,0x12,0x1C,0xB9,0xED,0xA9,0xFA,0x41,0x17,0x99,0xF0,
0x55,0xFB,0x16,0x13,0x6A,0xF2,0x1B,0x4,0x6E,0x0,0xC7,0x2,0x42,0xFE,0x91,0xFF,0x47,0x2,0x4D,0xFF,0x71,0x8,0x52,0xEC,0xB9,0x19,0x72,0xF0,0xE3,0x1,0xD8,0x6,0xE8,0xFD,
0x31,0xFA,0x76,0xE,0xD6,0xF9,0x94,0xEF,0x81,0x23,0x74,0xE7,0xEB,0x0,0x47,0xA,0x5D,0xFD,0x52,0xF8,0xB7,0xD,0xB4,0xF0,0xA8,0xA,0x75,0x3,0xF7,0xEA,0x79,0x19,0x7B,0xF3,
0x13,0xFE,0xAF,0x1,0xBE,0xA,0xAC,0xEF,0x31,0x4,0xE6,0xB,0x7,0xF4,0x10,0x3,0x13,0x2,0xF2,0xFF,0x1E,0x1,0xE7,0xFF,0xF9,0xFA,0xDE,0xB,0x2D,0xF2,0xA4,0x9,0x1A,0xFC,
0xE8,0xFE,0x6D,0x4,0x91,0xF9,0x52,0x6,0x57,0xFA,0xD1,0x9,0x50,0xF2,0xC4,0xD,0x79,0xF9,0x4E,0xFB,0x46,0xD,0x28,0xF5,0x24,0x5,0x9E,0x0,0xC0,0xFA,0x31,0x8,0xDF,0xF9,
0x7D,0x0,0x8B,0x9,0x20,0xF1,0x99,0xB,0xB1,0xFD,0x29,0x0,0xC0,0xF8,0x72,0xD,0xD4,0xF7,0x55,0xFC,0x5D,0xB,0x3E,0xF3,0xC5,0xB,0xF3,0xF5,0x9B,0x3,0x55,0xFF,0x5B,0xA,
0x14,0xEC,0x38,0xF,0xF8,0x1,0xF8,0xEF,0x1C,0x13,0x47,0xEC,0x26,0x11,0x4B,0xFB,0x1,0xF1,0x47,0x18,0x68,0xEF,0xAD,0xFB,0x8E,0x16,0x9D,0xE4,0xB2,0x12,0xED,0xFB,0x0,0xFB,
0x2D,0x3,0x30,0x2,0x28,0xFF,0x64,0xFD,0x4,0x7,0x72,0xEF,0x29,0x1A,0xC8,0xEA,0x8C,0x3,0xEC,0x6,0xA3,0xFE,0x39,0xF7,0x43,0xB,0x79,0xF7,0x48,0x3,0xBE,0x5,0x8A,0xF0,
0x7D,0x12,0xB6,0xF7,0x72,0xFB,0xF4,0x4,0xDF,0x9,0x78,0xE0,0x28,0x2A,0xE6,0xE0,0x54,0x1,0xFB,0x18,0xA9,0xE1,0x7,0xF,0x3C,0x2,0xC2,0xF4,0x79,0x6,0xDF,0x7,0xE9,0xE8,
0x70,0x1D,0x23,0xE7,0x4A,0xD,0xE9,0xFF,0x86,0xF8,0x7A,0x8,0xD7,0xF5,0xD0,0xA,0x2E,0xF7,0xD5,0x0,0x32,0x6,0x2B,0xFA,0xFD,0xFD,0x5B,0xC,0x3A,0xE9,0xA1,0x1D,0x57,0xED,
0x42,0xF5,0xF6,0x20,0xB0,0xE4,0xEF,0x4,0x25,0xA,0xBB,0xF6,0x75,0xFC,0xC4,0x12,0x17,0xE3,0xB3,0x17,0xA,0x1,0x7A,0xE3,0x88,0x20,0x71,0xF1,0x36,0xFF,0xFA,0xFE,0x73,0x5,
0x73,0xFB,0xB7,0x5,0x5,0xF0,0x8B,0x12,0x57,0x0,0xE,0xE5,0x2C,0x20,0xF9,0xEE,0x96,0x4,0x1C,0xFA,0x96,0x6,0x51,0xFA,0x6E,0x5,0x98,0xF8,0xF9,0x1,0x12,0x9,0xFC,0xEB,
0x97,0x12,0xF9,0xF4,0xFA,0x7,0xA2,0xEE,0xE7,0x18,0x48,0xEA,0x68,0x4,0x74,0xE,0xE5,0xE7,0xD6,0x12,0xA7,0xF4,0x0,0x7,0x6A,0xFC,0xCA,0xFD,0x7B,0xFD,0xA4,0xC,0x73,0xE8,
0xE9,0x16,0x2E,0xF2,0x88,0x0,0x0,0x2,0xE0,0xFF,0x12,0x3,0x60,0xF1,0x11,0x15,0x33,0xE4,0x75,0x20,0x59,0xDE,0xA8,0x14,0x38,0xFE,0xD6,0xED,0x98,0x19,0x11,0xE9,0x63,0x8,
0x9F,0x8,0xC0,0xEC,0x5,0xA,0x81,0xD,0x55,0xD7,0x69,0x31,0xCF,0xDE,0xE,0x0,0xC2,0x17,0x5F,0xE2,0xDC,0x10,0x63,0xFD,0x91,0xF6,0x79,0x8,0x68,0x2,0xA,0xEB,0x6F,0x22,
0x62,0xDD,0xD3,0xF,0x8F,0x5,0xEE,0xE9,0x1,0x19,0x1D,0xF0,0x56,0xFF,0x86,0x8,0x50,0xFB,0x29,0xF7,0x82,0x14,0xAF,0xEC,0x17,0x1,0x40,0xF,0xC6,0xF1,0x96,0x0,0x9A,0x9,
0x7,0xF3,0xD8,0x6,0x2A,0x4,0x15,0xF1,0xD0,0x10,0xE0,0xF6,0x98,0xFA,0xAF,0xB,0xCF,0xF9,0xE7,0xFD,0x80,0x3,0x4,0xFD,0x2E,0x2,0x88,0x0,0x1C,0xFE,0x2A,0x0,0xF4,0xFF,
0xB6,0x5,0xDB,0xF2,0x6E,0xF,0xCA,0xF8,0x1C,0xF7,0x8C,0x16,0x8E,0xE5,0x2D,0x11,0x91,0xFE,0x4F,0xF4,0x42,0x10,0x35,0xF7,0xDD,0xFB,0x87,0xB,0x81,0xF7,0xAF,0x3,0xF6,0x2,
0x42,0xF3,0xF5,0x18,0xDA,0xE6,0xA0,0x8,0xBF,0xF,0x66,0xE2,0x34,0x1B,0xC0,0xF3,0x68,0xF9,0x4D,0x17,0x65,0xE7,0xBD,0xB,0x2F,0x5,0xA0,0xF2,0xBE,0x12,0x5F,0xEC,0x97,0x9,
0x9,0xB,0x2E,0xEB,0x5B,0xD,0x8B,0xFD,0xA2,0x1,0x7E,0xFA,0x54,0x4,0xB1,0x2,0xEB,0xFC,0x25,0xFD,0x1F,0x8,0xD5,0xFD,0x14,0xF5,0x6A,0x14,0x9B,0xEE,0x69,0x7,0x1F,0x2,
0x14,0xFA,0x31,0x9,0x28,0xF1,0x28,0x11,0x85,0xF5,0x7B,0x0,0x40,0x5,0x3E,0xF9,0x38,0xC,0xD9,0xEC,0x92,0x14,0xCC,0xF8,0x6C,0xF4,0x41,0x14,0xEC,0xF2,0x16,0xFF,0x50,0xC,
0x9B,0xEB,0xD7,0x13,0x55,0xFD,0x4E,0xED,0x1B,0x1C,0xDB,0xEA,0x37,0x9,0xD2,0x1,0x0,0xFA,0x47,0x2,0x2C,0x7,0x65,0xF2,0x41,0xB,0xCF,0xFE,0x6E,0xF1,0xD8,0x1D,0xB3,0xDE,
0x3D,0x16,0x4B,0xFD,0xB,0xF8,0x0,0x7,0x90,0xFD,0xEA,0x1,0xE7,0xFB,0xF0,0x9,0x75,0xEE,0x74,0x16,0x91,0xF0,0xC6,0xFE,0x7,0xF,0x1,0xF2,0x31,0x3,0x54,0x9,0x47,0xED,
0xBA,0x13,0x7D,0xFB,0x3,0xEB,0x48,0x27,0x4A,0xD8,0xA1,0x16,0xB0,0x1,0x2C,0xEA,0x18,0x1E,0x77,0xE5,0xB2,0xC,0x99,0x3,0x60,0xF4,0x3A,0x9,0x16,0xFF,0x22,0xF9,0xDB,0x9,
0xDA,0xFD,0x57,0xF9,0x52,0xC,0xDB,0xF0,0x69,0xA,0xCF,0x3,0x85,0xED,0x46,0x13,0x9F,0xFB,0xB4,0xF8,0x3,0x7,0xC8,0xFC,0x6A,0x5,0x4C,0xF9,0xA4,0xFF,0x31,0x7,0xC9,0xF9,
0x96,0x0,0x7D,0x1,0x4A,0xFE,0x34,0x4,0x99,0xFB,0xAD,0x2,0x1C,0xFE,0x30,0x3,0x3D,0xFC,0xCC,0x4,0x89,0xFA,0xF7,0xFE,0xF3,0xE,0x9,0xEA,0x4B,0x16,0x23,0xEE,0xA7,0xA,
0x7B,0x2,0x90,0xED,0xEB,0x19,0x33,0xEA,0x0,0xD,0x44,0xFB,0x84,0xFD,0xE1,0x9,0x89,0xF9,0x6,0xFE,0x71,0x9,0x45,0xF5,0x5C,0x9,0x6E,0xFC,0x9D,0xF6,0x29,0x14,0x48,0xEC,
0xDF,0xA,0x3,0xFF,0x38,0xFB,0x23,0x9,0x3A,0xF9,0xD9,0xFC,0x89,0x11,0x1C,0xE9,0x2D,0xF,0x68,0x3,0x6,0xEE,0x5A,0x17,0xE3,0xEC,0x0,0x7,0x85,0x7,0x8E,0xF1,0x7D,0x8,
0x6B,0x8,0xB6,0xEB,0xC6,0x15,0xB0,0xF4,0xC9,0xFD,0x2E,0xC,0x46,0xF4,0x56,0x7,0x2A,0xFE,0x24,0xFE,0x42,0x4,0x85,0xFE,0x80,0xFD,0x78,0x6,0x75,0xF7,0xBC,0x9,0x7D,0xF7,
0x50,0x6,0xA0,0xFE,0x9F,0xFD,0x96,0x1,0x8C,0x2,0x2B,0xFE,0xE7,0xFD,0xF,0x7,0xE3,0xF7,0x4E,0x7,0xFA,0xF9,0xE5,0x6,0x99,0xFA,0x0,0x0,0xB1,0x3,0xD3,0xFA,0x96,0x5,
0xC0,0xF9,0x84,0x3,0x30,0x1,0x1B,0xFB,0x58,0xA,0xCD,0xF3,0x45,0x7,0xB2,0x1,0x15,0xF8,0xBD,0xC,0x14,0xF0,0xC7,0xD,0x17,0xFE,0x56,0xF3,0xC2,0xF,0x26,0xF7,0xAB,0x2,
0x51,0x1,0x46,0xF8,0x2,0xB,0x65,0xFC,0x43,0xF6,0xEC,0xE,0x57,0xF9,0x1B,0xFB,0xD2,0xC,0xB0,0xEE,0x40,0x10,0xA4,0xF7,0x7E,0xFC,0x66,0x9,0xBD,0xF7,0x6C,0x6,0xF7,0xF7,
0x17,0xA,0x51,0xF8,0xA2,0xFD,0xD7,0x8,0xEB,0xF9,0xE7,0xFB,0xD2,0x9,0xB5,0xF6,0x15,0x4,0xFE,0xFE,0xF3,0xFE,0x89,0x6,0x9,0xF2,0x8,0xF,0x37,0xF8,0x8D,0xFF,0xAC,0x1,
0x2B,0xFE,0xDF,0x3,0x6A,0xF9,0x2B,0x2,0x34,0x4,0xFC,0xF7,0x4C,0x5,0xF8,0x0,0x8E,0xFA,0x4,0x7,0xDA,0xF9,0xE,0x7,0x61,0xF6,0x8D,0x6,0x43,0x2,0x88,0xF6,0x53,0x5,
0xE6,0xFE,0x97,0x1,0x70,0xF9,0x2F,0x2,0x9B,0x5,0xE6,0xF8,0x1F,0xFF,0xD9,0xB,0xB7,0xF2,0x72,0x5,0xCE,0x0,0x36,0xFC,0xCC,0x8,0xB,0xEF,0x3D,0x10,0xA7,0xFA,0x98,0xF5,
0x9A,0x12,0x14,0xF0,0x96,0x5,0xFC,0x3,0x59,0xF2,0x92,0x13,0x74,0xEF,0x54,0x2,0xBE,0xC,0x53,0xEC,0xAA,0xE,0x61,0xFA,0xB1,0xFC,0xC4,0x7,0x48,0xF2,0xC5,0x9,0x45,0x2,
0xBD,0xF4,0xD5,0xA,0x9A,0xF6,0x69,0x9,0x6F,0xFD,0x3B,0xF8,0x1B,0xE,0xBC,0xF6,0x47,0xFF,0x90,0x6,0xED,0xF7,0xE,0x3,0x9D,0x3,0x8A,0xF2,0x39,0x10,0x51,0xF5,0xDF,0x0,
0x26,0x8,0xCE,0xF5,0x34,0x7,0xB7,0x3,0x21,0xF7,0x78,0x6,0xD0,0xFF,0x36,0xFA,0xC8,0x9,0x2A,0xF4,0xA3,0x7,0xA8,0xFC,0x87,0xFB,0x0,0x7,0x4B,0xFC,0x76,0xFA,0x91,0x8,
0x89,0xFE,0x16,0xFB,0x0,0x2,0xBD,0x0,0xB2,0x0,0xEB,0xFC,0xC0,0x2,0xAE,0xFB,0x1D,0x7,0x57,0xF5,0xE5,0x8,0xDC,0xFE,0xDB,0xF8,0xAE,0xC,0xA3,0xF3,0xD2,0x8,0xD1,0xFD,
0x4D,0xFB,0x58,0x8,0x0,0xFA,0xBC,0x2,0xC2,0x0,0x9F,0xFD,0x60,0x2,0xF2,0xFB,0xEF,0x4,0x7F,0xFB,0x7B,0x2,0x60,0x0,0xCC,0xFD,0x22,0x4,0x72,0xFD,0x5E,0x2,0xEA,0xFD,
0x3A,0x7,0xEF,0xFA,0xA1,0x1,0x91,0x3,0x76,0xFF,0xE8,0x1,0x40,0xFF,0x52,0x0,0x30,0x2,0x21,0xFD,0x65,0x0,0xAD,0x1,0x5D,0xFB,0xE,0x3,0x78,0xFA,0x73,0x4,0x83,0xFC,
0x6F,0xFD,0xA2,0x4,0x3B,0xFB,0xCC,0x2,0x9B,0x0,0x59,0xFC,0x45,0x4,0x49,0xFD,0x18,0x3,0xFB,0xFD,0xE0,0xFD,0x4,0x7,0x2E,0xF7,0x88,0x6,0x22,0xFD,0xC4,0xFD,0xD1,0x4,
0x3C,0xFB,0xC6,0x4,0xC5,0xFE,0x81,0xFE,0x3,0x6,0xC0,0xFD,0xE2,0xFF,0x53,0x6,0x38,0xFB,0xCD,0x3,0x67,0xFF,0x1A,0x0,0x1C,0x1,0x8B,0xFB,0xA5,0x5,0x82,0xFC,0x29,0xFF,
0x4F,0xFE,0x1B,0x1,0x2F,0x0,0x57,0xFB,0x70,0x2,0x9C,0xFE,0x9D,0xFE,0xE5,0x1,0x4F,0xFD,0xB5,0x2,0x20,0xFF,0x17,0xFF,0x83,0x3,0x2,0xFD,0x6D,0x4,0x64,0xFC,0x43,0x1,
0x23,0x1,0xF4,0xFD,0xE5,0x2,0x2D,0xFC,0x7A,0x1,0xCB,0x1,0xBE,0xFA,0x68,0x1,0xAB,0x2,0x2C,0xFB,0xAC,0x2,0x3B,0xFF,0x4C,0x0,0x7F,0x0,0x10,0xFD,0x23,0x4,0x21,0x0,
0x5F,0xFC,0x5F,0x4,0xFD,0xFE,0xF2,0xFE,0x37,0x3,0xB3,0xFE,0xD8,0x2,0x7A,0xFC,0x64,0x3,0xC8,0x2,0x96,0xFB,0xFB,0x2,0xF8,0x1,0xC7,0xFF,0x33,0x0,0x99,0xFF,0x29,0x3,
0x52,0xFF,0x3E,0xFB,0xEB,0x4,0x27,0xFC,0xA1,0xFD,0x26,0xFE,0x73,0xFB,0x9A,0x1,0xE2,0xF8,0x1F,0xFD,0xD,0xFE,0xFA,0xFB,0xBB,0xFA,0xA1,0xFB,0xEC,0xFD,0xC1,0xF9,0xF0,0xFA,
0x31,0xFD,0x9B,0xFB,0xDF,0xFC,0xCD,0xFB,0xC5,0xFD,0x80,0xFE,0xD2,0xFB,0xC8,0xFF,0xA5,0xFD,0xCD,0xFF,0x8C,0xFE,0xF2,0x1,0x6E,0x0,0xE7,0x2,0xBD,0x4,0xD5,0x4,0x45,0x8,
0x4B,0x7,0x37,0xC,0xDF,0xA,0xF,0xC,0xF0,0xC,0x1B,0xE,0x4E,0xA,0xC9,0xD,0x19,0x9,0xA,0xA,0x8D,0x6,0x2,0x6,0xAD,0x5,0xCC,0x0,0xD8,0x3,0x7B,0xFB,0xCE,0x2,
0x22,0xFA,0x3,0xFF,0x4D,0xFA,0x83,0xF7,0x77,0xF9,0xCD,0xF4,0xAF,0xF0,0xF0,0xEF,0x22,0xF6,0x60,0xE2,0xE3,0xE6,0x36,0xE6,0x2B,0xE2,0xCD,0xDD,0xF5,0xDF,0x40,0xE9,0x78,0xE7,
0x90,0xED,0x8E,0xFC,0xB0,0x2,0xC0,0xB,0x23,0x17,0x65,0x23,0xCF,0x27,0x50,0x25,0x39,0x34,0x55,0x2D,0xED,0x25,0x37,0x28,0xB0,0x20,0x62,0x13,0x89,0xF,0xE7,0x9,0x27,0x1,
0x4E,0xFC,0x4A,0xFA,0xCD,0xFB,0xE8,0xF7,0x32,0xFA,0x9B,0x0,0xBB,0xFE,0xA3,0x1,0x6F,0x6,0xEE,0x5,0x8,0x6,0x96,0x6,0x11,0x2,0x62,0x0,0x6B,0x0,0x44,0xF8,0x7B,0xF5,
0x95,0xE9,0x3D,0xF5,0xB0,0xE9,0x20,0xD5,0x50,0xE3,0x34,0xD8,0x17,0xD3,0xFB,0xD1,0x2D,0xD7,0xB4,0xDF,0x6E,0xDB,0x79,0xEC,0x72,0x0,0x1D,0xFB,0x13,0x14,0x8E,0x21,0x36,0x27,
0x3C,0x31,0xA4,0x2C,0xA6,0x40,0xFB,0x2A,0x9C,0x29,0x65,0x2D,0x1A,0x13,0x43,0x12,0xF1,0x5,0x7F,0xFB,0x84,0xF7,0x2C,0xEC,0x4,0xF1,0x1E,0xF0,0x30,0xEB,0x8A,0xF7,0xE0,0xF7,
0x19,0xFE,0x6A,0x1,0x51,0x5,0xEE,0xC,0xF2,0x7,0xAF,0xA,0x68,0xB,0xA1,0x3,0x5D,0x4,0xC1,0xFE,0x0,0xFA,0x1D,0xF8,0xE1,0xEE,0x8C,0xE9,0x37,0xEC,0x34,0xEA,0x6B,0xD7,
0xC8,0xDC,0x5C,0xDE,0x88,0xD3,0x47,0xD4,0x18,0xDA,0x7E,0xDF,0x8A,0xE1,0x84,0xEC,0x62,0xFC,0xAC,0x5,0x68,0xC,0xD7,0x24,0x42,0x2A,0x58,0x27,0x2C,0x3A,0x59,0x36,0x1B,0x2E,
0xAD,0x2E,0xCD,0x25,0x40,0x1D,0x11,0xE,0xD9,0x7,0x8C,0x1,0x98,0xF2,0x20,0xF1,0xAA,0xF1,0xE3,0xEC,0x72,0xEE,0x3B,0xF2,0xA5,0xF9,0x31,0xFB,0x9A,0xFD,0xF,0x9,0xDA,0x5,
0xFD,0xA,0x18,0xB,0x9A,0xB,0x39,0x7,0x49,0x5,0xF,0x2,0xB7,0xFE,0x60,0xFB,0xA0,0xEF,0x8E,0xF4,0x45,0xE5,0x1C,0xF2,0x27,0xE1,0x3E,0xD3,0x77,0xE6,0xA5,0xD4,0xA,0xD2,
0x5B,0xD9,0x83,0xDC,0xE3,0xE0,0xFB,0xE5,0xAE,0xF5,0x5,0x5,0x8C,0x3,0x7A,0x1E,0x42,0x27,0x23,0x25,0x91,0x35,0x1,0x35,0x74,0x33,0x9D,0x2E,0xB7,0x28,0x68,0x23,0xE0,0x13,
0xCA,0x9,0x2B,0x7,0x37,0xF6,0x85,0xF4,0x6E,0xF2,0xAC,0xEC,0x37,0xF1,0xA5,0xF0,0xA5,0xF6,0xD5,0xFA,0xCB,0xFA,0x29,0x6,0x72,0x4,0x3D,0x6,0x62,0xC,0x2C,0x8,0x10,0x9,
0x6C,0x5,0x44,0x5,0x15,0x0,0x78,0x0,0x34,0xF6,0x3E,0xF5,0x53,0xED,0xBA,0xEC,0x7B,0xEE,0xEF,0xD4,0xD,0xE0,0x43,0xDE,0xC0,0xCF,0xC2,0xD4,0xAC,0xDB,0x77,0xDC,0x69,0xE1,
0x17,0xED,0x62,0xFD,0x4A,0x3,0x73,0xF,0xEA,0x24,0x6B,0x24,0xCD,0x2C,0xB4,0x36,0x89,0x34,0xC1,0x30,0xDD,0x2C,0x4E,0x27,0x3,0x1E,0x39,0xF,0x96,0xA,0x72,0x1,0x79,0xF5,
0xDE,0xF5,0x8E,0xEF,0xA,0xEF,0xDB,0xEF,0xF8,0xF1,0xA,0xF7,0x1D,0xF8,0x9A,0xFD,0x52,0x3,0x53,0x4,0x2A,0x6,0x60,0x9,0x5,0xA,0xAF,0x4,0x58,0x7,0x0,0x2,0x14,0x2,
0x92,0xFD,0xFC,0xF2,0xA7,0xF7,0xDA,0xEA,0xE8,0xF1,0x9A,0xE1,0x44,0xD9,0x40,0xE6,0xB5,0xD2,0xC6,0xD4,0x51,0xD9,0x4,0xDB,0xD1,0xE0,0x85,0xE4,0x6A,0xF8,0xE7,0x2,0xF3,0x5,
0x22,0x21,0xFF,0x28,0x4E,0x29,0xBC,0x36,0x9B,0x39,0xA1,0x35,0x90,0x2D,0xCE,0x2A,0x68,0x21,0xB3,0xF,0x7F,0x7,0x4E,0x0,0x8A,0xF4,0x11,0xEF,0x31,0xED,0x92,0xF1,0xE7,0xEF,
0x34,0xF5,0xE3,0xFF,0xB5,0x0,0x92,0x5,0x7,0xB,0xCE,0xC,0x19,0xB,0x0,0x9,0xE0,0x7,0xF7,0x2,0x49,0xFB,0x6C,0xFD,0xCF,0xF6,0xC6,0xF6,0xFF,0xF0,0xA3,0xF2,0x58,0xEE,
0xF4,0xEB,0x9A,0xF6,0x54,0xD8,0x1D,0xE2,0x98,0xDF,0xC8,0xC4,0xBC,0xD0,0xAF,0xCD,0x5B,0xCF,0xE6,0xDA,0x19,0xE7,0x34,0xFC,0xC8,0x3,0xBB,0x1B,0xBE,0x30,0xD3,0x30,0xC0,0x41,
0x36,0x42,0xD0,0x3A,0x31,0x39,0xC8,0x2B,0x88,0x1F,0xCF,0x10,0x2F,0x1,0xFA,0xF8,0xA2,0xEB,0x49,0xEC,0xD3,0xEE,0x3F,0xEF,0x13,0x0,0xA2,0x5,0x4E,0x11,0x19,0x19,0x88,0x1D,
0x61,0x20,0x49,0x1A,0x6F,0x17,0xEB,0xE,0xB,0x5,0x74,0xFC,0xA6,0xF7,0xB0,0xEE,0x51,0xEE,0xA8,0xEB,0x4C,0xF0,0x2F,0xEF,0x26,0xF2,0x9C,0xF1,0xED,0xF1,0x9A,0xF9,0x85,0xDD,
0x92,0xE0,0xC5,0xD6,0xE0,0xB9,0x19,0xBF,0x65,0xBC,0x6A,0xBF,0xC9,0xCE,0x91,0xDF,0xDC,0xFB,0x96,0x7,0x60,0x24,0xEC,0x3E,0xB0,0x3E,0xA0,0x4E,0xB8,0x4B,0x7E,0x42,0x55,0x39,
0x15,0x2C,0xD4,0x1A,0x7D,0x7,0x63,0xFB,0x6B,0xEF,0xA8,0xE6,0x6F,0xE8,0x5,0xEF,0x96,0xF2,0xF,0x4,0x56,0xF,0xE0,0x16,0x52,0x1F,0x69,0x23,0xB,0x21,0x5,0x19,0x40,0x16,
0x6E,0x9,0x3D,0x4,0xB2,0xF8,0x71,0xF4,0x38,0xEF,0xBD,0xEA,0xA3,0xEF,0x4C,0xF0,0xD8,0xF1,0x8D,0xF4,0xEE,0xF9,0xC,0xED,0x4B,0xFF,0x3D,0xEE,0x7E,0xD7,0xAE,0xDF,0x97,0xC2,
0xAC,0xB7,0x74,0xBB,0x1,0xBF,0xA5,0xC9,0xCC,0xD5,0x99,0xF4,0x94,0x6,0xB8,0x13,0x93,0x3A,0x80,0x3F,0x1E,0x45,0x1B,0x4D,0x4,0x44,0x3,0x3C,0x21,0x2E,0x14,0x23,0xD7,0xE,
0x8E,0xFE,0x22,0xF5,0xB3,0xEB,0x3C,0xE8,0x5F,0xEC,0x24,0xF5,0x1F,0xFF,0x8C,0x8,0x8D,0x16,0x3F,0x1D,0xB8,0x1E,0xC3,0x23,0xA0,0x1D,0x15,0x16,0xCE,0xE,0xF,0x8,0xC5,0xFC,
0xD9,0xF3,0x8C,0xF3,0xC3,0xEC,0xCD,0xEA,0x25,0xF3,0x4A,0xF5,0xFF,0xF0,0x89,0xFB,0xA7,0xF0,0xFC,0xF7,0x29,0xF7,0x81,0xD8,0x1,0xE1,0x5A,0xC9,0xD0,0xB6,0x8,0xBF,0x91,0xB8,
0xBC,0xC7,0x16,0xD3,0x22,0xE5,0xEE,0x2,0x2E,0xD,0xEE,0x2B,0xA4,0x3D,0x19,0x40,0xDF,0x48,0xFC,0x42,0x54,0x3D,0x66,0x30,0xDA,0x24,0x7D,0x15,0x78,0x2,0x62,0xFA,0x85,0xF0,
0xEE,0xEA,0x44,0xEF,0x6,0xF2,0xCD,0xFC,0x73,0x5,0x60,0x10,0xBC,0x19,0x2D,0x1B,0xB6,0x1F,0x6F,0x1C,0xB0,0x15,0xD,0xF,0x6C,0x8,0x9F,0xFF,0xE,0xF8,0xB0,0xF1,0x68,0xEE,
0xC5,0xEE,0x1F,0xEE,0x7B,0xF6,0xD4,0xF7,0xB1,0xF6,0xFA,0xFD,0x95,0xF1,0x72,0xF8,0x9C,0xF7,0x17,0xDB,0x3F,0xDB,0x4C,0xCB,0xC7,0xB9,0x9C,0xBC,0xE2,0xBD,0xCB,0xCA,0xF9,0xD2,
0xDF,0xE5,0x10,0x2,0x32,0xE,0x5F,0x26,0xDF,0x3A,0x28,0x3D,0x68,0x41,0x4A,0x3E,0x4C,0x3A,0xA3,0x2C,0x42,0x20,0xDE,0x15,0x37,0x2,0xF0,0xF9,0x88,0xF1,0xC3,0xEE,0x97,0xF0,
0xF6,0xF3,0x5D,0x0,0xF5,0x7,0x5F,0xF,0xF5,0x1A,0x69,0x1B,0x95,0x1D,0x40,0x1A,0xF2,0x11,0x46,0x10,0x8B,0x2,0x70,0xFF,0x60,0xF9,0xF4,0xF1,0xA7,0xEF,0x3F,0xEE,0xA6,0xF4,
0xC1,0xF2,0x5D,0xFA,0x15,0xFA,0xB3,0xF8,0x47,0xF5,0x4E,0xF4,0xDE,0xF6,0x4B,0xDF,0x2F,0xD5,0x70,0xCD,0xC1,0xBB,0x60,0xB8,0x76,0xBE,0xD7,0xC9,0xC2,0xD2,0xDE,0xE2,0x5E,0xFF,
0xEE,0xF,0x4A,0x20,0xDB,0x35,0x95,0x3C,0x35,0x3D,0x41,0x3B,0x27,0x39,0x6D,0x2F,0x98,0x20,0x84,0x17,0x4E,0x9,0xD6,0xFD,0xF1,0xF5,0x69,0xF2,0xD2,0xF3,0x74,0xF5,0xB3,0xFD,
0xC5,0x7,0x35,0xE,0x3F,0x15,0xB5,0x19,0x6E,0x19,0x68,0x18,0x39,0x12,0xB1,0xE,0x43,0x7,0x21,0xFF,0x95,0xFA,0x66,0xF4,0x84,0xF1,0xDC,0xED,0x41,0xF1,0x60,0xF3,0x2B,0xF5,
0xAA,0xF7,0xD1,0xF9,0xC2,0xF7,0x97,0xF2,0xA4,0xF8,0xB3,0xED,0x92,0xDB,0x3A,0xD5,0xCA,0xCB,0x1,0xC1,0x6E,0xBF,0x8D,0xCA,0x64,0xD2,0x8,0xDA,0x65,0xEE,0x70,0x3,0xBE,0x11,
0xD0,0x20,0xE4,0x2F,0xA8,0x37,0xB1,0x36,0x96,0x35,0x86,0x34,0xAB,0x2B,0x78,0x20,0x88,0x15,0xA0,0xB,0x8F,0x2,0xFA,0xF9,0x69,0xF7,0x4F,0xFA,0xAC,0xFD,0xD,0x1,0x5E,0x7,
0xFA,0xD,0x3E,0x10,0xC8,0xF,0xD4,0x10,0x4,0xF,0xCD,0x9,0x34,0x6,0x44,0x2,0x2E,0xFF,0xD6,0xFC,0xC2,0xF8,0x2E,0xF8,0xC1,0xF9,0xCA,0xF9,0x5,0xFB,0xF4,0xFC,0x30,0xFD,
0x2A,0xFB,0x9A,0xF8,0x0,0xF5,0x83,0xF3,0xA,0xEB,0x35,0xDA,0xB8,0xD5,0x4A,0xD0,0xF7,0xC7,0xD7,0xCA,0x1,0xCD,0xAF,0xD1,0x83,0xDA,0x6F,0xE6,0xAA,0xF7,0x34,0x3,0xF,0x10,
0xD2,0x1D,0x9,0x24,0x8A,0x2E,0x18,0x32,0x30,0x30,0x77,0x32,0xDB,0x2C,0x23,0x26,0x22,0x1F,0xFF,0x15,0xBC,0xF,0x6A,0x9,0xFD,0x5,0xC4,0x4,0xA7,0x2,0x4C,0x4,0xA5,0x3,
0xDF,0x2,0x8E,0x5,0x86,0x3,0xF,0x3,0x68,0x3,0x4D,0x2,0x31,0x1,0x30,0xFF,0xC1,0xFD,0x23,0xFB,0xCA,0xF7,0x72,0xF7,0xBE,0xF6,0xCE,0xF5,0x27,0xF6,0x72,0xF4,0x86,0xF3,
0xB2,0xED,0xB1,0xF0,0x8E,0xEC,0x2C,0xDA,0x6F,0xDA,0x9,0xD4,0xE3,0xCA,0x55,0xCF,0xE3,0xD0,0x44,0xD6,0x58,0xDE,0xE3,0xEA,0x32,0xFB,0xB0,0x6,0xBF,0x16,0x7,0x23,0x3A,0x29,
0x86,0x33,0xE1,0x34,0x52,0x34,0x81,0x34,0xFA,0x2D,0xD3,0x26,0x60,0x1C,0x87,0x14,0xEE,0xC,0x9D,0x4,0x7C,0x2,0xC3,0xFE,0xFF,0xFE,0x24,0x1,0xF4,0xFF,0x8D,0x2,0xC4,0x3,
0x8D,0x4,0x60,0x4,0x77,0x3,0xE7,0x4,0x9F,0x2,0xBE,0x0,0x51,0xFF,0xDB,0xFB,0xF5,0xFA,0xF3,0xF7,0x9F,0xF6,0xB6,0xF8,0xEA,0xF8,0x5A,0xF7,0x79,0xF6,0xAD,0xF4,0xD0,0xF0,
0x29,0xF4,0xDC,0xEA,0xC7,0xDC,0x15,0xDD,0xCA,0xD4,0xB,0xCF,0x55,0xD2,0x45,0xD4,0xBC,0xD9,0xCB,0xE1,0x7F,0xEF,0x50,0xFE,0xDD,0x9,0xA2,0x18,0x2E,0x21,0x54,0x29,0xAF,0x32,
0x15,0x31,0x81,0x31,0xD6,0x30,0xA7,0x2A,0x24,0x22,0xFF,0x18,0xA2,0x12,0x5F,0xA,0x89,0x5,0x27,0x3,0x11,0x0,0x36,0x2,0xF8,0x2,0x62,0x2,0x1,0x5,0x26,0x6,0x95,0x6,
0x23,0x5,0xA2,0x5,0x36,0x6,0x48,0x3,0x55,0x2,0x70,0xFF,0x48,0xFC,0x1A,0xFC,0xD3,0xF9,0xD,0xF8,0x67,0xF8,0x3B,0xF8,0xAB,0xF6,0x7C,0xF5,0x8C,0xF2,0x8C,0xEE,0xC7,0xF1,
0x4C,0xE7,0x22,0xD9,0x33,0xDA,0x3,0xD2,0xC3,0xCC,0x69,0xD0,0xE7,0xD2,0x1D,0xDA,0x5B,0xE3,0xB6,0xF0,0xA4,0xFF,0xF9,0xC,0xC3,0x1B,0x24,0x23,0x78,0x2B,0x6A,0x35,0xDB,0x33,
0xA3,0x33,0x7C,0x31,0x81,0x2B,0x1,0x24,0x41,0x19,0x21,0x12,0x59,0xA,0x55,0x5,0x2B,0x3,0xA2,0xFF,0x51,0x1,0x27,0x3,0x59,0x2,0x69,0x4,0x32,0x6,0x10,0x7,0xE8,0x5,
0xEB,0x5,0x4B,0x6,0xBD,0x3,0xE2,0x1,0x59,0xFE,0xD3,0xFB,0x6C,0xF9,0xD0,0xF6,0x26,0xF7,0xF6,0xF5,0x30,0xF6,0x18,0xF5,0xE1,0xF2,0x42,0xF1,0x19,0xED,0xA3,0xF0,0xFC,0xE5,
0x2B,0xD7,0x44,0xDA,0x50,0xD1,0xAA,0xCC,0x8A,0xD1,0xD3,0xD3,0xCD,0xDD,0x4B,0xE6,0xF9,0xF3,0xEC,0x3,0xDD,0xE,0x57,0x1E,0xD4,0x24,0x9A,0x2A,0xC3,0x32,0x7,0x30,0xB9,0x2E,
0x1C,0x2A,0xEA,0x23,0x6D,0x1D,0x8,0x13,0xD9,0xD,0xB3,0x7,0x44,0x4,0x24,0x4,0xFE,0x0,0x73,0x3,0x90,0x5,0x3E,0x5,0x5A,0x7,0x2F,0x7,0xEC,0x7,0xE1,0x6,0x0,0x5,
0x8,0x5,0xB,0x2,0x22,0x1,0xD5,0xFD,0x7B,0xFA,0x32,0xFA,0xA5,0xF6,0x37,0xF7,0x11,0xF6,0xDC,0xF5,0x1C,0xF4,0x7C,0xF3,0xE7,0xF0,0x7B,0xE7,0x22,0xE8,0x15,0xDF,0xAF,0xD7,
0x78,0xD6,0xE9,0xD3,0x52,0xD5,0xE1,0xD6,0x6F,0xDF,0x8,0xE8,0x35,0xF3,0xB7,0x0,0xEA,0xA,0x10,0x16,0x14,0x21,0x7C,0x26,0x2C,0x2B,0x9C,0x2A,0xAF,0x27,0xE2,0x21,0x5C,0x1B,
0x5E,0x16,0xEB,0xE,0xE7,0xB,0x4,0x7,0x4D,0x6,0x47,0x5,0xD,0x5,0x22,0x7,0xB1,0x7,0x24,0xA,0x5A,0xA,0xFD,0xC,0xB5,0xC,0x9C,0xA,0xA5,0x8,0x92,0x5,0x28,0x1,
0x78,0xFD,0x71,0xF6,0xBC,0xF2,0x30,0xEE,0x2C,0xEC,0x3A,0xEA,0x96,0xE5,0xA2,0xF0,0x6F,0xE0,0xA7,0xD9,0xEB,0xD5,0x7,0xCA,0x61,0xCF,0x2,0xC7,0x83,0xCE,0x6D,0xD3,0x50,0xDB,
0x3A,0xEC,0x1D,0xF4,0xB4,0x7,0x89,0x13,0x13,0x1F,0x34,0x2D,0x50,0x33,0xB6,0x3C,0x5A,0x38,0xC,0x37,0xDE,0x30,0x33,0x26,0x59,0x20,0x5E,0x14,0x88,0xE,0x92,0x6,0x16,0x6,
0x21,0x3,0x1B,0x0,0x81,0x2,0xDE,0x0,0x23,0x4,0x66,0x5,0x7A,0x6,0x63,0x9,0x75,0x8,0x8D,0x8,0xDC,0x6,0xDC,0x3,0x3E,0x1,0xC7,0xF9,0xD0,0xF7,0xE8,0xF0,0xC8,0xF1,
0xE3,0xED,0x4F,0xE7,0x11,0xF2,0x97,0xE0,0x9C,0xDA,0x23,0xD4,0x16,0xCA,0xB8,0xCE,0xFD,0xC4,0x2F,0xCF,0xF,0xD3,0xE3,0xDA,0xE9,0xEB,0x29,0xF4,0x2,0x8,0xD7,0x12,0xD8,0x1E,
0x91,0x2B,0xD5,0x33,0x50,0x39,0x1,0x36,0x69,0x36,0x4B,0x30,0xEC,0x27,0xB4,0x20,0x4F,0x17,0x19,0x10,0xD5,0x8,0xEF,0x6,0xE8,0x2,0xFA,0xFF,0x42,0x1,0xA6,0xFF,0xF0,0x1,
0xDC,0x1,0x93,0x3,0xBF,0x5,0x6F,0x4,0x95,0x6,0xA2,0x4,0x6C,0x3,0x3D,0xFF,0x18,0xFA,0x18,0xF8,0xF1,0xF0,0x3B,0xF3,0x5F,0xEC,0x83,0xEB,0x73,0xEF,0x17,0xDE,0x97,0xDC,
0x90,0xD2,0x82,0xCE,0x1E,0xCF,0x1A,0xC9,0x82,0xD4,0x3F,0xD6,0x92,0xE1,0x2D,0xEF,0x8C,0xFA,0xE6,0xC,0x25,0x16,0xC,0x23,0xAC,0x2E,0xB2,0x34,0xDF,0x36,0xBB,0x34,0x5,0x34,
0xA5,0x2C,0x71,0x24,0x21,0x1E,0x4B,0x15,0xFA,0xE,0xDA,0x8,0xC3,0x6,0x92,0x2,0x91,0xFF,0xC7,0x0,0x4D,0xFF,0xB2,0x0,0x3A,0x0,0x35,0x2,0x3C,0x3,0xE6,0x1,0xDC,0x3,
0x84,0x1,0x38,0x0,0xB1,0xFC,0x8E,0xF8,0x38,0xF5,0x2C,0xF1,0x89,0xEF,0x1,0xE9,0x42,0xED,0xCB,0xE6,0x33,0xDA,0xC2,0xD7,0x30,0xCE,0x4B,0xCE,0xA2,0xCA,0xAC,0xCB,0xE2,0xD4,
0xAB,0xD8,0x50,0xE6,0x50,0xF2,0xFF,0x0,0x61,0x10,0x4C,0x1A,0x80,0x27,0x78,0x31,0xE2,0x36,0x6B,0x37,0xAB,0x35,0xA1,0x31,0xEE,0x2A,0xFB,0x22,0xC8,0x1B,0xB,0x12,0x63,0xD,
0x38,0x8,0xC1,0x5,0x95,0x1,0x26,0x0,0xEC,0x0,0xD2,0xFF,0xF,0x3,0x5C,0x3,0x8C,0x4,0xB3,0x5,0xEA,0x6,0x68,0x6,0xA4,0x4,0x9A,0xFF,0x96,0xFE,0xCA,0xF4,0x9A,0xFA,
0xAB,0xED,0xAE,0xEB,0x58,0xF5,0xF7,0xEA,0xA4,0xE9,0x9,0xD9,0x3B,0xD0,0x9B,0xC6,0x3E,0xCB,0x94,0xC7,0x93,0xC9,0x76,0xD9,0xF,0xDE,0x81,0xEC,0x3,0xFA,0xCE,0xD,0x9,0x17,
0xDB,0x21,0x9B,0x32,0x8A,0x33,0x82,0x36,0xF4,0x35,0x34,0x31,0xDB,0x24,0xC,0x1D,0xAD,0x17,0xD7,0xA,0x84,0x5,0xDE,0x3,0x31,0x2,0xB7,0xFF,0x95,0x2,0x11,0x5,0x89,0x3,
0x33,0x8,0x99,0x9,0x9C,0x9,0x94,0x8,0xD5,0x9,0xD7,0x7,0x83,0x3,0x7,0x3,0xE0,0xFB,0xAC,0xF9,0x71,0xF1,0xE4,0xF4,0xD8,0xEA,0xA9,0xEE,0x2F,0xEE,0xA2,0xE1,0xDE,0xE5,
0xF8,0xD4,0xD2,0xD0,0xA,0xCA,0xFE,0xCC,0xC6,0xCB,0x6E,0xCF,0xE5,0xDF,0x93,0xE3,0x5B,0xF4,0x72,0x4,0xAB,0x12,0x25,0x1F,0x67,0x28,0xBC,0x36,0x7A,0x34,0xD5,0x37,0xD3,0x35,
0xAD,0x2B,0xFF,0x22,0x83,0x18,0x48,0x12,0xBC,0x1,0xFE,0x1,0xCA,0xFC,0x66,0xFA,0x21,0xFC,0xC9,0xFF,0x6A,0x1,0xCB,0x2,0xFF,0xA,0xC,0xB,0xCC,0xD,0x6D,0x10,0x27,0xE,
0x5E,0xB,0x97,0x7,0xFF,0x3,0x18,0xFE,0x98,0xF6,0x4C,0xF6,0xB9,0xEB,0x97,0xF1,0x85,0xE3,0x1B,0xEF,0x0,0xED,0xFE,0xDB,0xBE,0xEA,0xEA,0xD5,0x79,0xD3,0xE3,0xCC,0x82,0xD2,
0x38,0xCC,0x3,0xCE,0xFF,0xE3,0x10,0xE2,0x0,0xF4,0xF8,0x5,0x18,0x15,0xD2,0x1E,0x85,0x2B,0xF1,0x3B,0x58,0x34,0x4,0x3B,0x1B,0x38,0xF4,0x2A,0x6E,0x21,0xA3,0x17,0x44,0x10,
0x0,0xFC,0x2B,0x2,0x29,0xF8,0xE5,0xF5,0x4F,0xFA,0x5A,0xFE,0xE5,0xFF,0xB5,0x1,0xFB,0xE,0x9A,0xA,0xFE,0x11,0x7A,0x13,0x36,0x14,0x1E,0xD,0x84,0xE,0x93,0x5,0x62,0xFF,
0xB4,0xF7,0x37,0xF5,0x31,0xEA,0x28,0xEC,0x63,0xE9,0xA5,0xE0,0x9A,0xF7,0xC4,0xD7,0x19,0xE9,0xA5,0xDE,0xB7,0xD2,0x8,0xD6,0x50,0xCD,0x98,0xD8,0x8C,0xC8,0x6F,0xE3,0xB3,0xE3,
0xEB,0xEE,0xFB,0x1,0xCE,0xF,0xA5,0x1F,0x7F,0x23,0x7C,0x3E,0x75,0x33,0x98,0x3A,0x9E,0x3B,0x18,0x2D,0x11,0x27,0x39,0x18,0x69,0x16,0x2E,0xFD,0x1B,0x2,0x55,0xF9,0x62,0xF1,
0x24,0xFA,0xC1,0xF7,0xAE,0xFF,0xDE,0xFD,0x45,0xC,0xEB,0x8,0x69,0xE,0xB,0x15,0x21,0x10,0x6E,0x11,0x86,0xE,0xC0,0x7,0xFE,0x1,0x4B,0xFB,0x9F,0xF5,0x73,0xEB,0xAA,0xEC,
0x5E,0xEA,0xEE,0xDA,0xAA,0xF2,0xF7,0xDD,0x19,0xDA,0xF4,0xE4,0xA3,0xD1,0x93,0xD2,0xFC,0xCE,0x39,0xD9,0xF9,0xCB,0x45,0xDC,0xBA,0xEA,0x65,0xE6,0xD1,0x0,0xAB,0xA,0x60,0x1A,
0x85,0x20,0xBA,0x36,0x3,0x37,0xE8,0x33,0xDD,0x3F,0x2B,0x2F,0x58,0x29,0x9C,0x1F,0x6B,0x18,0x7C,0x4,0xE0,0x2,0x34,0xFD,0xD3,0xF1,0xC2,0xF6,0x91,0xF7,0xD8,0xF9,0x2B,0xFB,
0x97,0x7,0xB7,0x4,0xEC,0xB,0x35,0xF,0x14,0x11,0xD9,0xE,0xE5,0xD,0x98,0xD,0xE9,0x0,0xAF,0x2,0x6,0xF9,0x6B,0xF3,0x8E,0xED,0x81,0xF3,0xDD,0xDF,0xE,0xED,0x3D,0xEF,
0x6E,0xD5,0xE9,0xE9,0x7,0xDB,0xDE,0xD4,0x1D,0xD3,0x9A,0xDA,0x74,0xD2,0x17,0xD5,0xC3,0xEA,0xBC,0xE3,0x34,0xF6,0x2B,0x7,0xA8,0x10,0xC6,0x1B,0x0,0x2C,0xC4,0x35,0x80,0x2F,
0x1A,0x3B,0x85,0x33,0x1B,0x27,0x8,0x26,0xBC,0x19,0xDC,0xD,0x52,0x5,0x15,0x4,0xB7,0xF6,0x78,0xF8,0x3D,0xFB,0xD7,0xF6,0x46,0xFE,0x63,0x2,0x7B,0x4,0x6C,0x8,0xFE,0xD,
0xD7,0xC,0xBA,0xD,0x1C,0xE,0x92,0x8,0x35,0x4,0xDC,0x0,0x2C,0xF9,0xE8,0xF3,0xDD,0xEF,0x26,0xEF,0x23,0xE3,0x9F,0xEB,0x9,0xED,0x78,0xD8,0x16,0xE8,0x78,0xDF,0x68,0xD4,
0x8B,0xDA,0xFC,0xDA,0x4E,0xD7,0x13,0xDB,0xEB,0xEA,0xFE,0xE7,0x8A,0xF6,0xDD,0x8,0x86,0xC,0x3,0x1C,0xCB,0x29,0x20,0x30,0xF8,0x2F,0xE,0x39,0xFB,0x31,0x71,0x27,0x92,0x29,
0x55,0x18,0x6D,0x10,0x16,0x9,0x9E,0x2,0x17,0xF8,0x55,0xF8,0x3D,0xFA,0xDF,0xF3,0x7F,0xFD,0x5D,0xFF,0x51,0x1,0xE,0x5,0xA6,0xC,0x91,0x9,0xC7,0xB,0x97,0xE,0x71,0x9,
0xAB,0x3,0x51,0x4,0xF,0xFC,0xF7,0xF5,0x15,0xF7,0xA2,0xEF,0xEB,0xEF,0x89,0xE4,0xDD,0xF8,0x24,0xE3,0xE7,0xDB,0xED,0xF1,0x3E,0xD4,0x75,0xDA,0x9,0xDF,0xB0,0xD7,0x7B,0xD6,
0x85,0xDF,0x29,0xE8,0xB5,0xE3,0x64,0xFB,0x12,0x5,0x56,0x8,0xC0,0x1E,0xDB,0x25,0x23,0x2D,0x2C,0x30,0x8C,0x38,0xEB,0x2E,0x6B,0x2A,0x9A,0x2B,0x40,0x17,0xD3,0x15,0xD5,0xC,
0x4D,0x3,0x92,0xFE,0x8B,0xFA,0xA1,0xFA,0x70,0xF7,0x5,0xFB,0xD0,0xFD,0x9E,0xFD,0xE4,0x3,0xA5,0x4,0xA,0x6,0x65,0x9,0x50,0x5,0x62,0x9,0xCD,0x3,0xF2,0x1,0x9A,0xFE,
0x2D,0xFD,0x77,0xF6,0xE5,0xF5,0x1D,0xF3,0x34,0xEA,0xA4,0xF9,0x30,0xE1,0x5B,0xE6,0x60,0xEB,0x59,0xD8,0xD8,0xDF,0xCF,0xDF,0xE7,0xDB,0x84,0xDB,0x25,0xE7,0x6,0xE8,0x90,0xED,
0x1,0xFF,0x8D,0x4,0x93,0xB,0xF2,0x1E,0x5,0x21,0xC3,0x28,0x86,0x30,0x4A,0x2C,0x90,0x2D,0x1F,0x28,0x28,0x24,0xA4,0x19,0x95,0x15,0x62,0xE,0x6E,0x5,0xF0,0x4,0x54,0xFC,
0x69,0xFD,0x50,0xFB,0x60,0xF9,0x2E,0xFD,0x4F,0xFB,0x9C,0xFD,0x22,0x0,0x72,0x0,0x5,0x3,0x8D,0x2,0x13,0x4,0x0,0x3,0xCA,0x1,0x67,0x0,0x6F,0xFD,0x4,0xFC,0xE2,0xF6,
0xF1,0xF8,0x41,0xF0,0x3E,0xF6,0x36,0xED,0x37,0xE4,0x9F,0xEF,0x38,0xDE,0xA,0xE1,0x7F,0xE4,0x38,0xDE,0xE4,0xE0,0x5B,0xE5,0x38,0xEA,0xD7,0xEA,0x6A,0xF8,0x8A,0xFF,0xC9,0x3,
0x1D,0x14,0xE4,0x17,0x5D,0x1D,0xD6,0x28,0x69,0x24,0x1A,0x26,0xCC,0x29,0x0,0x1E,0x47,0x1D,0xB7,0x19,0xF,0xE,0x38,0xD,0x2A,0x6,0x93,0xFF,0x15,0xFF,0x32,0xFB,0xA9,0xF9,
0x27,0xFA,0x8D,0xFB,0x84,0xFA,0xA0,0xFE,0xB6,0xFF,0xE,0xFE,0xE9,0x4,0x34,0x2,0xBB,0x1,0x31,0x4,0x4,0x1,0x76,0x0,0xD1,0xFE,0x81,0xFC,0x54,0xFB,0x34,0xFA,0x2E,0xFA,
0xA3,0xF5,0xF9,0xF4,0xB8,0xF7,0x20,0xF0,0x3F,0xEF,0x8B,0xF0,0x8C,0xEB,0xD9,0xEB,0xE7,0xEB,0xA,0xEA,0x8D,0xEC,0xF0,0xED,0x46,0xF0,0x3,0xF5,0x2E,0xF9,0xAD,0xFE,0x6,0x4,
0xA6,0x9,0xE1,0xE,0xF4,0x12,0xD3,0x14,0xE7,0x17,0x2B,0x17,0xDF,0x15,0xB9,0x14,0xCF,0x10,0x41,0xE,0x71,0xA,0xEB,0x7,0xE0,0x5,0x1A,0x2,0x1,0x2,0xA5,0x1,0x43,0xFF,
0x92,0x1,0x96,0x0,0xD3,0x0,0x80,0x2,0xB1,0x0,0xD3,0x0,0x37,0x2,0x3E,0x0,0x4D,0xFF,0xC1,0x0,0x27,0xFE,0x1F,0xFE,0x5E,0xFE,0xE,0xFD,0x48,0xFD,0xC6,0xFC,0xD5,0xFB,
0xEC,0xF9,0x45,0xFC,0x67,0xFA,0x34,0xF7,0xAF,0xFA,0x1F,0xF8,0x4B,0xF7,0xC5,0xF7,0xF4,0xF6,0xF8,0xF6,0x3E,0xF5,0xF1,0xF5,0xA2,0xF7,0x34,0xF6,0x6F,0xF7,0x24,0xFA,0x64,0xF9,
0x5F,0xFC,0x21,0xFE,0x16,0xFF,0x94,0x1,0x4F,0x3,0x98,0x5,0xE1,0x5,0xEE,0x6,0x78,0x8,0xA5,0x7,0x9F,0x8,0x54,0x8,0x2D,0x7,0x2D,0x8,0x4D,0x6,0x38,0x6,0x4F,0x6,
0xCB,0x3,0x16,0x5,0x84,0x3,0xFE,0x1,0x9E,0x2,0x5A,0x1,0xF8,0xFF,0x1E,0xFF,0xDF,0xFF,0x83,0xFD,0x6,0xFE,0x21,0xFE,0x1F,0xFD,0xB8,0xFD,0x5B,0xFD,0xD0,0xFD,0x3,0xFD,
0x73,0xFE,0xCA,0xFD,0x71,0xFD,0xC7,0xFE,0xF8,0xFD,0x32,0xFE,0x20,0xFE,0x6B,0xFE,0xF7,0xFD,0xB0,0xFD,0xB3,0xFE,0xE3,0xFD,0x9A,0xFD,0x9B,0xFE,0x43,0xFE,0x9,0xFE,0x87,0xFE,
0x60,0xFE,0xA0,0xFE,0x83,0xFE,0x9B,0xFE,0xDB,0xFE,0xBD,0xFE,0xF,0xFF,0x2B,0xFF,0x86,0xFF,0x9C,0xFF,0x17,0x0,0x73,0x0,0x8B,0x0,0x10,0x1,0xFF,0x0,0x59,0x1,0xA7,0x1,
0x5D,0x1,0x72,0x1,0x78,0x1,0x6,0x1,0xE1,0x0,0x9A,0x0,0x2F,0x0,0xEB,0xFF,0x6F,0xFF,0x2C,0xFF,0xC9,0xFE,0x83,0xFE,0x49,0xFE,0x2A,0xFE,0x27,0xFE,0x25,0xFE,0x2C,0xFE,
0x57,0xFE,0x77,0xFE,0x94,0xFE,0xDF,0xFE,0xE2,0xFE,0x2D,0xFF,0x5E,0xFF,0x7A,0xFF,0xB1,0xFF,0xD7,0xFF,0xDD,0xFF,0xFB,0xFF,0x25,0x0,0x14,0x0,0x1C,0x0,0x23,0x0,0x9,0x0,
0xB,0x0,0xD,0x0,0xED,0xFF,0xF2,0xFF,0xE1,0xFF,0xD1,0xFF,0xCA,0xFF,0xD3,0xFF,0xDB,0xFF,0xD3,0xFF,0xFB,0xFF,0x1,0x0,0x12,0x0,0x2A,0x0,0x36,0x0,0x5C,0x0,0x52,0x0,
0x5B,0x0,0x46,0x0,0x2F,0x0,0x20,0x0,0xFA,0xFF,0xE4,0xFF,0xAC,0xFF,0x8B,0xFF,0x6F,0xFF,0x41,0xFF,0x2E,0xFF,0x27,0xFF,0x5,0xFF,0x12,0xFF,0x16,0xFF,0x1F,0xFF,0x3F,0xFF,
0x58,0xFF,0x7E,0xFF,0xA0,0xFF,0xC8,0xFF,0xDA,0xFF,0xA,0x0,0x27,0x0,0x3A,0x0,0x59,0x0,0x5D,0x0,0x60,0x0,0x5F,0x0,0x5D,0x0,0x47,0x0,0x35,0x0,0x24,0x0,0x12,0x0,
0x12,0x0,0xF3,0xFF,0xEB,0xFF,0xF5,0xFF,0xDF,0xFF,0xE9,0xFF,0xE1,0xFF,0xE2,0xFF,0xEA,0xFF,0xF3,0xFF,0x9,0x0,0x6,0x0,0x16,0x0,0x1F,0x0,0x25,0x0,0x31,0x0,0x31,0x0,
0x37,0x0,0x38,0x0,0x36,0x0,0x21,0x0,0x13,0x0,0xD,0x0,0xF1,0xFF,0xF7,0xFF,0xDC,0xFF,0xDA,0xFF,0xDE,0xFF,0xC5,0xFF,0xD3,0xFF,0xD7,0xFF,0xDC,0xFF,0xD9,0xFF,0xF8,0xFF,
0x17,0x0,0x6,0x0,0x27,0x0,0x55,0x0,0x58,0x0,0x80,0x0,0x8D,0x0,0x98,0x0,0xB1,0x0,0xA8,0x0,0xB8,0x0,0xBF,0x0,0xA4,0x0,0xA9,0x0,0xA6,0x0,0x6E,0x0,0x88,0x0,
0x7F,0x0,0x56,0x0,0x4C,0x0,0x3B,0x0,0x3F,0x0,0x39,0x0,0x2F,0x0,0x31,0x0,0x2F,0x0,0x16,0x0,0x39,0x0,0x54,0x0,0x40,0x0,0x3F,0x0,0x5D,0x0,0x6B,0x0,0x68,0x0,
0x6B,0x0,0x7E,0x0,0x85,0x0,0x7D,0x0,0x88,0x0,0x8F,0x0,0x93,0x0,0x82,0x0,0x89,0x0,0x8F,0x0,0x89,0x0,0x93,0x0,0x97,0x0,0x93,0x0,0x97,0x0,0x9C,0x0,0x9D,0x0,
0xA3,0x0,0xB1,0x0,0xB5,0x0,0xBD,0x0,0xC8,0x0,0xC5,0x0,0xC5,0x0,0xD3,0x0,0xD7,0x0,0xD1,0x0,0xD5,0x0,0xCF,0x0,0xD0,0x0,0xCA,0x0,0xC4,0x0,0xB9,0x0,0xAF,0x0,
0x9E,0x0,0x8E,0x0,0x8C,0x0,0x7D,0x0,0x7D,0x0,0x76,0x0,0x69,0x0,0x66,0x0,0x66,0x0,0x64,0x0,0x5E,0x0,0x5C,0x0,0x5D,0x0,0x5B,0x0,0x60,0x0,0x62,0x0,0x64,0x0,
0x6E,0x0,0x61,0x0,0x68,0x0,0x6B,0x0,0x5F,0x0,0x62,0x0,0x60,0x0,0x5F,0x0,0x59,0x0,0x59,0x0,0x51,0x0,0x50,0x0,0x52,0x0,0x50,0x0,0x4A,0x0,0x46,0x0,0x3F,0x0,
0x43,0x0,0x44,0x0,0x35,0x0,0x42,0x0,0x3A,0x0,0x39,0x0,0x3A,0x0,0x43,0x0,0x48,0x0,0x44,0x0,0x4B,0x0,0x3E,0x0,0x3C,0x0,0x32,0x0,0x25,0x0,0x33,0x0,0x1F,0x0,
0xE,0x0,0x15,0x0,0x7,0x0,0x1,0x0,0xE1,0xFF,0xBB,0xFF,0xAB,0xFF,0x9F,0xFF,0x99,0xFF,0xA4,0xFF,0xC6,0xFF,0xF9,0xFF,0x44,0x0,0x95,0x0,0xE4,0x0,0x3F,0x1,0x8F,0x1,
0xE3,0x1,0x24,0x2,0x53,0x2,0x79,0x2,0x92,0x2,0x99,0x2,0x8B,0x2,0x7A,0x2,0x4B,0x2,0x1C,0x2,0xD9,0x1,0x89,0x1,0x35,0x1,0xE4,0x0,0x95,0x0,0x45,0x0,0x1,0x0,
0xD1,0xFF,0xA4,0xFF,0x6F,0xFF,0x57,0xFF,0x3F,0xFF,0x31,0xFF,0x33,0xFF,0x43,0xFF,0x4D,0xFF,0x5B,0xFF,0x7A,0xFF,0x83,0xFF,0x7C,0xFF,0x6E,0xFF,0x57,0xFF,0x41,0xFF,0xD,0xFF,
0xCC,0xFE,0x8B,0xFE,0x40,0xFE,0xF3,0xFD,0xBC,0xFD,0x73,0xFD,0x6,0xFD,0xD1,0xFC,0xA8,0xFC,0x77,0xFC,0x53,0xFC,0x20,0xFC,0x35,0xFC,0x56,0xFC,0x59,0xFC,0x8B,0xFC,0xE9,0xFC,
0x62,0xFD,0xCF,0xFD,0x98,0xFE,0x67,0xFF,0x25,0x0,0x23,0x1,0xF6,0x1,0x9A,0x2,0x6C,0x3,0x3,0x4,0x6A,0x4,0xC1,0x4,0xED,0x4,0x11,0x5,0x10,0x5,0x20,0x5,0xA3,0x4,
0x3D,0x4,0x9,0x4,0x7C,0x3,0x26,0x3,0xDD,0x2,0x38,0x2,0xBC,0x1,0x73,0x1,0x32,0x1,0xCC,0x0,0x96,0x0,0xB0,0x0,0x17,0x0,0xF3,0xFF,0x6,0x0,0x14,0x0,0x16,0x0,
0xB3,0xFF,0x8E,0xFF,0xB6,0xFF,0xD9,0xFF,0x5E,0xFF,0x2C,0xFF,0x3C,0xFF,0x17,0xFF,0xE1,0xFE,0xAA,0xFE,0xB9,0xFE,0xB1,0xFE,0xB3,0xFE,0x8A,0xFE,0xAF,0xFE,0xA3,0xFE,0xC2,0xFE,
0xA6,0xFE,0x84,0xFE,0xF5,0xFE,0x81,0xFE,0xD8,0xFE,0xDB,0xFE,0xE3,0xFE,0xCB,0xFE,0xD2,0xFE,0x9D,0xFE,0xA2,0xFE,0x4,0xFF,0xB0,0xFE,0xFC,0xFE,0x2B,0xFE,0xC4,0xFE,0x3A,0xFF,
0xD0,0xFE,0x59,0xFF,0x6B,0xFF,0x53,0xFF,0xBF,0xFF,0xC2,0xFF,0x5D,0x0,0xDB,0x0,0xD2,0x0,0xD0,0x0,0xFD,0x0,0x67,0x1,0x16,0x1,0x59,0x1,0xB4,0x0,0xCD,0x1,0x3B,0x1,
0xA5,0x1,0x6E,0x0,0x8C,0x0,0xD7,0x0,0xDD,0xFF,0x6F,0x0,0x1D,0x1,0x1A,0x0,0x8A,0xFF,0xB,0x1,0x21,0xFD,0x7A,0x6,0x21,0xFC,0x8E,0xF6,0x3,0x5,0xB8,0xA,0x32,0x7,
0x25,0xF2,0x3,0xF5,0x7C,0xF,0x51,0xB,0xDD,0xF9,0x98,0x0,0xE3,0xFB,0x69,0x4,0xEE,0x6,0x92,0xF4,0x75,0xFF,0xA6,0xA,0xBE,0x4,0x7B,0xFC,0x1A,0x0,0x20,0x7,0xDE,0x0,
0x6B,0xFB,0x9E,0x0,0xE2,0x3,0x63,0xF9,0x5,0xF6,0xA9,0xFE,0x31,0x0,0xBE,0xFD,0xAD,0xFE,0x31,0x2,0x3F,0x0,0x89,0xFE,0x83,0x1,0x39,0x5,0xEA,0x1,0x38,0xFF,0x1D,0x1,
0x26,0xFE,0xE6,0xFC,0xE9,0xFD,0x93,0xFD,0x81,0xFD,0xED,0xFB,0xA,0xFD,0x6D,0xFE,0x13,0xFD,0xEC,0xFD,0x75,0x0,0xFF,0xFE,0x99,0xFF,0xD1,0x1,0x22,0xFD,0x5,0x1,0xB5,0x0,
0x77,0xFC,0xA6,0x0,0x7D,0xFE,0x4A,0x0,0x34,0xFD,0x4F,0xFF,0x7D,0xFF,0x25,0xFE,0x3B,0x0,0x50,0xFE,0xB2,0x1,0xFE,0xFC,0xF8,0x0,0xD6,0xFF,0x7,0xFF,0x32,0xFC,0x2A,0x0,
0xA4,0xFF,0x11,0xFD,0x8F,0x0,0x6,0xFE,0xE8,0xFF,0x26,0xFD,0x7,0x3,0x4B,0x0,0x3C,0xFC,0xFE,0xFE,0x52,0x5,0x9B,0xFC,0x3A,0xFA,0x70,0x4,0x90,0x1,0x98,0xF9,0x75,0xFF,
0xC9,0x6,0x67,0xFB,0x43,0xFD,0xB3,0x2,0xF0,0x1,0x65,0xFC,0x94,0xFC,0x47,0x4,0x56,0x1,0xCB,0xFA,0x75,0xFF,0x19,0x5,0x59,0xFF,0xD3,0xFB,0xE0,0x2,0x51,0x3,0x19,0xFE,
0x99,0xFE,0x53,0x1,0xAF,0x3,0xA6,0xFB,0x46,0xFF,0xB6,0x4,0xFC,0xFE,0x59,0x0,0x5F,0xFE,0x36,0x2,0xB0,0x3,0xDA,0xFC,0xB7,0x1,0x85,0x1,0x21,0x2,0x26,0xFE,0xB7,0xFF,
0x4E,0x4,0xD0,0xFE,0x3A,0xFF,0x5E,0x0,0xE1,0x3,0xBF,0xFD,0xD6,0xFF,0xA0,0x1,0x40,0x2,0x64,0xFD,0x9C,0xFE,0xA9,0x4,0xC9,0xFD,0x47,0x0,0x4A,0xFF,0x29,0x1,0xCE,0x2,
0xBB,0xFC,0xB2,0x0,0x4C,0x1,0xE0,0x0,0x15,0x0,0xB4,0xFD,0xC3,0x3,0x2E,0xFD,0xA8,0x2,0x3C,0xFE,0x55,0xFF,0xC3,0x0,0x6,0xFE,0x18,0x2,0x54,0xFE,0xFD,0x0,0x87,0xFE,
0xA4,0x2,0xC,0xFE,0xD7,0x1,0xC1,0xFE,0xBC,0x1,0x11,0xFF,0x6C,0xFE,0x29,0x4,0x32,0xFF,0xA9,0xFE,0x71,0xFF,0xE7,0x3,0x9C,0xFD,0xC,0xFE,0x75,0xFF,0xBE,0x3,0x3D,0xFD,
0x62,0xFD,0x74,0x2,0x85,0x2,0x57,0xFC,0x3,0xFF,0xF3,0x4,0x71,0xFB,0xEA,0xFF,0x80,0x2,0xCA,0xFD,0x87,0xFF,0xBF,0x1,0x7D,0xFF,0xB0,0xFE,0xC1,0xFF,0x50,0x2,0x3A,0xFE,
0x40,0xFE,0xAF,0x2,0xBD,0x0,0x99,0xFB,0x30,0x2,0x6E,0x2,0x42,0xFE,0xF4,0xFE,0x9C,0x1,0x95,0x1,0x94,0xFD,0xBA,0x0,0x6F,0x1,0xA9,0xFF,0xE,0xFE,0x83,0x3,0x27,0xFF,
0x1E,0xFF,0xA7,0x0,0x6D,0x1,0x2,0xFF,0x21,0x0,0x7B,0x2,0x59,0xFE,0x85,0x1,0x2C,0x0,0x25,0x1,0x35,0xFF,0x27,0x2,0xE2,0xFE,0x11,0x0,0x9B,0x1,0x2B,0x0,0xD4,0xFE,
0xC6,0xFE,0x5,0x3,0xF2,0xFE,0x78,0x0,0x65,0xFF,0xA,0x2,0x88,0xFF,0xF7,0x0,0x64,0xFF,0x87,0x0,0xA,0x2,0x1A,0xFE,0x4D,0x2,0xC5,0xFF,0x74,0x1,0xE4,0xFF,0x49,0x0,
0xBF,0x0,0x38,0x0,0xCC,0xFF,0x14,0x0,0xD2,0x0,0x58,0xFF,0x59,0x0,0x24,0xFF,0xB5,0x0,0x5E,0x1,0x16,0xFF,0x7D,0x1,0xAA,0x1,0xB2,0xFE,0x82,0x0,0x5E,0x0,0x63,0x0,
0x85,0xFF,0x41,0xFF,0xBB,0x2,0xB7,0xFE,0x7E,0xFF,0xC6,0x1,0xFB,0x0,0xE5,0x0,0x2,0xFE,0xBF,0x1,0xA4,0x0,0x20,0xFF,0x9F,0xFF,0x30,0xFF,0x82,0x1,0x50,0xFF,0x21,0xFF,
0x8E,0x0,0x89,0x0,0xCD,0xFF,0xF9,0xFF,0x1,0x0,0xE5,0x0,0x81,0x0,0xF7,0xFE,0xB6,0xFF,0xA9,0x0,0xC3,0xFF,0xA4,0x0,0x86,0x0,0x6A,0xFF,0x44,0x0,0x75,0xFF,0xED,0x0,
0x36,0xFE,0x26,0x1,0xB7,0x0,0xD5,0xFE,0x4,0x0,0x32,0x0,0x13,0x1,0x9E,0xFE,0x9F,0x0,0x7C,0x0,0x43,0x0,0xBE,0xFE,0x7E,0xFF,0xA1,0x0,0x57,0x0,0xB8,0xFF,0xD5,0xFF,
0xCE,0x0,0x4,0x0,0x9C,0xFF,0x2D,0x1,0x87,0x0,0xE1,0xFE,0xE0,0x0,0xD8,0xFF,0xB4,0xFF,0x62,0xFF,0xF8,0xFF,0xC9,0xFF,0xE2,0xFE,0x50,0xFF,0xEF,0x0,0xC1,0xFF,0x30,0x0,
0x25,0x0,0x7F,0xFF,0xF2,0x1,0xBC,0xFD,0x2F,0x0,0x4B,0xFF,0x2,0x0,0x66,0x0,0x81,0xFE,0x98,0x0,0xBA,0xFE,0x39,0x0,0x11,0x1,0x39,0x0,0xBC,0xFE,0x82,0x2,0x97,0x0,
0xC,0xFF,0x77,0x1,0x37,0x0,0x45,0xFE,0x7A,0xFF,0x9B,0x0,0xDC,0xFF,0xAD,0xFF,0x97,0xFF,0x3C,0x1,0x37,0xFE,0xC1,0xFF,0x16,0x0,0xE6,0x0,0x5E,0x0,0xDA,0xFE,0xC3,0x1,
0x4D,0xFF,0x33,0xFF,0x23,0x1,0xCA,0xFF,0xB9,0xFF,0x3A,0x0,0x7B,0xFF,0xA8,0xFF,0xD7,0xFF,0xCC,0xFF,0xD0,0x0,0x4C,0x0,0xAE,0xFE,0x9E,0x0,0xCB,0x0,0xB2,0xFF,0xB1,0xFF,
0xF5,0xFF,0xE4,0xFF,0xAD,0xFF,0x46,0xFF,0xA8,0xFF,0x7D,0x0,0xB1,0x0,0x94,0xFF,0xD7,0xFE,0xB0,0x0,0xE1,0x0,0x2D,0xFF,0x18,0xFF,0x3C,0x1,0xE2,0xFE,0x38,0x0,0xF9,0xFF,
0xB4,0xFF,0xF9,0x1,0xDD,0xFD,0xA2,0x0,0x47,0x0,0xCB,0xFE,0xF,0x0,0x69,0xFE,0xBE,0x0,0x46,0x0,0x82,0x0,0x9E,0xFF,0x9,0x0,0xB9,0x1,0xD6,0xFD,0xDB,0x0,0xFB,0xFE,
0xB6,0xFF,0x1E,0x1,0xA0,0xFE,0x11,0x1,0x7A,0xFE,0x61,0x1,0x7B,0x0,0x92,0xFF,0x47,0x0,0x26,0x0,0xD5,0xFF,0x21,0xFE,0xE4,0xFF,0x81,0x0,0xBE,0x0,0x84,0xFF,0x55,0xFF,
0xBE,0xFF,0x8A,0x0,0xCC,0xFF,0x79,0xFE,0xAC,0xFF,0x87,0x1,0xD0,0xFF,0xFA,0xFE,0xAC,0xFF,0x7F,0x0,0x0,0xFF,0x60,0x0,0x42,0x0,0x7E,0xFF,0x93,0x1,0x2E,0xFE,0x75,0xFF,
0x9A,0xFE,0x9E,0x0,0x21,0x0,0xA,0xFE,0xDC,0x1,0xB,0x0,0xB7,0x0,0x7D,0xFF,0x92,0xFF,0xF7,0xFF,0xC7,0xFF,0xFD,0x0,0x4B,0xFE,0x95,0xFF,0xBF,0xFF,0x5,0x0,0xEE,0xFE,
0x9A,0xFF,0x28,0x1,0xC7,0xFF,0x38,0x0,0x6B,0xFE,0x48,0x0,0x5C,0x0,0xEB,0xFF,0x25,0x0,0x83,0xFF,0x99,0x0,0xAB,0xFE,0xBE,0xFF,0x55,0x0,0xEA,0xFF,0x10,0x0,0x30,0x0,
0x35,0xFF,0x8D,0xFF,0xCC,0x1,0xD0,0xFD,0x6A,0x0,0x2E,0x1,0x9D,0xFF,0xCD,0x0,0x39,0xFF,0x23,0x0,0xAA,0xFE,0x1C,0x0,0x26,0x0,0x41,0xFE,0x41,0x1,0xC9,0x0,0x3A,0xFE,
0xE2,0xFF,0x97,0x1,0xAB,0x0,0x87,0xFE,0x81,0x1,0x34,0x0,0xAD,0xFC,0xB0,0xFF,0x83,0x1,0xF,0x0,0x52,0xFF,0xF4,0xFF,0xDB,0xFF,0x3,0x1,0xE3,0xFE,0x66,0xFF,0x3A,0x0,
0x59,0x2,0x7F,0xFF,0xD8,0xFC,0xA6,0xFF,0xD8,0x1,0x57,0x0,0xF1,0xFD,0x51,0x1,0xED,0x0,0xA7,0x0,0x85,0xFD,0x5,0x0,0xE9,0x0,0xC8,0xFF,0x2C,0xFF,0xCE,0x0,0xE,0x1,
0x7D,0xFF,0x4D,0x0,0x89,0xFF,0x8C,0x0,0x28,0xFE,0x83,0x1,0xA1,0xFF,0xF9,0xFF,0x1B,0xFF,0xD4,0xFF,0x9,0x3,0x9,0xFE,0x39,0x0,0x89,0x2,0xD,0x0,0x99,0xFE,0xFA,0xFE,
0x75,0x0,0xE7,0xFF,0xE4,0xFE,0x14,0x0,0xBC,0x0,0x14,0x0,0x24,0x0,0x85,0x1,0x4D,0xFE,0xB5,0x0,0xBF,0x1,0x3B,0xFE,0x91,0xFF,0x3D,0x1,0xEB,0x0,0xFF,0xFD,0xCA,0xFE,
0xA,0x2,0x43,0x0,0x79,0xFE,0xCA,0xFF,0xA1,0x0,0x2E,0x1,0xF6,0xFF,0xB6,0xFE,0xBE,0xFF,0x66,0x2,0xAA,0xFF,0x51,0xFE,0xDF,0x0,0x8A,0x0,0xFF,0xFF,0xE1,0xFE,0x8E,0xFF,
0x5B,0x1,0xF3,0xFF,0xFB,0xFE,0xC5,0x0,0x4,0x0,0xE,0x0,0xCB,0x0,0x3A,0xFF,0x95,0x0,0xBC,0xFF,0x4D,0x0,0x18,0x0,0x95,0xFE,0xB8,0x0,0xB6,0xFF,0x5B,0x0,0x1,0xFF,
0x3E,0x1,0x72,0x0,0x41,0xFE,0x64,0x1,0x19,0xFF,0xD3,0x0,0x8C,0xFF,0x30,0x0,0xA0,0x0,0x50,0xFF,0x71,0x0,0xC9,0xFE,0x8,0x1,0xAF,0xFF,0x2D,0x0,0x80,0x0,0xAE,0xFE,
0x60,0x0,0xDD,0xFF,0x50,0x0,0xC4,0x0,0xAA,0xFF,0x4D,0x0,0x54,0xFF,0xE,0x0,0x1C,0x1,0x43,0xFE,0x66,0x0,0x6A,0x0,0xF,0xFE,0x8C,0x2,0xC7,0xFE,0x27,0x0,0x26,0x1,
0xA2,0xFD,0xEA,0x1,0xE5,0xFE,0x6E,0x0,0xF3,0x0,0x17,0xFF,0x72,0x0,0x1A,0x0,0xC8,0xFF,0x5C,0xFF,0x33,0x0,0x54,0x0,0xBA,0xFF,0xD8,0xFF,0x35,0x0,0x2A,0x0,0x95,0xFF,
0x4A,0x0,0xF2,0xFF,0xB0,0x0,0x4,0xFF,0x29,0x0,0xF0,0x0,0xDF,0xFE,0x55,0x0,0x19,0x0,0x3B,0x0,0x4F,0xFF,0xCE,0x0,0x14,0x0,0xC0,0xFF,0xA5,0xFF,0xDD,0x0,0x3A,0xFF,
0x1,0xFF,0x0,0x1,0xA5,0x0,0xB7,0xFE,0xEC,0x0,0x3F,0x0,0x15,0xFF,0x7D,0x1,0x94,0xFD,0x81,0x1,0xF6,0xFF,0x74,0xFE,0x19,0x1,0xA9,0x0,0x98,0xFF,0xE7,0xFF,0x63,0xFF,
0x41,0x2,0xFF,0xFD,0xDB,0xFF,0xE8,0x1,0xA1,0xFD,0xA1,0x0,0x24,0xFF,0xE,0x2,0x81,0xFE,0x42,0x0,0xEE,0xFE,0x70,0x2,0xE0,0xFE,0x16,0xFE,0xB4,0x3,0xB8,0xFD,0xD5,0x1,
0x6A,0xFC,0x97,0x2,0x55,0x0,0xC0,0xFC,0xDE,0x2,0xBA,0xFF,0x48,0x0,0x26,0xFE,0xA6,0x1,0x7B,0x0,0x92,0xFF,0x76,0xFE,0x59,0x1,0xF,0x1,0xCA,0xFC,0x1E,0x2,0x2E,0x0,
0xA,0x0,0x7A,0xFE,0xF,0x1,0xF9,0x0,0xC1,0xFD,0x43,0x1,0xBA,0x0,0xC6,0xFE,0xA2,0xFF,0x37,0x1,0x4A,0xFF,0x48,0xFF,0xC,0x1,0x3D,0x0,0x57,0xFF,0xF0,0x0,0xF5,0xFE,
0xE3,0x0,0xCB,0xFE,0xE0,0xFF,0xE4,0x1,0x28,0xFE,0x72,0x1,0x5A,0xFF,0x2E,0x0,0xEB,0x0,0xC8,0xFE,0xA5,0xFF,0x37,0x1,0x76,0xFE,0xB2,0x0,0x59,0x0,0x3D,0xFF,0x63,0x2,
0x67,0xFC,0x7B,0x2,0x8,0x1,0xBD,0xFC,0xDC,0x2,0xA,0xFF,0x43,0xFF,0xFD,0x0,0x81,0xFF,0x86,0x0,0x91,0xFF,0xDD,0xFF,0x76,0x1,0xB1,0xFE,0x39,0x0,0x9A,0x1,0xC0,0xFD,
0x9A,0x1,0x6C,0xFF,0xEB,0xFE,0x8F,0x1,0x5D,0xFE,0x77,0x1,0xB5,0xFF,0xE0,0xFF,0x3B,0x1,0xA4,0xFE,0xFA,0x0,0xA0,0x0,0xE1,0xFE,0xA6,0x0,0x36,0x0,0x4D,0xFF,0x28,0xFF,
0x8C,0x1,0xED,0xFE,0x71,0x0,0x49,0x0,0x2A,0xFF,0x6D,0x2,0xF9,0xFB,0x58,0x3,0x26,0x0,0xBD,0xFD,0x96,0x1,0x53,0xFF,0x1,0x1,0xF3,0xFD,0x45,0x1,0xDE,0x0,0x71,0xFF,
0x21,0xFF,0xA0,0x1,0x98,0xFF,0x7F,0xFE,0x63,0x1,0x74,0xFF,0x3,0x0,0xDA,0xFE,0x45,0x1,0x37,0x0,0xE,0xFE,0x20,0x2,0xC8,0xFF,0xEA,0xFE,0x1,0x1,0x8,0xFF,0xE5,0xFF,
0xC4,0x0,0x51,0xFF,0xC2,0x0,0x6,0x0,0x30,0xFE,0xF9,0x1,0x8C,0xFF,0xCC,0xFE,0x36,0x1,0x4B,0xFF,0x42,0x0,0x84,0xFF,0x8A,0x0,0x94,0x0,0x1F,0xFE,0x95,0x0,0xBF,0x0,
0xD3,0xFE,0xA6,0xFF,0xE3,0x0,0xCD,0xFF,0x78,0xFF,0x30,0x1,0xAA,0xFF,0x8E,0x0,0x56,0xFE,0x7C,0x0,0xBE,0x1,0x81,0xFC,0xA1,0x1,0xDA,0x1,0x3F,0xFD,0x1B,0x1,0x88,0x0,
0xF5,0xFD,0x93,0x2,0xB4,0xFD,0x0,0x1,0xCF,0x1,0x4E,0xFC,0x25,0x4,0x3E,0xFD,0x8A,0x0,0x45,0x2,0xC2,0xFA,0x4A,0x5,0x53,0xFD,0x8F,0xFF,0x4C,0x3,0x70,0xFC,0x69,0x3,
0xB6,0xFC,0xDC,0x1,0xE8,0xFF,0xB0,0xFD,0xEB,0x3,0xC0,0xFB,0xDB,0x1,0x81,0x0,0x8,0xFE,0x4D,0x2,0x66,0xFE,0xAF,0x1,0x27,0xFF,0xF1,0xFE,0xB3,0x2,0xF8,0xFC,0xD2,0x1,
0xA1,0xFF,0x56,0xFF,0xF0,0x1,0x49,0xFD,0xF6,0x1,0xAF,0x0,0xAB,0xFD,0x7A,0x2,0x57,0xFF,0xF7,0xFE,0x5,0x2,0x53,0xFD,0xEA,0x2,0xA,0xFF,0xAB,0xFE,0x5B,0x2,0xD9,0xFD,
0x83,0x1,0xFE,0xFE,0x14,0x0,0x4,0x1,0x8,0xFE,0x72,0x1,0xE7,0xFF,0x3D,0xFF,0x50,0x1,0x8D,0xFE,0x1D,0x1,0x6A,0x0,0xA0,0xFE,0x64,0x2,0xCD,0xFD,0x78,0x1,0x65,0x0,
0xCD,0xFD,0xB7,0x3,0x36,0xFD,0xB5,0x0,0x5A,0x1,0xF8,0xFD,0x71,0x1,0x98,0xFF,0x46,0xFF,0x15,0x1,0x84,0xFE,0x97,0x0,0x20,0x0,0x47,0xFE,0x51,0x2,0x99,0xFD,0x16,0x1,
0x10,0x0,0x3D,0xFF,0xEC,0x0,0x8F,0xFE,0x41,0x2,0x6,0xFE,0xEB,0x0,0x43,0x1,0x4C,0xFD,0x8C,0x2,0xE2,0xFE,0x3D,0xFF,0x1F,0x2,0x10,0xFD,0x4,0x2,0x59,0xFF,0x90,0xFE,
0x7D,0x2,0xC0,0xFD,0x7E,0x0,0x1,0x1,0x5A,0xFE,0x78,0x0,0xE1,0x0,0xDE,0xFD,0x8B,0x1,0x12,0xFF,0xB8,0xFF,0xD3,0x0,0x89,0xFD,0xFE,0x2,0x29,0xFE,0x5D,0xFF,0x6A,0x2,
0x30,0xFD,0x6F,0x1,0x83,0x0,0x6F,0xFE,0xCA,0x1,0x38,0xFE,0xBB,0x0,0x24,0x0,0xC4,0xFE,0x27,0x2,0xCF,0xFD,0xC5,0x1,0xA9,0xFF,0x28,0xFE,0xDB,0x2,0x86,0xFC,0xC5,0x1,
0x4A,0xFF,0xB3,0xFE,0xAB,0x2,0x8E,0xFC,0x2C,0x2,0x45,0xFF,0xA2,0xFE,0x83,0x1,0x49,0xFF,0xC2,0xFF,0xA9,0xFF,0xB0,0x0,0x9,0xFF,0x9F,0xFF,0xCA,0x0,0xF1,0xFE,0x4E,0x0,
0xB0,0xFF,0xE,0x0,0xF9,0xFF,0xB0,0xFE,0xEF,0x1,0xAB,0xFE,0xC1,0xFF,0x4A,0x1,0x80,0xFE,0x88,0x0,0x1E,0x0,0xC0,0xFF,0xED,0x0,0xDE,0xFE,0x72,0x1,0xB7,0xFF,0x3D,0xFF,
0x4,0x2,0x83,0xFE,0x8,0x1,0xE9,0xFF,0x3D,0x0,0x8B,0x0,0x92,0xFF,0x20,0x1,0xF9,0xFF,0x9,0x0,0xB1,0x0,0xB4,0xFF,0x6D,0x0,0xEA,0xFF,0xF4,0xFF,0x59,0x0,0x7E,0xFF,
0x3A,0x1,0x93,0xFE,0x24,0x1,0xA3,0xFF,0xA5,0xFF,0x62,0x1,0x9,0xFF,0xD8,0x0,0xD7,0xFF,0xAF,0x0,0xFA,0xFE,0xCC,0x0,0x95,0xFF,0x35,0xFF,0x73,0x0,0x6E,0xFE,0x2A,0x1,
0xAE,0xFD,0x42,0x0,0x28,0x0,0xFD,0xFD,0x0,0x1,0x4E,0xFE,0x38,0x0,0xAD,0xFF,0xCE,0xFD,0xA6,0xFE,0x71,0xFD,0xDB,0xFD,0xEC,0xFD,0xFF,0xFD,0x46,0xFE,0x33,0xFF,0xB7,0xFE,
0xA7,0x0,0x4B,0x1,0xC4,0xFF,0xB5,0x3,0x43,0x2,0xC0,0x2,0x80,0x5,0x15,0x4,0xA6,0x5,0x30,0x6,0xD2,0x6,0xDA,0x5,0x8E,0x7,0x62,0x7,0x10,0x5,0x90,0x8,0xCB,0x4,
0x3A,0x6,0x84,0x4,0x57,0x4,0x15,0x4,0x5,0x1,0x15,0x4,0x2,0xFF,0xC,0x1,0x83,0xFF,0x3,0xFE,0xBA,0xFE,0xF1,0xFC,0x93,0xFC,0x7D,0xFC,0xDB,0xFA,0x41,0xFB,0x77,0xF9,
0xAA,0xF8,0xF0,0xFA,0xB1,0xF4,0xF8,0xF8,0x48,0xF6,0x2B,0xF4,0x41,0xF7,0x6C,0xF3,0x2B,0xF4,0xF4,0xF1,0x38,0xF3,0xB3,0xF1,0xA8,0xF1,0x2C,0xF4,0xC6,0xF2,0xE1,0xF6,0x90,0xF8,
0x45,0xFB,0xCF,0xFF,0x4D,0x4,0x40,0x8,0x26,0xC,0xE7,0x11,0x7E,0x12,0xDF,0x15,0xA3,0x18,0xE4,0x14,0x1,0x16,0x79,0x16,0x8C,0x10,0x3A,0x10,0xAE,0xE,0x38,0x9,0xD9,0x8,
0xDC,0x7,0xA2,0x3,0x83,0x3,0xD9,0x4,0x25,0x1,0xD2,0x1,0x1B,0x3,0x34,0x2,0x92,0x0,0xDE,0x4,0xBF,0x3,0x8,0x1,0x5E,0x4,0xA8,0x2,0x2B,0x2,0xC4,0xFF,0x4C,0x2,
0x41,0xFD,0x7,0xFD,0x36,0xFB,0x12,0xFA,0xBA,0xF6,0x5D,0xF3,0x16,0xF4,0x58,0xED,0x2,0xF2,0xE,0xE8,0x2B,0xE9,0xA1,0xE8,0x12,0xE4,0xE0,0xE4,0x7B,0xE4,0xE,0xE7,0x1F,0xE6,
0x90,0xEC,0xF1,0xED,0x90,0xF4,0xC9,0xF9,0xFA,0x0,0x59,0x6,0x62,0xC,0xFF,0x12,0x98,0x14,0x34,0x19,0x80,0x1B,0xC2,0x19,0x4,0x1A,0x26,0x19,0x3B,0x14,0xC7,0x11,0x6D,0xF,
0xF2,0xA,0x36,0x5,0x94,0x7,0x3E,0xFD,0xFA,0xFD,0x52,0xFE,0x3B,0xF8,0x4E,0xFA,0xBD,0xF9,0x3C,0xFC,0x6,0xF9,0x71,0x1,0xA5,0xFF,0x3A,0x2,0x7A,0x7,0x7E,0x6,0x76,0xA,
0x4B,0xB,0x6B,0xD,0xA,0xB,0xE2,0xD,0xC0,0xB,0x49,0x9,0xAD,0x8,0x53,0x5,0xEE,0x3,0xD0,0xFD,0xF0,0xFE,0xF3,0xFA,0x68,0xF5,0x59,0xF6,0x5E,0xF1,0x5D,0xF0,0xB2,0xEC,
0x6F,0xEE,0xBB,0xE9,0x8E,0xE6,0x5,0xE9,0xDA,0xE2,0x16,0xE4,0x49,0xE3,0xF3,0xE3,0x33,0xE4,0x20,0xE8,0x38,0xEC,0x3B,0xEF,0xE,0xF7,0x24,0xFD,0x99,0x3,0x56,0xA,0x3A,0x11,
0x13,0x16,0xBE,0x18,0x7C,0x1D,0xF0,0x1D,0x82,0x1C,0xBE,0x1D,0xB9,0x18,0x2E,0x17,0x10,0x12,0xD7,0xF,0x81,0x9,0x60,0x7,0x39,0x4,0xF5,0xFB,0x54,0x0,0x22,0xFA,0x3F,0xF8,
0xE3,0xF9,0x21,0xFB,0xEA,0xF8,0xAB,0xFD,0x90,0x0,0xD1,0xFF,0x9C,0x4,0xA8,0x6,0xBD,0x8,0x2A,0x8,0xA3,0xD,0xE2,0x9,0x56,0xB,0x49,0xD,0x19,0x8,0x9,0x9,0x75,0x6,
0x6,0x5,0x11,0x1,0x3F,0xFF,0x90,0xFF,0xF4,0xF8,0xCF,0xF9,0x99,0xF6,0xD3,0xF3,0x78,0xF1,0x86,0xEE,0x86,0xF1,0x5D,0xE8,0x9B,0xE9,0x9E,0xE8,0xBB,0xE4,0x12,0xE4,0x3B,0xE4,
0x48,0xE5,0x39,0xE4,0x88,0xEA,0x49,0xEC,0xB5,0xF0,0x48,0xF8,0x52,0xFE,0x51,0x3,0x80,0xB,0x5B,0x11,0x73,0x14,0x4,0x1A,0xCD,0x1B,0x50,0x1C,0xB2,0x1C,0x9,0x1B,0x7A,0x19,
0x48,0x14,0x4E,0x14,0xED,0xC,0x36,0xB,0xF6,0x7,0xF7,0xFF,0xD5,0x2,0xAB,0xFC,0xF5,0xFB,0xA9,0xF8,0xA0,0xFC,0xFB,0xF8,0xAA,0xFB,0xC9,0xFE,0x2B,0xFD,0x78,0x2,0x23,0x3,
0x5,0x6,0xD3,0x5,0x91,0xB,0xAC,0x7,0xF5,0xB,0x84,0x9,0xBF,0x9,0x3,0xA,0x3C,0x5,0x39,0x8,0x50,0x2,0x96,0x3,0xD6,0xFE,0xF7,0xFD,0x3F,0xFD,0x5A,0xF9,0xCB,0xF7,
0xAB,0xF6,0x25,0xF4,0xDB,0xEF,0xAF,0xF2,0x87,0xEE,0x1F,0xEB,0x93,0xEA,0x7,0xE9,0x7F,0xE6,0x3C,0xE4,0x4D,0xE7,0xC1,0xE5,0xC4,0xE6,0x25,0xEC,0x77,0xEE,0xE9,0xF1,0xDC,0xF8,
0x70,0xFF,0x2B,0x3,0xD7,0xA,0x84,0x10,0x5C,0x13,0xA2,0x17,0xA8,0x1A,0xAD,0x19,0xE6,0x19,0xA0,0x1A,0xB2,0x15,0x43,0x14,0x5,0x11,0xFE,0xA,0x9,0x9,0xF8,0x4,0xE9,0x0,
0x89,0xFE,0xBA,0xFC,0x7B,0xFB,0x27,0xF9,0xCA,0xFB,0x4D,0xFA,0xFB,0xFB,0x9D,0xFE,0xD7,0xFE,0x15,0x2,0xE,0x3,0xE2,0x5,0xB1,0x4,0xB,0x8,0x57,0x8,0xBF,0x7,0x51,0x8,
0x5E,0x7,0x8D,0x7,0x66,0x4,0xC3,0x5,0x5C,0x3,0x67,0x1,0xFA,0x1,0xBD,0xFE,0xDE,0xFC,0xC,0xFF,0xDE,0xFB,0xB8,0xF8,0x6F,0xFB,0x84,0xF7,0x90,0xF4,0xE3,0xF4,0x2F,0xF3,
0xF9,0xEF,0x9C,0xED,0x58,0xEB,0xB,0xEB,0xE4,0xE7,0xF8,0xE6,0xA8,0xE9,0xB2,0xE7,0x5C,0xEB,0xF6,0xEE,0xBA,0xF1,0xD3,0xF6,0x68,0xFD,0xC4,0x2,0x8D,0x7,0x78,0xE,0x7D,0x11,
0x15,0x15,0x7B,0x18,0x2A,0x19,0x85,0x19,0x53,0x18,0xE5,0x16,0xA0,0x13,0x6,0x10,0x9A,0xC,0x13,0x9,0xB3,0x4,0x96,0x2,0xEA,0xFF,0x87,0xFD,0xC0,0xFC,0x43,0xFC,0x2C,0xFC,
0xC1,0xFB,0x27,0x1,0x23,0xFC,0x93,0x1,0xB8,0x5,0x1,0x1,0xCE,0x6,0xEF,0x7,0xC9,0x5,0xAD,0x6,0x2E,0x9,0xAE,0x4,0x85,0x6,0x3D,0x5,0x8B,0x4,0xE5,0x1,0x5D,0x3,
0x79,0x1,0x5F,0xFE,0x76,0x1,0x6A,0xFD,0x8A,0xFE,0xCF,0xFB,0xD7,0xFE,0x12,0xFA,0x8C,0xFC,0x36,0xF9,0xE9,0xF7,0x92,0xF9,0xB8,0xF0,0x6E,0xF8,0x1C,0xF0,0xB2,0xEE,0x43,0xEF,
0xD,0xED,0xF7,0xEA,0x81,0xEA,0x19,0xEF,0x27,0xEA,0xF8,0xF0,0x5C,0xF2,0x6,0xF5,0xEC,0xF9,0x77,0xFD,0xD,0x4,0x18,0x5,0x2B,0xC,0xBF,0xE,0x62,0xF,0x4E,0x14,0x65,0x13,
0x6D,0x13,0x7,0x13,0x8A,0x11,0xB,0xE,0x3C,0xB,0xCD,0xA,0xEC,0x4,0x57,0x5,0xD2,0x2,0xAD,0xFF,0xB8,0x0,0x6F,0xFE,0x86,0xFF,0x64,0xFF,0x4F,0x0,0x46,0x1,0x2B,0x1,
0x40,0x4,0x53,0x3,0x13,0x3,0xBA,0x7,0x72,0x2,0x19,0x5,0x88,0x7,0xEC,0x1,0x8E,0x5,0xEE,0x2,0x4D,0x2,0x42,0x2,0x4E,0x0,0x6B,0x0,0xBC,0xFD,0x94,0x0,0x14,0xFC,
0xA7,0xFC,0xBD,0x0,0x9D,0xF9,0x62,0xFE,0x2F,0xFB,0x8F,0xFD,0x36,0xFC,0x7E,0xF9,0x41,0xFF,0x27,0xF7,0xF5,0xFB,0xC9,0xF7,0x4,0xF8,0x5B,0xF7,0x1B,0xF5,0x90,0xF8,0x30,0xF1,
0x58,0xF6,0x4B,0xF3,0xBE,0xF2,0xDC,0xF4,0x9F,0xF2,0x4B,0xF7,0xD7,0xF5,0x40,0xFA,0x6D,0xFB,0x19,0xFD,0x15,0x2,0xE6,0x1,0x66,0x6,0xBC,0x7,0x7E,0x9,0x13,0xB,0xEA,0xA,
0x30,0xC,0xBD,0x9,0x10,0xA,0x78,0x9,0x18,0x7,0x41,0x7,0xF5,0x4,0xD8,0x4,0x32,0x3,0xA9,0x2,0x67,0x2,0xCB,0x0,0x9,0x3,0xD9,0x0,0x82,0x0,0x55,0x4,0xC5,0x0,
0xA0,0x2,0xB5,0x3,0xA7,0x2,0xD3,0x3,0x57,0x1,0xAC,0x4,0x14,0x0,0x93,0x2,0x15,0x3,0xBA,0xFD,0xDA,0x3,0x6D,0xFE,0x9B,0xFF,0xB1,0x0,0x46,0xFD,0x4A,0x1,0x92,0xFB,
0x4E,0x1,0x11,0xFD,0x54,0xFC,0xB,0x2,0xDA,0xF9,0x96,0x0,0x1D,0xFD,0xB1,0xFD,0x40,0xFF,0xFF,0xFB,0x96,0xFF,0x5E,0xFC,0x68,0xFC,0x5E,0xFE,0x9A,0xFB,0xD6,0xFB,0xAF,0xFC,
0x8F,0xFB,0x9,0xFB,0x36,0xFB,0x92,0xFC,0xDF,0xF8,0x31,0xFC,0xA7,0xFB,0xE3,0xF9,0x39,0xFD,0x55,0xFB,0xE6,0xFC,0x42,0xFD,0xB,0xFE,0x85,0xFF,0x72,0xFD,0x97,0xFF,0x36,0x1,
0x59,0xFE,0x85,0x1,0x77,0x1,0x77,0x0,0x79,0x2,0xBA,0x1,0x4A,0x3,0x30,0x2,0x85,0x2,0x34,0x4,0x2C,0x2,0x6,0x4,0x25,0x3,0xC7,0x3,0xB8,0x3,0xA1,0x2,0xEC,0x4,
0x1E,0x2,0x5B,0x4,0x3B,0x2,0x72,0x2,0x8B,0x3,0xEB,0x1,0xF7,0x1,0x2A,0x2,0x60,0x2,0xD5,0x1,0x53,0x2,0x72,0x0,0x1B,0x3,0xF2,0xFF,0xFA,0xFF,0xA9,0x1,0x3,0x0,
0xCC,0xFF,0xF6,0xFE,0x9C,0x2,0xF6,0xFE,0x3,0xFE,0x15,0x4,0x1C,0xFE,0x8B,0xFE,0x40,0x2,0x58,0x0,0x1E,0xFF,0xD6,0xFD,0x5D,0x3,0xCC,0xFD,0x87,0xFB,0xB6,0x2,0x15,0xFE,
0x9,0xFC,0x26,0xFE,0xA0,0x0,0xBA,0xFC,0x87,0xFB,0x8F,0x0,0xA5,0xFC,0x6E,0xFC,0xA8,0xFE,0x1D,0xFF,0x8D,0xFC,0xDF,0xFD,0xEC,0xFF,0x5,0xFF,0xCE,0xFD,0x9D,0xFF,0xF1,0x0,
0x49,0xFC,0x1F,0x1,0x71,0x1,0x41,0xFE,0xA,0x1,0x3,0x1,0x48,0x1,0x41,0xFF,0x95,0x1,0xC3,0x1,0xE5,0xFE,0xF,0x2,0x93,0x1,0xD3,0x1,0x94,0x0,0x56,0x2,0x33,0x1,
0xF,0x0,0x40,0x2,0xA3,0x1,0xBF,0x0,0x97,0x0,0x7D,0x1,0x21,0x0,0x62,0x1,0x84,0x0,0xEF,0x1,0x6C,0xFF,0xC7,0xFF,0x2F,0x2,0xCB,0xFE,0x5A,0x1,0xE,0x0,0x52,0x0,
0x4C,0x1,0x35,0xFE,0x5A,0x2,0xE1,0x0,0xF0,0xFE,0x5D,0x1,0x6D,0x0,0x2,0x0,0xAB,0xFF,0x5,0x1,0x90,0xFE,0xF7,0xFE,0x18,0x0,0x23,0xFF,0x47,0x0,0xD2,0xFE,0xE2,0xFF,
0xF9,0xFE,0xFC,0xFE,0x83,0xFF,0x7D,0xFF,0x70,0x0,0x69,0xFD,0x70,0xFF,0xB8,0xFF,0x6A,0xFF,0xB3,0xFF,0xFD,0xFE,0x87,0xFF,0x7A,0xFE,0x4B,0x0,0x57,0xFE,0xB2,0xFF,0x81,0xFF,
0xD7,0xFD,0xFB,0xFF,0x2A,0xFF,0x9E,0xFF,0x42,0xFE,0xC9,0xFF,0x78,0x0,0xDC,0xFE,0xB6,0xFE,0xD9,0x0,0xAA,0xFF,0x24,0xFF,0x6,0x1,0x38,0x0,0xCE,0xFF,0xDF,0xFE,0x9A,0x0,
0xDB,0x0,0x3C,0x0,0x7C,0x0,0x1E,0x0,0xE8,0xFF,0x2A,0x1,0x59,0xFE,0x23,0x2,0x85,0x1,0xB6,0xFD,0xAB,0x0,0xDF,0x1,0x76,0xFF,0x80,0xFE,0xC5,0x2,0xDF,0xFE,0x6C,0x0,
0x32,0xFF,0x9C,0x0,0x74,0x1,0x93,0xFF,0xF1,0xFF,0x3A,0x0,0xF5,0x0,0x90,0xFE,0x84,0x1,0x5D,0x0,0x48,0xFF,0xF0,0xFF,0x8A,0x1,0xC0,0xFD,0xA9,0x0,0x40,0x0,0x3A,0x0,
0x2F,0x1,0x4E,0xFC,0x37,0x3,0xC7,0xFE,0xD5,0xFC,0x2E,0x3,0xF7,0x0,0x5F,0xFE,0x9B,0xFF,0x60,0x1,0xAD,0xFF,0xD1,0xFC,0x2C,0x1,0xC7,0x0,0xC3,0xFD,0xFB,0xFF,0xBF,0xFF,
0x32,0x1,0x46,0xFE,0x12,0xFE,0xBF,0x2,0x75,0xFE,0xFC,0xFD,0xF0,0x0,0x36,0x0,0x15,0x0,0xE1,0xFE,0x14,0x0,0xFC,0x1,0xB2,0xFF,0xD4,0xFD,0x36,0x1,0xA3,0x1,0x7E,0x0,
0xF3,0xFD,0xEF,0x3,0xB6,0xFE,0x84,0xFE,0x3F,0x4,0xB9,0xFE,0x69,0x1,0x78,0xFE,0xA5,0x2,0x0,0x0,0xB8,0xFE,0x3B,0x0,0x26,0x0,0xCE,0xFF,0x30,0xFF,0x3C,0x0,0x8A,0x1,
0x4C,0x0,0xE6,0xFE,0x10,0x3,0xEE,0xFE,0xA5,0x1,0xD2,0xFE,0xB0,0x0,0x71,0x2,0x3A,0xFD,0xC4,0xFF,0x39,0x2,0x8,0x0,0x9A,0xFE,0x3,0x2,0x21,0xFF,0x6E,0xFF,0x6,0x0,
0x19,0x0,0x39,0x2,0x21,0xFE,0xC8,0xFF,0xBA,0x0,0x6B,0xFF,0xF7,0x0,0xFA,0xFE,0xF0,0x0,0x7B,0xFF,0xB,0xFF,0x17,0x1,0xFC,0xFE,0x72,0xFF,0x93,0xFF,0x55,0x0,0x1E,0x0,
0x44,0xFF,0x3F,0x0,0x71,0x0,0xF2,0x0,0x93,0xFE,0xBF,0xFF,0x80,0x1,0x38,0xFE,0xC5,0xFF,0xA1,0x1,0x8B,0xFE,0x3B,0xFF,0x37,0x0,0x84,0xFF,0xD3,0x0,0x44,0x0,0x48,0xFF,
0xAB,0xFF,0x89,0x1,0xB9,0xFE,0x2B,0x0,0xD2,0x1,0xAD,0xFF,0x42,0xFF,0x2E,0x0,0x90,0x0,0x2E,0xFF,0xB2,0xFF,0x98,0xFF,0x75,0x1,0x69,0xFF,0x44,0x0,0x32,0xFF,0xA5,0x0,
0x5D,0x1,0x9,0xFD,0xFF,0x1,0xCA,0x0,0xE3,0xFE,0x31,0xFF,0x18,0x1,0x64,0x0,0x8D,0xFD,0xE1,0x0,0xD0,0xFE,0xEA,0xFF,0x90,0x0,0x25,0xFF,0xA2,0x1,0x2,0xFF,0x5A,0xFF,
0x87,0x0,0x5B,0xFF,0x55,0xFF,0xB3,0xFF,0x9E,0xFF,0xF3,0x0,0xB1,0xFF,0xF8,0xFD,0x5A,0x1,0x18,0x0,0x15,0xFF,0x90,0xFF,0x25,0x1,0xA7,0x0,0x7F,0xFE,0x5D,0x0,0xCD,0xFF,
0x3A,0x0,0xA9,0xFE,0xD6,0xFF,0x52,0x2,0xC3,0xFD,0xBC,0xFF,0x3B,0x1,0x69,0xFF,0x66,0x0,0xE2,0xFE,0xD9,0x0,0x68,0x1,0xC4,0xFE,0xD6,0xFF,0xB,0x0,0x26,0xFF,0xFD,0xFF,
0x28,0x0,0x6C,0x0,0xD0,0xFF,0xB4,0xFF,0xB8,0x0,0x28,0xFF,0xE1,0x0,0x3,0x0,0x1E,0x0,0xEA,0x0,0x67,0xFE,0xA8,0x0,0x9,0x0,0xCB,0xFF,0x50,0x0,0x40,0xFF,0x35,0x1,
0x9C,0xFF,0xAF,0xFF,0x1B,0x2,0x97,0xFE,0xCA,0xFF,0x3,0x1,0x2E,0x0,0x18,0x1,0x98,0xFE,0x31,0x1,0xF,0xFF,0x51,0xFF,0xB4,0x1,0xFF,0xFE,0xF9,0x0,0x38,0xFF,0xC5,0xFF,
0xDA,0x0,0x73,0x0,0xA8,0xFF,0xC7,0xFF,0xEE,0xFF,0xF7,0x0,0x67,0xFF,0xFB,0xFE,0xC,0x2,0x8,0xFF,0x75,0x0,0x4A,0x0,0x17,0x0,0xFD,0xFF,0x78,0xFF,0x18,0x1,0x6E,0xFF,
0xA6,0xFF,0xF2,0xFF,0x3F,0x0,0x52,0x0,0x6,0x0,0xD2,0xFF,0x45,0x0,0xF0,0xFF,0x10,0xFF,0xCC,0x0,0xBF,0xFF,0x32,0x0,0xB5,0x0,0x2C,0xFF,0x4F,0x0,0xF4,0xFF,0x62,0x0,
0xE4,0xFF,0xC3,0xFF,0xDC,0xFF,0x23,0x0,0x77,0x0,0xC0,0xFF,0x29,0x0,0x4F,0x0,0xB8,0x0,0xCD,0xFE,0x79,0x1,0xF4,0xFF,0xD2,0xFE,0x31,0x0,0xCC,0xFF,0x33,0x0,0xFA,0xFF,
0xF6,0x0,0xD6,0xFE,0x59,0x1,0xBC,0xFF,0x51,0xFE,0x97,0x1,0xD2,0x0,0xA9,0xFE,0x66,0x0,0x1C,0x0,0x9E,0xFF,0xC5,0xFF,0x9,0x0,0x37,0x1,0xBB,0xFE,0x2B,0x1,0x5C,0xFF,
0xEF,0xFF,0xC7,0x0,0x2B,0xFF,0xD9,0x0,0xC3,0xFE,0x2,0x1,0x82,0xFF,0x71,0xFF,0xC2,0x0,0xD2,0xFE,0xA0,0x0,0x44,0x0,0x5C,0xFF,0x18,0x0,0xEF,0xFF,0x89,0xFF,0x2E,0x0,
0xCC,0xFF,0xBC,0x1,0x34,0xFF,0xE5,0xFE,0xD8,0x0,0x30,0x0,0xE6,0xFF,0x85,0xFF,0x72,0x0,0xF4,0xFF,0xF3,0xFE,0x68,0x0,0x38,0x2,0x2,0xFE,0x0,0x0,0x4A,0x0,0x63,0xFF,
0xC6,0x0,0xA8,0x0,0x44,0xFF,0x7C,0xFF,0x85,0x1,0x2A,0xFE,0x96,0x0,0xF2,0x0,0xFC,0xFF,0xE2,0xFF,0x75,0xFF,0xBA,0x0,0x60,0xFF,0x56,0xFF,0x93,0xFF,0xF4,0x0,0xFF,0xFF,
0xEE,0xFE,0x28,0x0,0x86,0x0,0xD6,0xFF,0x68,0xFF,0xC8,0x0,0xDB,0xFF,0x99,0xFF,0x6E,0xFF,0x39,0x0,0x44,0x0,0xCE,0xFF,0x20,0x0,0x5E,0xFF,0x52,0x0,0xCA,0xFF,0x7,0x0,
0xAF,0xFF,0xBA,0xFF,0x14,0x0,0x7E,0xFF,0xDF,0xFF,0x2,0x0,0x1B,0x0,0x3,0x0,0x8A,0xFF,0xAE,0xFF,0xA7,0x0,0xF1,0xFF,0x97,0xFF,0xCB,0xFF,0x28,0x0,0xB0,0xFF,0xED,0xFF,
0x77,0x0,0xA3,0xFF,0x10,0x0,0x95,0xFF,0xF3,0xFF,0x13,0x0,0xE2,0xFF,0xF3,0xFF,0xDE,0xFF,0x4C,0x0,0x84,0xFF,0x5B,0x0,0xE4,0xFF,0x35,0x0,0xDF,0xFF,0x1A,0xFF,0xDA,0x0,
0xAE,0xFF,0xD2,0xFF,0xD4,0xFF,0xA9,0xFF,0xAE,0x0,0xC8,0xFF,0x73,0xFF,0x61,0x0,0xD8,0xFF,0x0,0x0,0xC6,0xFF,0xC,0x0,0x3F,0x0,0x64,0xFF,0x43,0x0,0x85,0xFF,0x7,0x0,
0x29,0x0,0xDD,0xFF,0xAC,0xFF,0xC8,0xFF,0x2D,0x0,0x3,0x0,0x14,0x0,0x91,0xFF,0x18,0x0,0x4A,0x0,0xCD,0xFF,0x99,0xFF,0xAA,0x0,0xA4,0xFF,0x9C,0xFF,0x93,0x0,0x4B,0xFF,
0x22,0x0,0x3A,0x0,0x3B,0xFF,0xB4,0xFF,0x4A,0x0,0x17,0x0,0x6E,0xFF,0x13,0x0,0x3C,0x0,0xB7,0xFF,0x6,0x0,0x8B,0xFF,0x25,0x0,0x70,0x0,0x98,0xFF,0xD5,0xFF,0x4A,0x0,
0x96,0xFF,0xC6,0xFF,0xCA,0xFF,0xD9,0xFF,0x30,0x0,0xA,0x0,0xFA,0xFF,0xFC,0xFE,0x85,0x0,0xF8,0xFF,0x8F,0xFF,0x39,0x0,0xCE,0xFF,0xE7,0xFF,0x86,0xFF,0x5B,0x0,0xD2,0xFF,
0x94,0xFF,0x2D,0x0,0xCC,0xFF,0xC5,0xFF,0x5F,0x0,0x71,0xFF,0x74,0xFF,0x25,0x0,0xA5,0xFF,0x17,0x0,0xDF,0xFF,0x6,0x0,0x93,0xFF,0xD,0x0,0x7F,0x0,0x32,0xFF,0x80,0x0,
0x23,0x0,0x6F,0xFF,0xF8,0xFF,0x97,0xFF,0x3B,0x0,0xD6,0xFF,0x7D,0xFF,0xF2,0xFF,0xEF,0xFF,0x36,0x0,0x98,0xFF,0x40,0x0,0x8F,0x0,0x91,0xFF,0x61,0x0,0xEA,0xFF,0xFB,0xFF,
0xC7,0xFF,0xE5,0xFF,0x8,0x0,0x7C,0xFF,0x78,0x0,0xCA,0xFF,0xDD,0xFF,0x4B,0x0,0xDE,0xFF,0x29,0x0,0x74,0x0,0x86,0xFF,0x3A,0x0,0x96,0x0,0xB1,0xFF,0xE5,0xFF,0xED,0xFF,
0xE8,0xFF,0xA9,0xFF,0x40,0x0,0xB,0x0,0x34,0x0,0x17,0x0,0x49,0x0,0xD1,0xFF,0xE0,0xFF,0x5D,0x0,0x9,0x0,0x31,0x0,0x8A,0xFF,0x81,0x0,0xC,0x0,0xB2,0xFF,0x5A,0x0,
0x98,0xFF,0x96,0x0,0x40,0x0,0xD,0x0,0x95,0x0,0x28,0xFF,0xD6,0x0,0xDA,0xFF,0xDF,0xFF,0xF3,0xFF,0x63,0x0,0x5B,0x0,0x3D,0xFF,0x62,0x0,0xEF,0xFF,0xFF,0x0,0x9A,0xFF,
0xD,0x0,0x5E,0x0,0xA7,0xFF,0x28,0x0,0xA3,0x0,0xE3,0xFE,0x84,0x0,0x7,0x1,0xCC,0xFE,0x5C,0x0,0x3E,0x0,0x4E,0x0,0xD9,0xFF,0xF,0x0,0x50,0x0,0xF6,0xFF,0x1A,0x0,
0x53,0x0,0x80,0xFF,0x76,0x0,0x64,0x0,0xA6,0xFF,0xDE,0xFF,0x70,0x0,0x52,0x0,0x72,0xFF,0x63,0x0,0x1,0x0,0xA6,0x0,0xB8,0xFF,0x93,0x0,0x31,0x0,0x1C,0xFF,0x28,0x1,
0x63,0xFF,0x9B,0x0,0x29,0x0,0x66,0xFF,0x4,0x1,0x47,0xFF,0x6B,0x0,0xAB,0x0,0xF1,0xFF,0xF,0x0,0x39,0x0,0xFE,0xFF,0xD7,0xFF,0x59,0x0,0x7D,0xFF,0x7F,0x0,0x57,0x0,
0x2D,0x0,0x96,0xFF,0x23,0x0,0x46,0x0,0xE7,0xFF,0x75,0x0,0x77,0xFF,0x7C,0x0,0x71,0x0,0xA7,0xFF,0x28,0x0,0x35,0x0,0xCC,0xFF,0xBF,0x0,0x88,0xFF,0x33,0x0,0x56,0x0,
0x56,0x0,0xE4,0xFF,0x87,0xFF,0x9C,0x0,0xE5,0xFF,0xC4,0x0,0x11,0xFF,0x60,0x0,0xCE,0x0,0x32,0xFF,0x34,0x0,0x57,0x0,0x85,0x0,0x88,0x0,0xBA,0xFF,0x42,0x0,0x37,0x0,
0x14,0x0,0x2C,0x0,0x7B,0xFF,0x78,0x0,0x6,0x0,0x3A,0x0,0x36,0x0,0x89,0xFF,0xE3,0x0,0x49,0x0,0xD2,0xFF,0x4,0x0,0x3B,0x0,0x5C,0x0,0x38,0x0,0xDA,0xFF,0x31,0x0,
0x3C,0x0,0xF,0xFF,0xE,0x1,0x8,0x0,0xA0,0xFF,0x63,0x0,0x67,0x0,0xD8,0xFF,0x4,0x0,0x39,0x0,0xC6,0xFF,0x3E,0x0,0xF0,0xFF,0x3F,0x0,0xBE,0xFF,0xF1,0x0,0x3,0xFF,
0xEE,0xFF,0xE6,0x0,0x6D,0xFF,0xBE,0xFF,0x82,0x0,0xD9,0xFF,0xC9,0xFF,0x6,0x0,0xFD,0xFF,0xA1,0x0,0x2A,0xFF,0x88,0x0,0x77,0x0,0x95,0xFF,0xA1,0xFF,0x73,0x0,0x1F,0x0,
0x61,0xFF,0xC6,0xFF,0x9E,0x0,0xF6,0xFF,0x8C,0xFF,0xB2,0xFF,0x30,0x1,0x84,0xFF,0x64,0xFF,0x3A,0x1,0xBA,0xFE,0xB3,0x0,0x58,0xFF,0xE0,0xFF,0xAB,0x0,0x59,0xFF,0xE7,0xFF,
0x2E,0x0,0xF,0x0,0x87,0xFF,0xFA,0xFF,0xA4,0x0,0xDF,0xFF,0x4B,0xFF,0xEC,0xFF,0x39,0x0,0x31,0x0,0xEC,0xFE,0x7,0x0,0xCF,0x0,0x92,0xFF,0xAA,0xFF,0x4A,0x0,0x75,0xFF,
0xBD,0xFF,0x50,0x0,0x9C,0xFF,0xA9,0xFF,0x60,0x0,0xFF,0xFE,0xC7,0x0,0xC5,0xFF,0xF6,0xFE,0x9,0x1,0x80,0xFF,0xE7,0xFF,0x17,0x0,0x59,0xFF,0xA1,0x0,0xB6,0xFF,0x55,0xFF,
0xA4,0x0,0x22,0xFF,0xB7,0x0,0xE8,0xFE,0xFD,0xFF,0xE2,0x0,0x33,0xFF,0x34,0x0,0x3C,0xFF,0xA6,0x0,0x90,0x0,0x5B,0xFF,0x75,0xFF,0x78,0x0,0xA5,0x0,0x32,0xFF,0x7F,0xFF,
0x64,0x0,0x45,0x0,0xC,0x0,0x65,0xFF,0x7D,0xFF,0xF6,0x0,0x19,0x0,0x2,0xFF,0x67,0x0,0xB1,0xFF,0xEB,0x0,0x39,0x0,0x43,0xFF,0x78,0x0,0xEB,0xFF,0x2,0x0,0x8F,0xFF,
0x47,0x0,0xEA,0xFF,0xF5,0xFF,0x18,0x0,0x7D,0xFF,0x7,0x0,0xC3,0x0,0xB,0xFF,0xD8,0x0,0x40,0x0,0x8D,0xFF,0x6C,0x0,0x7C,0xFF,0xB,0x1,0xFC,0xFE,0xFF,0xFF,0xC6,0xFF,
0xF1,0xFF,0x5C,0x0,0x62,0xFF,0x1C,0x0,0x66,0x0,0x9,0x0,0x4A,0x0,0xF2,0xFF,0xCB,0xFF,0xEF,0x0,0x83,0xFF,0x97,0xFF,0x6B,0x0,0xE1,0xFF,0xA7,0xFF,0x2F,0xFF,0x54,0x0,
0x72,0x0,0x71,0xFF,0x30,0x1,0x26,0xFF,0x32,0x0,0xC2,0x0,0xF,0x0,0xF1,0xFF,0x32,0xFF,0x69,0x1,0x9,0xFF,0x5C,0xFF,0xF8,0xFF,0x13,0x0,0x58,0x0,0x5D,0xFF,0x5A,0x0,
0xF1,0xFF,0xB1,0x0,0x1C,0x0,0xE8,0xFF,0x7,0x0,0x29,0x0,0x42,0x0,0xA6,0xFF,0xA1,0xFF,0xF4,0xFF,0x27,0x0,0xF1,0xFF,0x46,0x0,0x9,0x0,0x4D,0x1,0xC8,0xFE,0xCA,0xFF,
0xF1,0x0,0x2A,0xFF,0x5F,0x0,0xAD,0xFF,0x31,0x0,0xC8,0xFF,0x61,0x0,0x52,0x0,0xCC,0xFF,0x8C,0x0,0xBD,0xFF,0x75,0x0,0x26,0x0,0xF8,0xFE,0xC7,0x0,0xAF,0xFF,0x84,0xFF,
0x87,0x0,0x7,0xFF,0xEA,0x0,0x7D,0x0,0x88,0xFF,0x6E,0x0,0xFB,0xFF,0x63,0x0,0xFB,0xFF,0x6,0x0,0xB2,0xFF,0xA4,0xFF,0x31,0x1,0xB6,0xFE,0x9C,0xFF,0x20,0x1,0x58,0xFF,
0x38,0x1,0x1F,0xFF,0xFF,0xFF,0x5,0x1,0x30,0xFF,0xB7,0x0,0x76,0xFF,0xCE,0xFF,0xAE,0x0,0x46,0xFF,0xB2,0xFF,0x4B,0x0,0xD9,0xFF,0x8D,0x0,0x7B,0xFF,0x1D,0x0,0xAB,0x0,
0x67,0xFF,0xA7,0x0,0xE2,0xFF,0xBC,0xFF,0x5C,0x0,0x7F,0xFF,0x7D,0x0,0x91,0xFF,0x99,0xFF,0x7A,0x0,0xFE,0xFF,0x0,0x0,0x5D,0xFF,0xEB,0x0,0x54,0x0,0x3D,0xFF,0xFC,0xFF,
0xD1,0xFF,0x7A,0x0,0x68,0x0,0x23,0xFF,0xFD,0xFF,0x57,0x0,0xCD,0xFF,0xB3,0xFF,0x16,0x0,0xBD,0xFF,0xA,0x0,0xB3,0x0,0x3,0xFF,0x4,0x0,0xB,0x1,0xD3,0xFF,0x26,0xFF,
0x24,0x1,0x5E,0x0,0xD5,0xFE,0x9E,0x0,0x66,0xFF,0xAC,0xFF,0xAE,0x0,0x1B,0x0,0x51,0x0,0x8C,0xFF,0x34,0x0,0x6A,0x0,0xDF,0xFF,0x69,0x0,0xA2,0xFF,0x64,0x0,0x8F,0x0,
0x23,0xFF,0x5,0x0,0x76,0x0,0xC6,0xFF,0xD,0x0,0xEB,0xFF,0xCA,0xFF,0x33,0x0,0x1,0x0,0x21,0x0,0x1D,0x0,0x7E,0x0,0xA6,0x0,0xC1,0xFF,0xD0,0xFF,0xFF,0xFF,0xAE,0xFF,
0x3,0x0,0x64,0xFF,0x1A,0x0,0xB1,0x0,0x1D,0x0,0x9C,0x0,0x0,0x0,0x41,0x0,0xAC,0x0,0xFD,0xFF,0x1D,0x0,0xE,0x0,0xFE,0xFF,0x7D,0x0,0x1A,0xFF,0xCC,0xFF,0x67,0x0,
0xE2,0xFF,0x31,0x0,0x86,0x0,0x8B,0x0,0x2B,0x0,0xB,0x1,0x9,0x0,0xBB,0xFF,0x24,0x0,0xC6,0xFF,0x72,0xFF,0x39,0x0,0x16,0x0,0xE0,0xFF,0x8A,0x0,0xF7,0xFF,0x9E,0x0,
0x7F,0x0,0xBC,0xFF,0x1B,0x0,0x78,0x0,0x2F,0x0,0xF,0x0,0xC6,0xFF,0xE,0x0,0xF2,0xFF,0xBD,0xFF,0x1B,0x0,0x1E,0x0,0xC0,0x0,0x21,0x0,0x50,0x0,0x87,0x0,0xE1,0xFF,
0xF9,0xFF,0x1E,0x0,0xE,0x0,0x1,0x0,0x17,0x0,0xF9,0xFF,0xF8,0xFF,0xE4,0xFF,0x27,0x0,0x4B,0x0,0x88,0x0,0xE6,0xFF,0x8,0x0,0x75,0x0,0xCF,0xFF,0x53,0x0,0xF8,0xFF,
0xE2,0xFF,0x4C,0x0,0xFE,0xFF,0xB3,0xFF,0xEB,0xFF,0xC1,0x0,0x85,0x0,0xB2,0xFF,0xCD,0xFF,0x3D,0x0,0xE2,0xFF,0xF1,0xFF,0xC9,0xFF,0x38,0x0,0x53,0x0,0xD9,0xFF,0x22,0x0,
0x92,0xFF,0xA,0x0,0xF7,0xFF,0x75,0xFF,0x3B,0x0,0xC2,0xFF,0x2E,0x0,0xBA,0x0,0xB4,0xFF,0x20,0x0,0x52,0x0,0x68,0x0,0xFB,0xFF,0xB6,0xFF,0x39,0x0,0x16,0x0,0x48,0x0,
0x85,0xFF,0xC6,0xFF,0x45,0x0,0xEA,0xFF,0x37,0x0,0x16,0x0,0x4D,0x0,0x7D,0x0,0xC,0x0,0xFC,0xFF,0x21,0x0,0xCF,0xFF,0xBB,0xFF,0xB,0x0,0xAD,0xFF,0xE8,0xFF,0x75,0x0,
0x1F,0x0,0xF5,0xFF,0xB2,0xFF,0x13,0x0,0x2B,0x0,0x3,0x0,0x1A,0x0,0xC9,0xFF,0xA6,0x0,0x57,0x0,0x73,0xFF,0xBA,0xFF,0x20,0x0,0x57,0x0,0xE3,0xFF,0x9E,0xFF,0x30,0x0,
0x57,0x0,0x1D,0x0,0x1A,0x0,0xC0,0xFF,0x29,0x0,0xFD,0xFF,0xC8,0xFF,0xBD,0xFF,0xCB,0xFF,0x3C,0x0,0xBF,0xFF,0xCC,0xFF,0xCC,0xFF,0x1D,0x0,0x45,0x0,0x46,0x0,0xE2,0xFF,
0xEA,0xFF,0x34,0x0,0xC9,0xFF,0xAA,0xFF,0xE0,0xFF,0x14,0x0,0x4B,0xFF,0x75,0x0,0x9C,0xFF,0xFC,0xFF,0x39,0x0,0x8F,0xFF,0xBE,0x0,0xE7,0xFF,0x77,0x0,0xB6,0xFF,0xB2,0x0,
0x92,0x0,0xFB,0xFF,0xAC,0x0,0x17,0x0,0xC4,0x0,0x18,0x0,0x3C,0x0,0x3E,0x0,0x66,0xFF,0x26,0x0,0x4C,0x0,0xF7,0xFF,0xD7,0xFF,0xAC,0xFF,0xF,0x0,0xDA,0xFF,0xDE,0xFF,
0xD9,0xFF,0x2F,0x0,0x70,0x0,0x19,0x0,0x1B,0x0,0x2F,0x0,0xF1,0xFF,0xD4,0xFF,0x91,0x0,0xA5,0xFF,0x23,0x0,0xFD,0xFF,0x9E,0xFF,0x4C,0x0,0x83,0xFF,0xA5,0x0,0x7,0xFF,
0xC3,0xFF,0xD3,0xFF,0x2B,0x0,0x85,0x0,0x55,0xFF,0x97,0x0,0x71,0xFF,0x51,0x0,0x14,0x0,0x80,0x0,0xA9,0xFF,0xC,0x0,0xFA,0xFF,0x15,0x0,0x3A,0x0,0xF3,0xFF,0xB3,0x0,
0xB4,0xFF,0x37,0x0,0x17,0xFF,0x3D,0x0,0xFA,0xFF,0x24,0x0,0x90,0xFF,0xD5,0xFF,0x18,0x0,0xC9,0xFF,0xB8,0xFF,0x87,0xFF,0x20,0x0,0xDC,0xFF,0x50,0x0,0xD,0xFF,0x44,0x0,
0xDC,0xFF,0x98,0xFF,0xFE,0xFE,0xB5,0xFF,0xA6,0xFF,0x92,0xFF,0xD6,0xFF,0x48,0xFF,0xB1,0x0,0x5C,0xFF,0x9B,0xFF,0x6E,0xFF,0xA0,0xFF,0xF2,0xFF,0xA0,0xFF,0xAD,0xFF,0xF2,0xFF,
0x72,0xFF,0xCF,0xFF,0xCF,0xFF,0xD3,0xFF,0xD5,0xFF,0x49,0xFF,0xDC,0xFF,0xAB,0xFF,0xC6,0xFF,0xB9,0xFF,0x4,0x0,0xB2,0xFF,0x4,0x0,0x82,0xFF,0xE4,0xFF,0x1A,0x0,0x7C,0x0,
0x86,0xFF,0x40,0x0,0x9E,0x0,0x28,0xFF,0x62,0x0,0x1D,0xFF,0xBA,0x0,0x91,0x0,0xBD,0xFF,0xF6,0xFF,0xC7,0xFF,0x8F,0x0,0x4A,0x0,0xC7,0xFF,0x1E,0x0,0x1,0x0,0xFE,0xFF,
0x2,0x0,0xE5,0xFF,0x71,0x0,0xBD,0xFF,0x92,0x0,0xE1,0xFF,0x8A,0x0,0x59,0x0,0x18,0x0,0x46,0x0,0xFB,0xFF,0x4C,0x0,0xD1,0xFF,0xD1,0x0,0xCA,0xFF,0x8,0x0,0x1F,0x0,
0x64,0x0,0xCC,0x0,0x45,0x0,0x66,0x0,0x8F,0x0,0x16,0x1,0x60,0x0,0x2,0x0,0x46,0x0,0x69,0x0,0x47,0x0,0xE5,0xFF,0x2,0x0,0x57,0x0,0xD7,0x0,0x6F,0x0,0xEE,0xFF,
0xA0,0x0,0xAC,0x0,0xF0,0x0,0x62,0x0,0xB,0x0,0xC2,0x0,0x3F,0x0,0x4B,0xFF,0x9D,0xFF,0x9C,0x0,0x91,0x0,0x1A,0x0,0x69,0xFF,0x6E,0x0,0xB8,0x0,0xA2,0xFF,0xCC,0xFF,
0x70,0x0,0x6B,0x0,0x80,0x0,0xA5,0xFF,0x1B,0x0,0xE9,0xFF,0xB8,0xFF,0x43,0x0,0xC6,0xFF,0x7A,0x0,0x23,0x0,0xB6,0x0,0x3,0xFF,0xE4,0xFF,0x9E,0xFF,0x5F,0xFF,0x41,0x0,
0xA0,0xFF,0xDF,0xFF,0x65,0x0,0xC6,0xFF,0x4E,0xFF,0x6E,0x0,0x85,0xFF,0x50,0x0,0xE5,0xFF,0xEF,0xFF,0xBE,0xFF,0x47,0x0,0xBB,0xFF,0xAB,0xFF,0x67,0xFF,0x11,0xFF,0xB,0x0,
0xA9,0xFF,0x1C,0xFF,0xB5,0xFF,0x7A,0xFF,0x64,0xFF,0xB,0x0,0xB1,0xFF,0xE9,0xFF,0x2F,0xFF,0x37,0x0,0xA4,0xFF,0x8B,0xFF,0x81,0xFF,0xE4,0xFF,0xCD,0xFF,0x35,0xFF,0x50,0xFF,
0x98,0xFF,0xAD,0xFF,0xE9,0xFF,0x69,0xFF,0x87,0xFF,0x80,0x0,0x34,0xFF,0x93,0xFF,0x4C,0xFF,0x35,0x0,0x77,0xFF,0xC0,0xFF,0xD1,0xFF,0xE4,0xFF,0x9C,0x0,0xD4,0xFF,0x6A,0x0,
0xE8,0xFF,0x54,0x0,0xAF,0xFF,0x5C,0x0,0x12,0x0,0xD2,0xFF,0x14,0x0,0x54,0xFF,0xC5,0xFF,0x12,0x0,0x55,0xFF,0x2F,0x0,0x85,0x0,0x85,0xFF,0xB3,0x0,0x55,0x0,0xE7,0xFF,
0xC8,0xFF,0xE2,0xFF,0xFB,0xFF,0xF6,0xFF,0xCA,0xFF,0xC3,0xFF,0x19,0x0,0xCA,0xFF,0xB3,0xFF,0x44,0x0,0x69,0xFF,0x7E,0x0,0x8E,0x0,0xB2,0xFF,0x7D,0x0,0x2F,0x0,0x8D,0x0,
0xD3,0xFF,0x5B,0x0,0x7,0x0,0xCF,0x0,0x89,0x0,0xB5,0xFF,0x5D,0x0,0x6C,0x0,0xC2,0x0,0x70,0x0,0x8D,0x0,0x1C,0x0,0x36,0x1,0x9B,0x0,0xE5,0xFF,0x62,0x0,0x2,0x1,
0xD7,0x0,0x65,0x0,0xC4,0x0,0xD8,0x0,0xDC,0x0,0x87,0x0,0x2,0x0,0x9D,0x0,0x9A,0x0,0x76,0x0,0x4C,0x1,0xEC,0x0,0xF8,0x1,0xBA,0x0,0xC6,0x0,0xF5,0x0,0x7A,0x0,
0xD4,0x0,0xDE,0x0,0xF3,0x0,0xD3,0x0,0x13,0x1,0x89,0x0,0x20,0x1,0x9B,0x0,0xE8,0x0,0x1B,0x1,0x4C,0x0,0xA9,0x0,0x3C,0x0,0x6,0xFF,0x16,0xFF,0x77,0xFE,0x2D,0xFE,
0xD6,0xFD,0x9C,0xFD,0xA7,0xFD,0x9B,0xFD,0x78,0xFD,0xD0,0xFC,0x9D,0xFD,0x1A,0xFD,0xC2,0xFD,0x5A,0xFD,0xF1,0xFD,0x6,0xFE,0xDF,0xFD,0x43,0xFE,0xFF,0xFD,0x64,0xFE,0x11,0xFE,
0xA,0xFF,0xA1,0xFE,0xA6,0xFF,0x5B,0xFF,0xA5,0xFF,0xE9,0xFF,0x4F,0x0,0xEE,0xFF,0x93,0x0,0xC4,0x0,0xD3,0x0,0x1D,0x1,0xD6,0x0,0x72,0x1,0xB5,0x0,0x5E,0x1,0x9A,0x0,
0x70,0x1,0xE2,0x0,0x57,0x1,0x96,0x0,0x8C,0x0,0xBF,0x0,0x74,0x0,0xD7,0x0,0x58,0x0,0x26,0x0,0xD4,0x0,0xB9,0x0,0x7B,0x0,0xAF,0x0,0xBE,0x0,0x26,0x1,0x56,0x0,
0x34,0x1,0xA,0x0,0x1A,0x1,0x65,0x0,0xD5,0x0,0x69,0x0,0xD5,0x0,0x87,0x1,0xB7,0x0,0x40,0x1,0x25,0x0,0xE4,0x1,0x7D,0x0,0x66,0x1,0xF1,0x0,0x3E,0x0,0x1B,0x1,
0x3B,0x0,0x2D,0x0,0xE1,0xFF,0x16,0x0,0xE5,0xFF,0x15,0x0,0x12,0x0,0xC8,0xFF,0x92,0xFF,0xB2,0xFF,0x92,0xFF,0x7F,0xFF,0xCA,0xFE,0x88,0xFF,0x32,0xFF,0xE6,0xFE,0x8,0xFF,
0xFF,0xFE,0x5F,0xFF,0x6C,0xFF,0xE9,0xFE,0xFB,0xFE,0xA7,0xFF,0x56,0xFF,0x9E,0xFF,0xCC,0xFE,0xB6,0xFF,0xB3,0xFF,0x79,0xFF,0x5F,0xFF,0x84,0xFF,0xD1,0xFF,0x82,0xFF,0x8E,0xFF,
0x6B,0xFF,0xEE,0xFF,0xBA,0xFF,0xC0,0xFF,0xBC,0xFF,0x21,0x0,0x59,0x0,0xB,0x0,0xD5,0xFF,0xF4,0xFF,0x2A,0x0,0x25,0x0,0xDC,0xFF,0xDA,0xFF,0x4C,0x0,0x52,0x0,0x1E,0x0,
0xF7,0xFF,0x2C,0x0,0xDA,0x0,0x88,0x0,0x94,0x0,0x9F,0x0,0xA3,0x0,0xBF,0x0,0x8D,0x0,0x66,0x0,0x87,0x0,0xD6,0x0,0x8D,0x0,0xE3,0x0,0x49,0x0,0x84,0x0,0xCD,0x0,
0x7C,0x0,0x49,0x0,0x52,0x0,0x94,0x0,0xA2,0x0,0x7A,0x0,0x4,0x0,0x61,0x0,0x58,0x0,0x1,0x0,0xF8,0xFF,0xD0,0xFF,0x23,0x0,0x54,0x0,0xFA,0xFF,0x13,0x0,0x27,0x0,
0x3E,0x0,0xEF,0xFF,0xC5,0xFF,0xC4,0xFF,0xEA,0xFF,0xA5,0xFF,0xAB,0xFF,0xC2,0xFF,0x9D,0xFF,0xD7,0xFF,0xAD,0xFF,0xDC,0xFF,0xD8,0xFF,0xB,0x0,0xD1,0xFF,0xB0,0xFF,0xCC,0xFF,
0x99,0xFF,0xCA,0xFF,0xA7,0xFF,0x8D,0xFF,0x97,0xFF,0xA5,0xFF,0xBA,0xFF,0xB6,0xFF,0xBC,0xFF,0xE0,0xFF,0xD6,0xFF,0xA8,0xFF,0xBB,0xFF,0x8B,0xFF,0x7C,0xFF,0x5F,0xFF,0x5E,0xFF,
0x64,0xFF,0x77,0xFF,0x74,0xFF,0x84,0xFF,0xA9,0xFF,0x8B,0xFF,0xC5,0xFF,0x95,0xFF,0xA1,0xFF,0x9D,0xFF,0xB9,0xFF,0xA2,0xFF,0xAA,0xFF,0xC3,0xFF,0xAD,0xFF,0xEF,0xFF,0xC0,0xFF,
0xDB,0xFF,0xEE,0xFF,0xDF,0xFF,0xEC,0xFF,0x9,0x0,0xEA,0xFF,0x1,0x0,0xE,0x0,0xEA,0xFF,0x10,0x0,0xA,0x0,0xA,0x0,0x26,0x0,0x1C,0x0,0x15,0x0,0x22,0x0,0x20,0x0,
0x3B,0x0,0x26,0x0,0x2C,0x0,0x46,0x0,0x4B,0x0,0x50,0x0,0x37,0x0,0x30,0x0,0x46,0x0,0x54,0x0,0x46,0x0,0x44,0x0,0x38,0x0,0x50,0x0,0x4B,0x0,0x3B,0x0,0x43,0x0,
0x5C,0x0,0x6A,0x0,0x63,0x0,0x7A,0x0,0x70,0x0,0x77,0x0,0x61,0x0,0x45,0x0,0x46,0x0,0x3A,0x0,0x50,0x0,0x42,0x0,0x44,0x0,0x68,0x0,0x4A,0x0,0x3D,0x0,0x42,0x0,
0x34,0x0,0x43,0x0,0x3D,0x0,0x2D,0x0,0x33,0x0,0x25,0x0,0x24,0x0,0xF,0x0,0xFC,0xFF,0x7,0x0,0x3,0x0,0xFE,0xFF,0xFD,0xFF,0xF4,0xFF,0x7,0x0,0xFE,0xFF,0xEE,0xFF,
0xFB,0xFF,0xEE,0xFF,0xF3,0xFF,0xF2,0xFF,0xD6,0xFF,0xCB,0xFF,0xDF,0xFF,0xD6,0xFF,0xD9,0xFF,0xCC,0xFF,0xC7,0xFF,0xD2,0xFF,0xD2,0xFF,0xCF,0xFF,0xCB,0xFF,0xD6,0xFF,0xCE,0xFF,
0xDC,0xFF,0xD2,0xFF,0xCA,0xFF,0xCF,0xFF,0xCA,0xFF,0xC0,0xFF,0xBE,0xFF,0xBC,0xFF,0xBE,0xFF,0xBC,0xFF,0xAE,0xFF,0xB5,0xFF,0xB5,0xFF,0xB4,0xFF,0xB2,0xFF,0xAA,0xFF,0xAA,0xFF,
0xAE,0xFF,0xB0,0xFF,0xB2,0xFF,0xAB,0xFF,0xA8,0xFF,0xAB,0xFF,0xAC,0xFF,0xAE,0xFF,0xAF,0xFF,0xB0,0xFF,0xB8,0xFF,0xBD,0xFF,0xC2,0xFF,0xC7,0xFF,0xCE,0xFF,0xD3,0xFF,0xD7,0xFF,
0xE3,0xFF,0xE5,0xFF,0xE8,0xFF,0xF0,0xFF,0xF1,0xFF,0xF5,0xFF,0xFC,0xFF,0xF8,0xFF,0x0,0x0,0x2,0x0,0x1,0x0,0xB,0x0,0xA,0x0,0xD,0x0,0xD,0x0,0xC,0x0,0xF,0x0,
0x12,0x0,0xD,0x0,0xF,0x0,0x11,0x0,0xF,0x0,0x15,0x0,0x13,0x0,0x11,0x0,0xF,0x0,0x10,0x0,0xE,0x0,0xF,0x0,0x12,0x0,0x16,0x0,0x15,0x0,0x18,0x0,0x1C,0x0,
0x19,0x0,0x1A,0x0,0x19,0x0,0x1A,0x0,0x1C,0x0,0x1F,0x0,0x1F,0x0,0x21,0x0,0x20,0x0,0x22,0x0,0x26,0x0,0x22,0x0,0x23,0x0,0x26,0x0,0x21,0x0,0x20,0x0,0x21,0x0,
0x21,0x0,0x21,0x0,0x1C,0x0,0x19,0x0,0x19,0x0,0x15,0x0,0x15,0x0,0x16,0x0,0x11,0x0,0xF,0x0,0x11,0x0,0x10,0x0,0xD,0x0,0xB,0x0,0xA,0x0,0xB,0x0,0x8,0x0,
0x5,0x0,0x5,0x0,0x6,0x0,0x6,0x0,0x6,0x0,0x4,0x0,0x6,0x0,0x6,0x0,0x3,0x0,0x2,0x0,0x3,0x0,0x3,0x0,0x2,0x0,0x4,0x0,0x1,0x0,0x2,0x0,0x1,0x0,
0x0,0x0,0xFE,0xFF,0xFE,0xFF,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,
0xFF,0xFF,0xFE,0xFF,0xFE,0xFF,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xFE,0xFF,
0xFE,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x0,0x2,0x0,0x1,0x0,0x2,0x0,0x2,0x0,0x2,0x0,
0x2,0x0,0x1,0x0,0x2,0x0,0x3,0x0,0x3,0x0,0x3,0x0,0x3,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x5,0x0,0x4,0x0,0x5,0x0,
0x6,0x0,0x5,0x0,0x5,0x0,0x5,0x0,0x4,0x0,0x5,0x0,0x4,0x0,0x3,0x0,0x4,0x0,0x4,0x0,0x3,0x0,0x2,0x0,0x3,0x0,0x2,0x0,0x2,0x0,0x1,0x0,0x1,0x0,
0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF};
            #endregion

            string welcomeWavPath = string.Concat( Path.GetTempFileName(), ".wav");
            using (FileStream fs = File.OpenWrite(welcomeWavPath))
            {
                fs.Write(welcomeContent, 0, welcomeContent.Length);
            }

            Prompt pr = Create<Prompt>();
            pr.GroupKey = "Demo";
            pr.Description = label;
            pr.ComputePath(newCamp.Id, System.IO.Path.GetExtension(welcomeWavPath));
            pr.LocalPath = welcomeWavPath;
            newCamp.Prompts.Add(pr);
            Prompts.Add(pr);

            inAct.Preprocessor.TargetId = "defaultivr++++++++++++++++++++++";

            SimplePreprocessorConfig sdp = Create<SimplePreprocessorConfig>();
            
            inAct.PreprocessorConfiguration = sdp;
            sdp.Welcome.Target = pr;

            inAct.PreprocessorConfiguration.saveToTextStorage = ((t) => { inAct.PreprocessorParams = t; });
            inAct.PreprocessorConfiguration.Save();


            newCamp.HasSystemOutboundActivity = true;

            OutboundActivity outAct = newCamp.SystemOutboundActivity;
            outAct.Paused = false;
            outAct.OutboundMode = DialingMode.Preview;
            outAct.AutomaticRecording = true;

            List<string> listFields = new List<string>();
            listFields.Add("Id");
            listFields.Add("Description");
            listFields.Add("Phone");


            UserField newone = Create<UserField>();
            newone.Campaign.TargetId = newCamp.Id;
            newone.Name = "Id";
            newone.InitialName = "Id";
            newone.DBType = DBTypes.Integer;
            newone.Length = 0;
            newone.FieldMeaning = UserFieldMeanings.CustomerId;
            newone.IsIndexed = false;
            newone.IsUniqueConstraint = false;
            newCamp.UserFields.Add(newone);

            newone = Create<UserField>();
            newone.Campaign.TargetId = newCamp.Id;
            newone.Name = "Description";
            newone.InitialName = "Description";
            newone.DBType = DBTypes.String;
            newone.Length = 50;
            newone.FieldMeaning = UserFieldMeanings.ContactDescription;
            newone.IsIndexed = false;
            newone.IsUniqueConstraint = false;
            newCamp.UserFields.Add(newone);

            newone = Create<UserField>();
            newone.Campaign.TargetId = newCamp.Id;
            newone.Name = "Phone";
            newone.InitialName = "Phone";
            newone.DBType = DBTypes.String;
            newone.Length = 50;
            newone.FieldMeaning = UserFieldMeanings.HomePhoneNumber;
            newone.IsIndexed = false;
            newone.IsUniqueConstraint = false;
            newCamp.UserFields.Add(newone);


            saveFunction();


            string strTempFile = Path.GetTempFileName();

            using (FileStream fs = new FileStream(strTempFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                using (CsvWriter R = new CsvWriter(fs, Encoding.UTF8, ';', '"', "."))
                {
                    R.WriteLine(new string[] { "Id","Description","Phone" });
                    for (int i = 0; i < 10; i++)
                    {
                        R.WriteLine(new object[]{i, string.Format("Demo{0}", i), outdestination});
                    }
                }
            }


            DataSet ds = new DataSet();
            using (CsvReader R = new CsvReader(File.OpenRead(strTempFile), Encoding.UTF8, ';', '"', "."))
            {
                string[] Line;

                if ((Line = R.ReadLine()) != null)
                {
                    DataTable DT = ds.Tables.Add();

                    foreach (string Col in Line)
                    {
                        int nCounter = 0;
                        string tempCol = Col;
                        while (DT.Columns.Contains(tempCol))
                        {
                            nCounter++;
                            tempCol = String.Concat(Col, nCounter.ToString());
                        }

                        DT.Columns.Add(tempCol);
                    }

                    DataRow DR;
                    while ((DR = R.ReadDataRow(DT)) != null )
                    {
                        DT.Rows.Add(DR);
                    }
                }
            }

            newCamp.ImportData(strTempFile, ';', '"', true, ds.Tables[0], listFields, "demo", null, -1, false, null, null, null, null, null, ".");
        }

        public List<Language.SimpleLanguage> GuiLanguages
        {
            get
            {
                return m_PrivateGuiLanguages;
            }
        }


        public IEnumerable<AdminObject> AgentsAndTeams
        {
            get
            {
                return Agents.Cast<AdminObject>().Union(Teams).OrderBy((a) => (a.TypedDisplayText));
            }
        }

        public IEnumerable<Agent> AllAgents
        {
            get
            {
                return Agents.Union(Hidden.Agents).OrderBy( (a) => (string.Concat( a.State>0 ? "a" : "b", a.Account)))/* TODO: the deleted agent does not have any description, account, etc.     .Union(m_DeletedObjects.Values.Where( (a) => (a is Agent) ).Cast<Agent>() */;
            }
        }
        public IEnumerable<Campaign> AllCampaigns
        {
            get
            {
                return Campaigns.Union(Hidden.Campaigns);
            }
        }
        public IEnumerable<InboundActivity> AllInboundActivities
        {
            get
            {
                return InboundActivities.Union(Hidden.InboundActivities);
            }
        }
        public IEnumerable<OutboundActivity> AllOutboundActivities
        {
            get
            {
                return OutboundActivities.Union(Hidden.OutboundActivities);
            }
        }
        public IEnumerable<Activity> AllActivities
        {
            get
            {
                return AllInboundActivities.Cast<Activity>().Union(AllOutboundActivities);
            }
        }
        public IEnumerable<SecuredAdminObject> AllSecuredObjects
        {
            get
            {
                return InboundActivities.Cast<SecuredAdminObject>().Union(OutboundActivities).Union(Campaigns).Union(Teams).Union(Queues).Union(SecurityContexts);
            }
        }

        public AdminObjectList<Agent> Agents
        {
            get;
            internal set;
        }

        public string DefaultAgentAccount
        {
            get
            {
                if (Agents == null || Agents.Count == 0)
                {
                    return "1000";
                }
                else
                {
                    string lastUsedAccount = Agents.OrderByDescending((agt) => (agt.ModifyTime)).First((agt)=>(!agt.IsDummy)).Account;
                    int numAccount = -1;
                    if (int.TryParse(lastUsedAccount, out numAccount))
                    {
                        numAccount++;
                        while (Agents.Count((agt) => (agt.Account != null && agt.Account.Equals(numAccount.ToString()))) > 0)
                        {
                            numAccount++;
                        }
                        return numAccount.ToString();
                    }
                    else
                    {
                        // TODO: improve the rule for automatic account setup...
                        string retVal = string.Concat(lastUsedAccount, "*");
                        while (Agents.Count((agt) => (agt.Account!=null && agt.Account.Equals(retVal))) > 0)
                        {
                            retVal = string.Concat(retVal, "*");
                        }

                        return retVal;
                    }
                }
            }
        }


        public string DefaultPhoneShortCode
        {
            get
            {
                if (Phones == null || Phones.Count == 0)
                {
                    return "10000";
                }
                else
                {
                    string lastUsedAccount = Phones.OrderByDescending((agt) => (agt.ModifyTime)).First().ShortCode;
                    int numAccount = -1;
                    if (int.TryParse(lastUsedAccount, out numAccount))
                    {
                        numAccount++;
                        while (Phones.Count((agt) => (agt.ShortCode.Equals(numAccount.ToString()))) > 0)
                        {
                            numAccount++;
                        }
                        return numAccount.ToString();
                    }
                    else
                    {
                        // TODO: improve the rule for automatic account setup...
                        string retVal = string.Concat(lastUsedAccount, "*");
                        while (Phones.Count((agt) => (agt.ShortCode.Equals(retVal))) > 0)
                        {
                            retVal = string.Concat(retVal, "*");
                        }

                        return retVal;
                    }
                }
            }
        }

        public AdminObjectList<Skill> Skills
        {
            get;
            internal set;
        }

        public AdminObjectList<Team> Teams
        {
            get;
            internal set;
        }

        public AdminObjectList<Role> Roles
        {
            get
            {
                return m_Roles;
            }
            internal set
            {
                if (m_Roles != null)
                    m_Roles.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_Roles_CollectionChanged);

                m_Roles = value;

                if (m_Roles != null)
                    m_Roles.CollectionChanged += new NotifyCollectionChangedEventHandler(m_Roles_CollectionChanged);

            }
        }

        void m_Roles_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                if(DefaultSettings!=null)
                    DefaultSettings.Security.FireCollectionChanged(NotifyCollectionChangedAction.Reset);
            }
            catch
            {
            }
            if (Queues != null)
            {
                foreach (Queue q in Queues)
                {
                    q.Security.FireCollectionChanged(NotifyCollectionChangedAction.Reset);
                }
            }
            if (Teams != null)
            {
                foreach (Team q in Teams)
                {
                    q.Security.FireCollectionChanged(NotifyCollectionChangedAction.Reset);
                }
            }
            if (Campaigns != null)
            {
                foreach (Campaign q in Campaigns)
                {
                    q.Security.FireCollectionChanged(NotifyCollectionChangedAction.Reset);
                }
            }
            if (InboundActivities != null)
            {
                foreach (Activity q in InboundActivities)
                {
                    q.Security.FireCollectionChanged(NotifyCollectionChangedAction.Reset);
                }
            }
            if (OutboundActivities != null)
            {
                foreach (Activity q in OutboundActivities)
                {
                    q.Security.FireCollectionChanged(NotifyCollectionChangedAction.Reset);
                }
            }
            if (SecurityContexts != null)
            {
                foreach (SecurityContext s in SecurityContexts)
                {
                    s.Security.FireCollectionChanged(NotifyCollectionChangedAction.Reset);
                }
            }
        }


        public AdminObjectList<SecurityContext> SecurityContexts
        {
            get
            {
                return m_SecurityContexts;
            }
            internal set
            {
                if (m_SecurityContexts != null)
                    m_SecurityContexts.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_SecurityContexts_CollectionChanged);

                m_SecurityContexts = value;

                if (m_SecurityContexts != null)
                    m_SecurityContexts.CollectionChanged += new NotifyCollectionChangedEventHandler(m_SecurityContexts_CollectionChanged);
            }
        }

        void m_SecurityContexts_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
        }

        
        
        public AdminObjectList<Queue> Queues
        {
            get;
            internal set;
        }

        [AdminLoad(Path = "/NoNode")]
        public PromptRepository GlobalPrompts
        {
            get;
            internal set;
        }

        [AdminLoad(SkipLoad = true)]
        public AdminObjectList<SystemField> SystemFields
        {
            get
            {
                return m_SystemFields;
            }
        }

        [AdminLoad(SkipLoad = true)]
        public AdminObjectList<QuotaField> QuotaFields
        {
            get
            {
                return m_QuotaFields;
            }
        }

        
        [AdminLoad(SkipLoad = true)]
        public IEnumerable<AdminObject> LookupAgents
        {
            get
            {
                return Agents.Cast<AdminObject>();
            }

        }

        public AdminObjectList<CurrentActivityFilter> ActivityFilters
        {
            get;
            internal set;
        }

        public AdminObjectList<Campaign> Campaigns
        {
            get;
            internal set;
        }

        public AdminObjectList<InboundActivity> InboundActivities
        {
            get;
            internal set;
        }

        public AdminObjectList<OutboundActivity> OutboundActivities
        {
            get;
            internal set;
        }


        public AdminObjectList<Planning> Plannings
        {
            get
            {
                return m_Plannings;
            }
            internal set
            {
                if (m_Plannings != null)
                    m_Plannings.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_Plannings_CollectionChanged);

                m_Plannings = value;

                if (m_Plannings != null)
                    m_Plannings.CollectionChanged += new NotifyCollectionChangedEventHandler(m_Plannings_CollectionChanged);

            }
        }

        void m_Plannings_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
        }

        // TODO: this one should not be needed, BUT if removed, exception is triggered (due to inconsistent CheckedAdminObjectList) when using a planning that has not been displayed..
        // This is due to other TODOs (Look at "Load from XML if needed")
        public AdminObjectList<PlanningTimeSpan> PlanningTimeSpans
        {
            get;
            internal set;
        }

        public AdminObjectList<Language> Languages
        {
            get;
            internal set;
        }

        public AdminObjectList<Preprocessor> Preprocessors
        {
            get
            {
                return m_Preprocessors;
            }
            internal set
            {
                if (m_Preprocessors != null)
                    m_Preprocessors.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_Preprocessors_CollectionChanged);

                m_Preprocessors = value;

                if (m_Preprocessors != null)
                    m_Preprocessors.CollectionChanged += new NotifyCollectionChangedEventHandler(m_Preprocessors_CollectionChanged);
            }
        }

        void m_Preprocessors_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            // propagate the change on inboundactivities and queues ( TODO: of the same media type)
            PropagatePreprocessorsChanges();
        }

        public void PropagatePreprocessorsChanges()
        {
            if (Queues != null)
            {
                foreach (Queue q in Queues)
                {
                    q.FirePropertyChanged("Preprocessors");
                }
            }
            if (InboundActivities != null)
            {
                foreach (InboundActivity ia in InboundActivities)
                {
                    ia.FirePropertyChanged("Preprocessors");
                }
            }

        }

        public AdminObjectList<CallbackRuleset> CallbackRulesets
        {
            get
            {
                return m_CallbackRulesets;
            }
            internal set
            {
                if (m_CallbackRulesets != null)
                    m_CallbackRulesets.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_CallbackRulesets_CollectionChanged);

                m_CallbackRulesets = value;

                if (m_CallbackRulesets != null)
                    m_CallbackRulesets.CollectionChanged += new NotifyCollectionChangedEventHandler(m_CallbackRulesets_CollectionChanged);
            }
        }

        void m_CallbackRulesets_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            FirePropertyChanged("GlobalSettings");
            FirePropertyChanged("ExtendedGlobalSettings");
        }

        public AdminObjectList<Phone> Phones
        {
            get;
            internal set;
        }

        public AdminObjectList<MohEntry> MohEntries
        {
            get;
            internal set;
        }


        public IEnumerable<string> GroupKeys(Type type)
        {
            lock (m_AdminObjects)
            {
                if (type == null)
                    return (m_AdminObjects.Values.Where((a) => (!(a is Language) && a.GroupKey != null)).Select((a) => (a.GroupKey)).Distinct()).ToList(); // ToList is important as it disable defer-execution (causing trouble in multi threading)

                return (m_AdminObjects.Values.Where((a) => (a.GroupKey != null && (a.GetType() == type || a.GetType().IsSubclassOf(type)))).Select((a) => (a.GroupKey)).Distinct()).ToList();
            }
        }

        public IEnumerable<string> GroupKeysOfType(Type[] types)
        {
            lock (m_AdminObjects)
            {
                return (m_AdminObjects.Values.Where((a) => (a.GroupKey != null && (types.Contains(a.GetType())))).Select((a) => (a.GroupKey)).Distinct()).ToList();
            }
        }

        public Dictionary<string, string> PauseGroups
        {
            get
            {
                Dictionary<string, string> sd = new Dictionary<string, string>();
                sd.Add(string.Empty, "<none>");
                foreach (string strGroupId in Pauses.Select((a) => (a.GroupId)).Distinct())
                {
                    if (strGroupId != null)
                    {
                        Pause p = Pauses.First((a) => (a.GroupId == strGroupId));
                        if(!sd.ContainsKey(p.GroupId))
                            sd.Add(p.GroupId, p.GroupKey);
                    }
                }
                return sd;
            }
        }

        public AdminObjectList<AppointmentsContext> AppointmentsContexts
        {
            get;
            internal set;
        }

        public AdminObjectList<Prompt> Prompts
        {
            get
            {
                return m_Prompts;
            }
            internal set
            {
                m_Prompts = value;
            }
        }

        public AdminObjectList<Location> Locations
        {
            get
            {
                return m_Locations;
            }
            internal set
            {
                if (m_Locations != null)
                    m_Locations.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_Locations_CollectionChanged);

                m_Locations = value;

                if (m_Locations != null)
                    m_Locations.CollectionChanged += new NotifyCollectionChangedEventHandler(m_Locations_CollectionChanged);

            }
        }

        void m_Locations_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            FirePropertyChanged("GlobalSettings");
            FirePropertyChanged("ExtendedGlobalSettings");
        }


        public AdminObjectList<Pause> Pauses
        {
            get;
            internal set;
        }

        [AdminLoad(SkipLoad=true)]
        public IEnumerable<NumberingPlanEntry> NumberingPlanEntries
        {
            get
            {
                List<NumberingPlanEntry> templist = new List<NumberingPlanEntry>();
                foreach(Carrier c in Carriers)
                    templist.AddRange(c.NumberingPlanEntries);
                return templist;
            }
        }

        public AdminObjectList<Carrier> Carriers
        {
            get
            {
                return m_Carriers;
            }
            internal set
            {
                if (m_Carriers != null)
                    m_Carriers.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_Carriers_CollectionChanged);

                m_Carriers = value;

                if (m_Carriers != null)
                    m_Carriers.CollectionChanged += new NotifyCollectionChangedEventHandler(m_Carriers_CollectionChanged);

            }
        }

        void m_Carriers_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            FirePropertyChanged("GlobalSettings");
            FirePropertyChanged("ExtendedGlobalSettings");
        }


        public AdminObjectList<NumberFormat> NumberFormats
        {
            get;
            internal set;
        }

        public AdminObjectList<AmdSettings> AmdSettings
        {
            get
            {
                return m_AmdSettings;
            }
            internal set
            {
                if (m_AmdSettings != null)
                    m_AmdSettings.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_AmdSettings_CollectionChanged);

                m_AmdSettings = value;

                if (m_AmdSettings != null)
                    m_AmdSettings.CollectionChanged += new NotifyCollectionChangedEventHandler(m_AmdSettings_CollectionChanged);
            }
        }

        void m_AmdSettings_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            FirePropertyChanged("GlobalSettings");
            FirePropertyChanged("ExtendedGlobalSettings");
        }


        public AdminObjectList<LocationCost> LocationCosts
        {
            get;
            internal set;
        }

        public AdminObjectList<Resource> Resources
        {
            get
            {
                return m_Resources;
            }
            internal set
            {
                if (m_Resources != null)
                    m_Resources.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_Resources_CollectionChanged);

                m_Resources = value;

                if (m_Resources != null)
                    m_Resources.CollectionChanged += new NotifyCollectionChangedEventHandler(m_Resources_CollectionChanged);

            }
        }

        void m_Resources_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            FirePropertyChanged("GlobalSettings");
            FirePropertyChanged("ExtendedGlobalSettings");
        }


        public AdminObjectList<Setting> Settings
        {
            get
            {
                return m_Settings;
            }
            internal set
            {
                if (m_Settings != null)
                    m_Settings.CollectionChanged -= new NotifyCollectionChangedEventHandler(m_Settings_CollectionChanged);

                m_Settings = value;

                if (m_Settings != null)
                    m_Settings.CollectionChanged += new NotifyCollectionChangedEventHandler(m_Settings_CollectionChanged);

            }
        }

        void m_Settings_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            FirePropertyChanged("GlobalSettings");
            FirePropertyChanged("ExtendedGlobalSettings");
        }


        public IEnumerable<AdminObject> GlobalSettings
        {
            get
            {
                List < AdminObject >  temp = new List<AdminObject>();
                temp.Add(new Nixxis.Client.Admin.Information(this));
                return temp;
            }
        }

        public IEnumerable<AdminObject> ExtendedGlobalSettings
        {
            get
            {
                if(Settings!=null)  
                    return GlobalSettings.Union(Settings).Union(Resources).Union(CallbackRulesets).Union(Carriers);
                else
                    return GlobalSettings.Union(Resources).Union(CallbackRulesets).Union(Carriers);
            }
        }

        public Setting DefaultSettings
        {
            get
            {
                Setting s = ExtendedGlobalSettings.FirstOrDefault((a) => (a.Id == "defaultsetting++++++++++++++++++")) as Setting;
                if (s != null)
                    return s;

                return null;
            }
        }

        public AdminHidden Hidden
        {
            get;
            internal set;
        }

        internal XmlElement RootElement
        {
            get
            {
                return m_XmlAdminObjects.DocumentElement;
            }
        }

        public XmlNode GetXmlNodesById(string id)
        {
            return m_MultiIndexedXml.GetSingle("id", id);
        }

        public IEnumerable<XmlNode> GetXmlNodesByParentId(string parentId)
        {
            IEnumerable<XmlNode> temp = m_MultiIndexedXml.Get("parentid", parentId);
            if (temp == null)
                return new List<XmlNode>();
            return temp;
        }

        private void AddDummyObjects(XmlDocument document)
        {
            XmlNode tmpNode = document.SelectSingleNode("/Admin/Queues");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("Queues");
                document.DocumentElement.AppendChild(tmpNode);
            }

            XmlNode tmpNode2 = document.CreateElement("Queue");
            tmpNode.AppendChild(tmpNode2);

            XmlAttribute tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummyqueue++++++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";

            tmpNode = document.CreateElement("OverflowActionType");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "0";





            tmpNode = document.SelectSingleNode("/Admin/Locations");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("Locations");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("Location");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummylocation+++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";



            tmpNode = document.SelectSingleNode("/Admin/AmdSettings");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("AmdSettings");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("AmdSettings");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummyamd++++++++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";



            tmpNode = document.SelectSingleNode("/Admin/OutboundActivities");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("OutboundActivities");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("OutboundActivity");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummyout++++++++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";




            tmpNode = document.SelectSingleNode("/Admin/Plannings");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("Plannings");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("Planning");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummyplanning+++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";



            tmpNode = document.SelectSingleNode("/Admin/PlanningTimeSpans");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("PlanningTimeSpans");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("PlanningTimeSpan");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummyplanningts+++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("planningid");
            tmpAtt.Value = "dummyplanning+++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);


            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";

            tmpNode = document.CreateElement("PlanningId");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "dummyplanning+++++++++++++++++++";



            tmpNode = document.SelectSingleNode("/Admin/CallbackRulesets");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("CallbackRulesets");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("CallbackRuleset");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummycbrules++++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";




            tmpNode = document.SelectSingleNode("/Admin/SecurityContexts");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("SecurityContexts");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("SecurityContext");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummysecuritycontext++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";




            tmpNode = document.SelectSingleNode("/Admin/Agents");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("Agents");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("Agent");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummyagent++++++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";




            tmpNode = document.SelectSingleNode("/Admin/Carriers");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("Carriers");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("Carrier");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummycarrier++++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";




            tmpNode = document.SelectSingleNode("/Admin/Preprocessors");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("Preprocessors");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("Preprocessor");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummypreprocessor+++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("MediaType");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "15";

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";




            tmpNode = document.SelectSingleNode("/Admin/NumberingPlanEntries");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("NumberingPlanEntries");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("NumberingPlanEntry");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummynumberingplanentry+++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";

            tmpNode = document.CreateElement("Carrier");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "dummycarrier++++++++++++++++++++";

            tmpAtt = document.CreateAttribute("carrierid");
            tmpAtt.Value = "dummycarrier++++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);







            tmpNode = document.SelectSingleNode("/Admin/Prompts");
            if (tmpNode == null)
            {
                tmpNode = document.CreateElement("Prompts");
                document.DocumentElement.AppendChild(tmpNode);
            }

            tmpNode2 = document.CreateElement("Prompt");
            tmpNode.AppendChild(tmpNode2);

            tmpAtt = document.CreateAttribute("id");
            tmpAtt.Value = "dummyprompt+++++++++++++++++++++";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpAtt = document.CreateAttribute("state");
            tmpAtt.Value = "10";
            tmpNode2.Attributes.Append(tmpAtt);

            tmpNode = document.CreateElement("Description");
            tmpNode2.AppendChild(tmpNode);
            tmpNode.InnerText = "<+++++++++++>";
        }

        public void Load(XmlDocument document)
        {

            if (m_TimeStamp[0] != 0 ||
                m_TimeStamp[1] != 0 ||
                m_TimeStamp[2] != 0 ||
                m_TimeStamp[3] != 0 ||
                m_TimeStamp[4] != 0 ||
                m_TimeStamp[5] != 0 ||
                m_TimeStamp[6] != 0 ||
                m_TimeStamp[7] != 0)
            {
                Reload(document);
                return;
            }

            m_Loading = true;


            if (document != null && document.DocumentElement != null)
            {
                AddDummyObjects(document);

                List<string> GuiLan = new List<string>();
                foreach (XmlNode nde in document.SelectNodes("/Admin/GuiLanguages/GuiLanguage"))
                {
                    GuiLan.Add(nde.InnerText);
                }

                m_PrivateMediaProviders = new List<MediaProvider>();
                foreach (XmlNode nde in document.SelectNodes("/Admin/MediaProviders/MediaProvider"))
                {
                    m_PrivateMediaProviders.Add(new MediaProvider(nde));
                }

                IEqualityComparer<string> comparer = new CIComparer();
                m_PrivateGuiLanguages = new List<Language.SimpleLanguage>( Language.Languages.Where((sl)=> (GuiLan.Contains(sl.Isocode, comparer ) ) ) );
                m_PrivateGuiLanguages.Insert(0, new Language.SimpleLanguage() { Isocode = "NullLanguage++++++++++++++++++++", Description = "/" });


                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.Internal__Id__)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    IsIndexed = true,
                    IsUniqueConstraint = true
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.CurrentActivity)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    Lookup = LookupTypes.Activities
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.PreviousActivity)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    Lookup = LookupTypes.Activities
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastHandlerActivity)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    Lookup = LookupTypes.Activities
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastContactId)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastActivityChange)
                {
                    DBType = DBTypes.Datetime,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastHandler)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    Lookup = LookupTypes.Agents
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastHandlingTime)
                {
                    DBType = DBTypes.Datetime,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastHandlingDuration)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.TotalHandlingDuration)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.TotalHandlers)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.State)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.PreviousState)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.SortInfo)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.CustomSortInfo)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.Priority)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.DialingModeOverride)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.DialStartDate)
                {
                    DBType = DBTypes.Datetime,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.DialEndDate)
                {
                    DBType = DBTypes.Datetime,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.CreationTime)
                {
                    DBType = DBTypes.Datetime,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.ImportSequence)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.ImportTag)
                {
                    DBType = DBTypes.String,
                    Length = 250,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.ExportSequence)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.RecycleCount)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastRecycle)
                {
                    DBType = DBTypes.Datetime,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.ExportTime)
                {
                    DBType = DBTypes.Datetime,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.TargetHandler)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    Lookup = LookupTypes.Agents
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.PreferredAgent)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    Lookup = LookupTypes.Agents
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.TargetDestination)
                {
                    DBType = DBTypes.String,
                    Length = 250,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.TargetMedia)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.DialedCurrentActivity)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.TotalDialed)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.MaxDialAttempts)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.ExpectedProfit)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastDialStatus)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastDialStatusCount)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastDialedDestination)
                {
                    DBType = DBTypes.String,
                    Length = 250,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastQualification)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    Lookup = LookupTypes.Qualifications
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastQualificationArgued)
                {
                    DBType = DBTypes.Boolean,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastQualificationPositive)
                {
                    DBType = DBTypes.Integer,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.LastQualificationExportable)
                {
                    DBType = DBTypes.Boolean,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.AreaId)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                    Lookup = LookupTypes.Area
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.AppointmentId)
                {
                    DBType = DBTypes.String,
                    Length = 32,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.Excluded)
                {
                    DBType = DBTypes.Boolean,
                }));

                SystemFields.Add(SetAdminObject(new SystemField(this, SystemFieldMeanings.VMFlagged)
                {
                    DBType = DBTypes.Boolean,
                }));


                
                
                
                QuotaFields.Add(SetAdminObject(new QuotaField(this, QuotaFieldMeanings.MaxAbsoluteProgress)
                {
                    DBType = DBTypes.Integer,
                }));
                QuotaFields.Add(SetAdminObject(new QuotaField(this, QuotaFieldMeanings.MaxAbsoluteRemaining)
                {
                    DBType = DBTypes.Integer,
                }));
                QuotaFields.Add(SetAdminObject(new QuotaField(this, QuotaFieldMeanings.MaxRelativeProgress)
                {
                    DBType = DBTypes.Integer,
                }));
                QuotaFields.Add(SetAdminObject(new QuotaField(this, QuotaFieldMeanings.MaxRelativeRemaining)
                {
                    DBType = DBTypes.Integer,
                }));
                QuotaFields.Add(SetAdminObject(new QuotaField(this, QuotaFieldMeanings.MinAbsoluteProgress)
                {
                    DBType = DBTypes.Integer,
                }));
                QuotaFields.Add(SetAdminObject(new QuotaField(this, QuotaFieldMeanings.MinAbsoluteRemaining)
                {
                    DBType = DBTypes.Integer,
                }));
                QuotaFields.Add(SetAdminObject(new QuotaField(this, QuotaFieldMeanings.MinRelativeProgress)
                {
                    DBType = DBTypes.Integer,
                }));
                QuotaFields.Add(SetAdminObject(new QuotaField(this, QuotaFieldMeanings.MinRelativeRemaining)
                {
                    DBType = DBTypes.Integer,
                }));



                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                
                sw.Start();

                m_XmlAdminObjects = document;

                ReportProgress(TranslationContext.Default.Translate("Indexing XML document..."));
                
                m_MultiIndexedXml = new MultiIndexedCollection(m_XmlAdminObjects.DocumentElement);

                m_NotPreloaded = new SortedList<string, Tuple<Type, AdminObject>>();
               
                ResetLoadProgress();

                m_TotalCount = m_MultiIndexedXml.ProgressCounter;

                System.Diagnostics.Trace.WriteLine(string.Format( "Xml Indexation took {0} ms" , sw.ElapsedMilliseconds), "Performances");

                sw.Restart();

                m_TimeStamp = System.Convert.FromBase64String(document.DocumentElement.Attributes["maxtimestamp"].Value);

                Load(document.DocumentElement);

                System.Diagnostics.Trace.WriteLine(string.Format("Loading took {0} ms", sw.ElapsedMilliseconds), "Performances");

                CurrentActivityFilter TmpActivityFilter;

                TmpActivityFilter = new CurrentActivityFilter(this, "_0this");
                TmpActivityFilter.DoneLoading();

                ActivityFilters.Add(SetAdminObject(TmpActivityFilter));

                TmpActivityFilter = new CurrentActivityFilter(this, "_2any");
                TmpActivityFilter.DoneLoading();

                ActivityFilters.Add(SetAdminObject(TmpActivityFilter));

                TmpActivityFilter = new CurrentActivityFilter(this, "_1null");
                TmpActivityFilter.DoneLoading();

                ActivityFilters.Add(SetAdminObject(TmpActivityFilter));

                TmpActivityFilter = new CurrentActivityFilter(this, "_3dnr");
                TmpActivityFilter.DoneLoading();

                ActivityFilters.Add(SetAdminObject(TmpActivityFilter));


            }

            m_Loading = false;


        }

        public void Reload(XmlDocument document)
        {
            m_Loading = true;


            if (document != null && document.DocumentElement != null)
            {
                AddDummyObjects(document);

                m_TimeStamp = System.Convert.FromBase64String(document.DocumentElement.Attributes["maxtimestamp"].Value);

                while (true)                
                    if (Reload(document.DocumentElement))
                        break;
            }

            m_Loading = false;

        }

        public long TimeStamp
        {
            get
            {
                return ConvertTimeStamp(m_TimeStamp);
            }
        }

        public static long ConvertTimeStamp(byte[] timestamp)
        {
            long returnValue = 0;

            returnValue += timestamp[0];
            returnValue = returnValue << 8;
            returnValue += timestamp[1];
            returnValue = returnValue << 8;
            returnValue += timestamp[2];
            returnValue = returnValue << 8;
            returnValue += timestamp[3];
            returnValue = returnValue << 8;
            returnValue += timestamp[4];
            returnValue = returnValue << 8;
            returnValue += timestamp[5];
            returnValue = returnValue << 8;
            returnValue += timestamp[6];
            returnValue = returnValue << 8;
            returnValue += timestamp[7];

            return returnValue;
        }

        public bool LoadHidden(XmlNode node)
        {
            bool success = true;
            Type tpe = null;
            if (node.Attributes != null && node.Attributes.Count > 1 && (tpe = Type.GetType(string.Concat("Nixxis.Client.Admin.", node.Name), false, true)) != null)
            {
                if (node.Attributes["id"] != null && !string.IsNullOrEmpty(node.Attributes["id"].Value))
                {
                    #region simple admin object
                    AdminObject ao = GetAdminObject(node.Attributes["id"].Value);

                    if (ao == null)
                    {
                        // it's a new object! let's create it...

                        AdminObject parentAdminObject = null;

                        try
                        {
                            PropertyInfo pi = this.Hidden.GetType().GetProperty(node.ParentNode.Name);
                            parentAdminObject = pi.GetGetMethod().Invoke(this.Hidden, new object[] { }) as AdminObject;
                        }
                        catch
                        {
                        }

                        if (parentAdminObject != null)
                        {
                            ao = (AdminObject)Activator.CreateInstance(tpe, new object[] { parentAdminObject });

                            m_AdminObjects.Add(node.Attributes["id"].Value, ao);

                            ao.Load((XmlElement)node);

                            if (parentAdminObject is AdminObjectList)
                            {
                                if (!(parentAdminObject as AdminObjectList).ContainsId(ao.Id))
                                    (parentAdminObject as AdminObjectList).AddTest(ao);
                            }
                        }
                    }

                    // we do a reload in all cases...
                    if (ao != null)
                    {
                        if (!ao.Reload(node))
                            success = false;
                    }

                    #endregion
                }
            }
            else
            {
                if (node.HasChildNodes)
                {
                    List<XmlNode> todelete = new List<XmlNode>();
                    foreach (XmlNode nde in node.ChildNodes)
                    {
                        if (!LoadHidden(nde))
                            success = false;
                        else
                            todelete.Add(nde);
                    }

                    foreach (XmlNode nde in todelete)
                    {
                        nde.ParentNode.RemoveChild(nde);
                    }
                }
            }
            return success;
        }

        public bool Reload(XmlNode node)
        {
            bool success = true;

            if (node.Name.Equals("Removed"))
            {
                Delete(node);
            }
            else if (node.Name.Equals("Hidden"))
            {
                Delete(node);
                // TODO: put it in InactiveItems...

                foreach (XmlNode nde in node.ChildNodes)
                {
                    LoadHidden(nde);
                }
            }
            else
            {
                Type tpe = null;
                if (node.Attributes!=null && node.Attributes.Count > 1 && (tpe = Type.GetType(string.Concat("Nixxis.Client.Admin.", node.Name), false, true)) != null)
                {
                    if (node.Attributes["id"] != null && !string.IsNullOrEmpty(node.Attributes["id"].Value))
                    {
                        #region simple admin object
                        AdminObject ao = GetAdminObject(node.Attributes["id"].Value);

                        if (ao == null)
                        {
                            // it's a new object! let's create it...

                            AdminObject parentAdminObject = this;

                            try
                            {
                                PropertyInfo pi = this.GetType().GetProperty(node.ParentNode.Name);
                                parentAdminObject = pi.GetGetMethod().Invoke(this, new object[] { }) as AdminObject;
                            }
                            catch
                            {
                            }

                            ao = (AdminObject)Activator.CreateInstance(tpe, new object[] { parentAdminObject });

                            m_AdminObjects.Add(node.Attributes["id"].Value, ao);

                            ao.Load((XmlElement)node);

                            if (parentAdminObject is AdminObjectList)
                            {
                                if (!(parentAdminObject as AdminObjectList).ContainsId(ao.Id))
                                    (parentAdminObject as AdminObjectList).AddTest(ao);
                            }
                        }

                        // we do a reload in all cases...
                        if (ao != null)
                        {
                            if (!ao.Reload(node))
                                success = false;
                        }

                        #endregion
                    }
                    else
                    {
                        if (tpe.IsSubclassOf(typeof(AdminObjectLink)))
                        {
                            MethodInfo ppnode = tpe.GetMethod("PreProcessNode", BindingFlags.Public | BindingFlags.Static | BindingFlags.InvokeMethod);
                            if (ppnode != null)
                                ppnode.Invoke(null, new object[] { node });

                            #region Admin object link
                            List<string> ids = new List<string>();
                            foreach (System.Xml.XmlAttribute att in node.Attributes)
                            {
                                if (att.Name.EndsWith("id"))
                                {
                                    ids.Add(att.Value);
                                }
                            }
                            System.Diagnostics.Debug.Assert(ids.Count == 2);
                            AdminObject ao = this.GetAdminObject(string.Concat(ids[0], "/", ids[1]));

                            if(ao==null)
                            {
                                ao = this.GetAdminObject(string.Concat(ids[1], "/", ids[0]));

                                if (ao == null)
                                {
                                    // create a new link...

                                    AdminObjectList parentList = null;

                                    AdminObject tempObj1 = GetAdminObject(ids[0]);
                                    AdminObject tempObj2 = GetAdminObject(ids[1]);

                                    if (tempObj1 == null || tempObj2 == null)
                                        success = false;
                                    else
                                    {

                                        // search tempObj1 for a list of links with types of ids[0] and ids[1]...
                                        Type tpe1 = tempObj1.GetType();
                                        Type tpe2 = tempObj2.GetType();
                                        foreach (PropertyInfo pi in tpe1.GetProperties())
                                        {
                                            if (pi.PropertyType.IsSubclassOf(typeof(AdminObjectList)) && pi.PropertyType.IsGenericType)
                                            {
                                                Type[] GenericArgs = pi.PropertyType.GetGenericArguments();
                                                if (GenericArgs.Length > 0)
                                                {
                                                    if (GenericArgs[0].Equals(tpe))
                                                    {
                                                        parentList = (AdminObjectList)pi.GetGetMethod().Invoke(tempObj1, new object[] { });
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (parentList == null)
                                        {
                                            foreach (PropertyInfo pi in tpe2.GetProperties())
                                            {
                                                if (pi.PropertyType.IsSubclassOf(typeof(AdminObjectList)) && pi.PropertyType.IsGenericType)
                                                {
                                                    Type[] GenericArgs = pi.PropertyType.GetGenericArguments();
                                                    if (GenericArgs.Length > 0)
                                                    {
                                                        if (GenericArgs[0].Equals(tpe))
                                                        {
                                                            parentList = (AdminObjectList)pi.GetGetMethod().Invoke(tempObj2, new object[] { });
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        System.Diagnostics.Debug.Assert(parentList != null);

                                        if (parentList != null)
                                        {
                                            ao = (AdminObjectLink)Activator.CreateInstance(tpe, new object[] { parentList });

                                            ao.Load((XmlElement)node);
                                            SetAdminObject(ao);

                                            if (parentList is AdminObjectList)
                                            {
                                                if (!(parentList as AdminObjectList).ContainsId(ao.Id))
                                                    (parentList as AdminObjectList).AddId(ao.Id);
                                            }
                                        }
                                    }
                                }
                            }

                            if (ao != null)
                                ao.Reload(node);

                            #endregion
                        }
                        else if(tpe.Equals(typeof(LocationCost)))
                        {
                            #region Location cost
                            LocationCost tempCost = new LocationCost(this);
                            tempCost.Load(node as XmlElement);
                            LocationCost tempao = null;                            

                            foreach (LocationCost lc in LocationCosts)
                            {
                                if (lc.ToLocation.HasTarget && tempCost.ToLocation.HasTarget && lc.ToLocation.TargetId.Equals(tempCost.ToLocation.TargetId) &&
                                    lc.FromLocation.HasTarget && tempCost.FromLocation.HasTarget && lc.FromLocation.TargetId.Equals(tempCost.FromLocation.TargetId))
                                {
                                    tempao = lc;
                                    break;
                                }
                            }

                            if (tempao == null)
                            {
                                tempao = tempCost;
                                if (!tempao.FromLocation.HasTarget || !tempao.ToLocation.HasTarget)
                                {
                                    tempao = null;
                                    success = false;
                                }
                                else
                                {                                    
                                    SetAdminObject(tempao);
                                    LocationCosts.Add(tempao);
                                }

                            }
                            if (tempao != null)
                            {
                                tempao.Reload(node);
                            }
                            #endregion
                        }
                        else if (tpe.Equals(typeof(ViewRestriction)))
                        {
                            #region ViewRestriction
                            // specific!!!!
                            ViewRestriction tempCost = new ViewRestriction(this);
                            tempCost.Load(node as XmlElement);
                            ViewRestriction tempao = null;

                            Agent agt = GetAdminObject(tempCost.UserId) as Agent;
                            if (agt != null)
                            {
                                foreach (ViewRestriction vr in agt.ViewRestrictions)
                                {
                                    if (vr.Precedence == tempCost.Precedence)
                                    {
                                        tempao = vr;
                                    }
                                }
                                if (tempao == null)
                                {
                                    tempao = tempCost;
                                    tempao.Id = System.Guid.NewGuid().ToString("N");
                                    SetAdminObject(tempao);
                                    agt.ViewRestrictions.Add(tempao);
                                }
                            }

                            if (tempao != null)
                            {
                                tempao.Reload(node);
                            }
                            else
                            {
                                success = false;
                            }
                            #endregion
                        }
                        else if (tpe.Equals(typeof(CallbackRule)))
                        {
                            #region Callbackrule
                            // specific!!!!
                            CallbackRule tempCost = new CallbackRule(this);
                            tempCost.Load(node as XmlElement);
                            CallbackRule tempao = null;

                            CallbackRuleset agt = GetAdminObject(node.Attributes["callbackrulesetid"].Value) as CallbackRuleset;
                            if (agt != null)
                            {
                                foreach (CallbackRule vr in agt.Rules)
                                {
                                    if (vr.Sequence == tempCost.Sequence)
                                    {
                                        tempao = vr;
                                    }
                                }
                                if (tempao == null)
                                {
                                    tempao = tempCost;
                                    tempao.Id = System.Guid.NewGuid().ToString("N");
                                    SetAdminObject(tempao);
                                    agt.Rules.Add(tempao);
                                }
                            }

                            if (tempao != null)
                            {
                                tempao.Reload(node);
                            }
                            else
                            {
                                success = false;
                            }
                            #endregion
                        }
                    }
                }
                else
                {
                    if (node.HasChildNodes)
                    {
                        List<XmlNode> todelete = new List<XmlNode>();
                        foreach (XmlNode nde in node.ChildNodes)
                        {
                            if (!Reload(nde))
                                success = false;
                            else
                                todelete.Add(nde);
                        }

                        foreach (XmlNode nde in todelete)
                        {
                            nde.ParentNode.RemoveChild(nde);
                        }
                    }
                }
            }
            return success;
        }

        private void Delete(XmlNode deleteNode)
        {

            Type tpe = Type.GetType(string.Concat("Nixxis.Client.Admin.", deleteNode.Name), false, true);

            if (tpe != null)
            {
                if (deleteNode.Attributes["id"] != null && !string.IsNullOrEmpty(deleteNode.Attributes["id"].Value))
                {
                    AdminObject ao = GetAdminObject(deleteNode.Attributes["id"].Value);
                    if (ao != null)
                    {
                        if (!ao.HasBeenDeleted)
                            Delete(ao);
                        ao.Delete();

                        if (ao.Parent is AdminObjectList)
                        {
                            (ao.Parent as AdminObjectList).RemoveId(ao.Id);
                        }

                    }
                }
                else
                {
                    if (tpe.IsSubclassOf(typeof(AdminObjectLink)))
                    {
                        MethodInfo ppnode = tpe.GetMethod("PreProcessNode", BindingFlags.Public | BindingFlags.Static | BindingFlags.InvokeMethod);
                        if (ppnode != null)
                            ppnode.Invoke(null, new object[] { deleteNode });

                        List<string> ids = new List<string>();
                        foreach (System.Xml.XmlAttribute att in deleteNode.Attributes)
                        {
                            if (att.Name.EndsWith("id"))
                            {
                                ids.Add(att.Value);
                            }
                        }
                        System.Diagnostics.Debug.Assert(ids.Count == 2);
                        AdminObject ao = this.GetAdminObject(string.Concat(ids[0], "/", ids[1]));
                        if (ao != null)
                        {
                            if (!ao.HasBeenDeleted)
                                Delete(ao);

                            ao.Delete();
                            if (ao.Parent is AdminObjectList)
                            {
                                (ao.Parent as AdminObjectList).RemoveId(ao.Id);
                            }

                        }
                        else
                        {
                            ao = this.GetAdminObject(string.Concat(ids[1], "/", ids[0]));
                            if (ao != null)
                            {
                                if (!ao.HasBeenDeleted)
                                    Delete(ao);

                                ao.Delete();
                                if (ao.Parent is AdminObjectList)
                                {
                                    (ao.Parent as AdminObjectList).RemoveId(ao.Id);
                                }
                            }
                        }
                    }
                    else if (tpe.Equals(typeof(LocationCost)))
                    {
                        string fromloc = deleteNode.Attributes["fromlocation"].Value;
                        string toloc = deleteNode.Attributes["tolocation"].Value;
                        AdminObject ao = this.GetAdminObject(string.Concat(fromloc, "/", toloc));
                        if (ao != null)
                        {
                            if (!ao.HasBeenDeleted)
                                Delete(ao);
                            ao.Delete();

                            LocationCosts.RemoveId(ao.Id);
                        }
                    }
                    else if (tpe.Equals(typeof(ViewRestriction)))
                    {
                        foreach (AdminObject ao in m_DeletedObjects.Values)
                        {
                            if (ao is ViewRestriction)
                            {
                                ViewRestriction vr = (ViewRestriction)ao;
                                if (vr.m_BackupUserId!=null && vr.m_BackupUserId.Equals(deleteNode.Attributes["agentid"].Value) && vr.m_BackupPrecedence.Equals(Int32.Parse(deleteNode.InnerText)))
                                {
                                    vr.Delete();
                                }
                            }
                        }

                        Agent agt = GetAdminObject(deleteNode.Attributes["agentid"].Value) as Agent;
                        if (agt != null)
                        {
                            for (int i = 0; i < agt.ViewRestrictions.Count; i++)
                            {
                                ViewRestriction vr = agt.ViewRestrictions[i];
                                if (vr.Precedence == Int32.Parse(deleteNode.InnerText))
                                {                                    
                                    if(!vr.HasBeenDeleted)
                                        Delete(vr);
                                    vr.Delete();

                                    agt.ViewRestrictions.RemoveId(vr.Id);
                                    break;
                                }
                            }

                        }

                    }
                    else if (tpe.Equals(typeof(CallbackRule)))
                    {
                        foreach (AdminObject ao in m_DeletedObjects.Values)
                        {
                            if (ao is CallbackRule)
                            {
                                CallbackRule vr = (CallbackRule)ao;
                                if (vr.m_BackupCallbackRule != null && vr.m_BackupCallbackRule.Equals(deleteNode.Attributes["callbackrulesetid"].Value) && vr.m_BackupPrecedence.Equals(Int32.Parse(deleteNode.InnerText)))
                                {
                                    vr.Delete();
                                }
                            }
                        }

                        CallbackRuleset agt = GetAdminObject(deleteNode.Attributes["callbackrulesetid"].Value) as CallbackRuleset;
                        if (agt != null)
                        {
                            for (int i = 0; i < agt.Rules.Count; i++)
                            {
                                CallbackRule vr = agt.Rules[i];
                                if (vr.Sequence == Int32.Parse(deleteNode.InnerText))
                                {
                                    if (!vr.HasBeenDeleted)
                                        Delete(vr);
                                    vr.Delete();

                                    agt.Rules.RemoveId(vr.Id);
                                    break;
                                }
                            }

                        }

                    }
                }
            }
            else if(deleteNode.Name.Equals("ClosedAction"))
            {
                string activityid = deleteNode.Attributes["activityid"].Value;
                if (deleteNode.Attributes["planningid"] == null)
                {
                    InboundActivity ac = GetAdminObject(activityid) as InboundActivity;
                    if (ac != null)
                    {
                        ac.SetNoAgentClosedActionDeleted();
                    }
                }
                else if (deleteNode.Attributes["closedreasonid"] == null)
                {
                    AdminObject obj = GetAdminObject(activityid);
                    if (obj is InboundActivity)
                    {
                        InboundActivity inact = (InboundActivity)obj;
                        inact.ClosedActionDeleted();

                    }
                    else if (obj is OutboundActivity)
                    {
                        OutboundActivity inact = (OutboundActivity)obj;
                        inact.ClosedActionDeleted();

                    }
                }
                else
                {
                    string closedreason = deleteNode.Attributes["closedreasonid"].Value;
                    AdminObject obj = GetAdminObject(activityid);
                    if (obj is InboundActivity)
                    {
                        InboundActivity inact = (InboundActivity)obj;
                        for (int i = 0; i < inact.TimeSpanActions.Count; i++)
                        {
                            InboundActivityTimeSpanAction iatsa = inact.TimeSpanActions[i];
                            if (iatsa.PlanningTimeSpanId.Equals(closedreason))
                            {
                                if (!iatsa.HasBeenDeleted)
                                    Delete(iatsa);
                                iatsa.Delete();
                                inact.TimeSpanActions.Remove(iatsa);
                            }
                        }
                        for (int i = 0; i < inact.SpecialDayActions.Count; i++)
                        {
                            InboundActivitySpecialDayAction iatsa = inact.SpecialDayActions[i];
                            if (iatsa.SpecialDayId.Equals(closedreason))
                            {
                                if (!iatsa.HasBeenDeleted)
                                    Delete(iatsa);
                                iatsa.Delete();
                                inact.SpecialDayActions.Remove(iatsa);
                            }
                        }

                    }
                    else if (obj is OutboundActivity)
                    {
                        OutboundActivity outact = (OutboundActivity)obj;

                        for (int i = 0; i < outact.TimeSpanActions.Count; i++)
                        {
                            OutboundActivityTimeSpanAction iatsa = outact.TimeSpanActions[i];
                            if (iatsa.PlanningTimeSpanId.Equals(closedreason))
                            {
                                if (!iatsa.HasBeenDeleted)
                                    Delete(iatsa);
                                iatsa.Delete();
                                outact.TimeSpanActions.Remove(iatsa);
                            }
                        }
                        for (int i = 0; i < outact.SpecialDayActions.Count; i++)
                        {
                            OutboundActivitySpecialDayAction iatsa = outact.SpecialDayActions[i];
                            if (iatsa.SpecialDayId.Equals(closedreason))
                            {
                                if (!iatsa.HasBeenDeleted)
                                    Delete(iatsa);
                                iatsa.Delete();
                                outact.SpecialDayActions.Remove(iatsa);
                            }
                        }
                    }

                }
            }
            else
            {
                if (deleteNode.HasChildNodes)
                {
                    foreach (XmlNode childNode in deleteNode.ChildNodes)
                        Delete(childNode);
                }
            }
        }

        public void SaveAppliedSuccessfully()
        {
            lock (m_AdminObjects)
            {
                foreach (AdminObject Obj in m_AdminObjects.Values)
                {
                    Obj.SaveApplied();
                }
            }
        }

        public void ClearDeleted()
        {
            lock (m_DeletedObjects)
            {
                m_DeletedObjects.Clear();
            }
        }

        public void ClearReferences()
        {
            lock (m_AdminObjects)
            {
                foreach (AdminObject Obj in m_AdminObjects.Values)
                    Obj.InternalClearReferences();
                foreach (AdminObject Obj in m_DeletedObjects.Values)
                    Obj.InternalClearReferences();

                m_AdminObjects.Clear();
                m_DeletedObjects.Clear();


               
            }
        }


        public override void Dump(System.Text.StringBuilder sb, HashSet<AdminObject> dumpedObjects, string prefix, int indent)
        {
            sb.AppendLine("References:");

            lock (m_ObjectReferences)
            {
                foreach (string ChildId in m_ObjectReferences.Keys)
                {
                    sb.AppendLine(GetAdminObject(ChildId).ToString());

                    foreach (string ParentId in m_ObjectReferences[ChildId])
                    {
                        sb.Append("     ").AppendLine(GetAdminObject(ParentId).ToString());
                    }
                }

                sb.AppendLine();
            }

            base.Dump(sb, dumpedObjects, prefix, indent);
        }

        public string GetShortDisplayText(string id)
        {
            return GetAdminObject(id).ShortDisplayText;
        }

        public string GetDisplayText(string id)
        {
            return GetAdminObject(id).DisplayText;
        }

        public string GetTypedDisplayText(string id)
        {
            return GetAdminObject(id).TypedDisplayText;
        }

        internal void FirePropertyChanged(AdminObject source, string propertyName)
        {
            //TODO: trigger global events

#if INTERNAL_DEBUG
            System.Diagnostics.Debug.WriteLine(string.Format("{0} {1} property {2} changed", InternalDebug.ClassName[source], InternalDebug.ObjectId[source], propertyName));
#endif
        }

        internal void FireCollectionChanged(AdminObjectList source, NotifyCollectionChangedAction action)
        {
#if INTERNAL_DEBUG
            System.Diagnostics.Debug.WriteLine(string.Format("Collection {0} {1} {2}", InternalDebug.ClassName[source], InternalDebug.ObjectId[source], action.ToString()));
#endif
        }

        internal void FireCollectionChanged(AdminObjectList source, NotifyCollectionChangedAction action, AdminObject item)
        {
#if INTERNAL_DEBUG
            System.Diagnostics.Debug.WriteLine(string.Format("Collection {0} {1} {2} {3}", InternalDebug.ClassName[source], InternalDebug.ObjectId[source], action.ToString(), item.ToString()));
#endif
        }

        internal void FireCollectionChanged(AdminObjectList source, NotifyCollectionChangedAction action, AdminObject oldItem, AdminObject newItem)
        {
#if INTERNAL_DEBUG
            System.Diagnostics.Debug.WriteLine(string.Format("Collection {0} {1} {2} {3} and {4}", InternalDebug.ClassName[source], InternalDebug.ObjectId[source], action.ToString(), oldItem.ToString(), newItem.ToString()));
#endif
        }

    }

#if INTERNAL_DEBUG
    internal static class InternalDebug
    {
        public class ClassNameGet
        {
            private void FillClassName(Type type, System.Text.StringBuilder sb)
            {
                sb.Append(type.Namespace);

                if (type.IsGenericType)
                {
                    int Pos = type.Name.IndexOf('`');

                    if (Pos >= 0)
                        sb.Append(type.Name.Substring(0, Pos));
                    else
                        sb.Append(type.Name);

                    sb.Append('<');

                    foreach (Type ArgType in type.GetGenericArguments())
                    {
                        FillClassName(ArgType, sb);
                    }

                    sb.Append('>');
                }
                else
                {
                    sb.Append(type.Name);
                }
            }

            public string this[object item]
            {
                get
                {
                    if (item == null)
                        return "(null)";

                    Type ItemType = item.GetType();
                    System.Text.StringBuilder SB = new System.Text.StringBuilder();

                    FillClassName(ItemType, SB);

                    return SB.ToString();
                }
            }
        }

        public class ObjectIdGet
        {
            public string this[AdminObject item]
            {
                get
                {
                    if (item.Id == null)
                    {
                        if (item.Parent != null)
                            return string.Concat("in ", new ClassNameGet()[item.Parent], " ", this[item.Parent]);

                        return string.Empty;
                    }

                    return item.Id;
                }
            }
        }

        public class ObjectFullNameGet
        {
            public string this[AdminObject item]
            {
                get
                {
                    return string.Concat(new ClassNameGet()[item], " ", new ObjectIdGet()[item]);
                }
            }
        }

        public static string CallerName
        {
            get
            {
                System.Diagnostics.StackTrace ST = new System.Diagnostics.StackTrace(0, true);
                System.Diagnostics.StackFrame SF = ST.GetFrame(2);

                return string.Concat(SF.GetMethod().ReflectedType.Name, ".", SF.GetMethod().Name, " in ", SF.GetFileName(), ":", SF.GetFileLineNumber().ToString()).TrimEnd('\r', '\n');
            }
        }

        public static ClassNameGet ClassName
        {
            get
            {
                return new ClassNameGet();
            }
        }

        public static ObjectIdGet ObjectId
        {
            get
            {
                return new ObjectIdGet();
            }
        }

        public static ObjectFullNameGet ObjectFullName
        {
            get
            {
                return new ObjectFullNameGet();
            }
        }
    }
#endif

    [Flags]
    public enum ConvertFlags
    {
        EnumValueAsInt = 1,
        CreateInstanceWithStringParameter = 2,
        BoolValueAsInt = 4
    }


    [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
    public class ConvertOptionsAttribute : Attribute
    {
        public ConvertFlags Flags;

        public ConvertOptionsAttribute(ConvertFlags flags)
        {
            Flags = flags;
        }
    }

    public static class Convert
    {
        public static System.Globalization.CultureInfo CultureInfo { get; private set; }

        static Convert()
        {
            CultureInfo = new System.Globalization.CultureInfo("");
            CultureInfo.NumberFormat = new System.Globalization.NumberFormatInfo();
            CultureInfo.NumberFormat.NumberGroupSeparator = "";
            CultureInfo.NumberFormat.CurrencyGroupSeparator = "";
        }

        public static object ChangeType(XmlNode source, Type targetType, ConvertOptionsAttribute attribute)
        {

            string RawValue = string.Empty;

            if (source.NodeType == XmlNodeType.Text)
            {
                RawValue = source.Value;
            }
            else
            {
                foreach (XmlNode Child in source.ChildNodes)
                {
                    if (Child.NodeType == XmlNodeType.Text)
                    {
                        RawValue = string.Concat(RawValue, Child.Value);
                    }
                }
            }

            if (targetType.IsClass && attribute != null && (attribute.Flags & ConvertFlags.CreateInstanceWithStringParameter) != 0)
            {
                return targetType.InvokeMember(null, System.Reflection.BindingFlags.CreateInstance, null, null, new object[] { RawValue });
            }
            else if (targetType.IsEnum)
            {

                if (string.IsNullOrEmpty(RawValue))
                    return Enum.GetValues(targetType).GetValue(0);
                return Enum.Parse(targetType, RawValue);
            }
            else if (targetType.Equals(typeof(bool)))
            {
                if (string.IsNullOrEmpty(RawValue))
                    return false;

                if (attribute != null && (attribute.Flags & ConvertFlags.BoolValueAsInt) != 0)
                {
                    return (object)(XmlConvert.ToInt32(RawValue) != 0);
                }

                return (object)XmlConvert.ToBoolean(RawValue.ToLowerInvariant());
            }
            else if (targetType.IsAssignableFrom(typeof(string)))
            {
                return (object)RawValue;
            }

            Type t = Nullable.GetUnderlyingType(targetType) ?? targetType;

            if (t.Equals(typeof(bool)))
            {
                if (string.IsNullOrEmpty(RawValue))
                    return null;

                if (attribute != null && (attribute.Flags & ConvertFlags.BoolValueAsInt) != 0)
                {
                    return (object)(XmlConvert.ToInt32(RawValue) != 0);
                }

                return (object)XmlConvert.ToBoolean(RawValue.ToLowerInvariant());
            }

            return (string.IsNullOrEmpty(RawValue)) ? null : (object)System.Convert.ChangeType(RawValue, t, CultureInfo);
        }
    }



    public class MediaProvider: AdminObject
    {
        private string m_Description;
        private MediaType m_MediaType;
        private string m_PluginType;
        private string m_Id;

        public override string DisplayText
        {
            get
            {
                return Description;
            }
        }

        public string Description
        {
            get
            {
                return m_Description;
            }
        }
        public MediaType MediaType
        {
            get
            {
                return m_MediaType;
            }
        }
        public string PluginType
        {
            get
            {
                return m_PluginType;
            }
        }

        public new string Id
        {
            get
            {
                return m_Id;
            }
        }


        public MediaProvider(XmlNode nde):base(null)
        {
            m_Description = nde.InnerText;
            m_Id = nde.Attributes["Id"].Value;
            m_PluginType = nde.Attributes["PluginType"].Value;
            m_MediaType = (MediaType)(Int32.Parse(nde.Attributes["MediaType"].Value));
        }
    }



    [AdminSave(SkipSave = true)]
    [DialogType(Type="Nixxis.Client.Admin.DlgStdMusicConfigure, NixxisAdminControls")]
    public class SimpleMusicOnHoldConfig : BasePreprocessorConfig
    {
        private string m_Music;
        
            public SimpleMusicOnHoldConfig(AdminObject parent)
                : base(parent)
            {
            }

            public SimpleMusicOnHoldConfig(AdminCore core)
                : base(core)
            {
            }


        public string Music
        {
            get
            {
                return m_Music;
            }
            set
            {
                m_Music = value;
            }
        }

        public override void DeserializeFromText(string text)
        {
            m_Music = text;
        }

        protected override string SerializeToText()
        {
            return m_Music;
        }

        public override string DisplayText
        {
            get
            {
                try
                {
                    return m_Core.Prompts[Music].DisplayText;
                }
                catch
                {
                }
                return string.Empty;
            }
        }

    }

    [AdminSave(SkipSave = true)]
    [DialogType(Type="Nixxis.Client.Admin.DlgStdPreprocessorConfigure, NixxisAdminControls")]
    public class SimplePreprocessorConfig : BasePreprocessorConfig
    {
        [AdminSave(SkipSave = true)]
        public class StdPreprocessorLanguagePrompt : AdminObject
        {
            public StdPreprocessorLanguagePrompt(AdminObject parent)
                : base(parent)
            {
            }

            public StdPreprocessorLanguagePrompt(AdminCore core)
                : base(core)
            {
            }

            public char Dtmf
            {
                get
                {
                    return GetFieldValue<char>("Dtmf");
                }
                set
                {
                    SetFieldValue<char>("Dtmf", value);
                }
            }

            public AdminObjectReference<Prompt> Prompt
            {
                get;
                internal set;
            }

            public AdminObjectReference<Language> Language
            {
                get;
                internal set;
            }

            public int MinValue
            {
                get
                {
                    return GetFieldValue<int>("MinValue");
                }
                set
                {
                    SetFieldValue<int>("MinValue", value);
                }
            }

            public int MaxValue
            {
                get
                {
                    return GetFieldValue<int>("MaxValue");
                }
                set
                {
                    SetFieldValue<int>("MaxValue", value);
                }
            }

        }

        [AdminSave(SkipSave = true)]
        public class StdPreprocessorMenuPrompt : AdminObject
        {
            public StdPreprocessorMenuPrompt(AdminObject parent)
                : base(parent)
            {
            }

            public StdPreprocessorMenuPrompt(AdminCore core)
                : base(core)
            {
            }

            public AdminObjectReference<Prompt> Prompt
            {
                get;
                internal set;
            }

            public AdminObjectList<StdPreprocessorLanguagePrompt> LanguagesPrompts
            {
                get;
                internal set;
            }

            public AdminObjectReference<Skill> Skill
            {
                get;
                internal set;
            }

            public AdminObjectReference<Queue> Queue
            {
                get;
                internal set;
            }

            public char Dtmf
            {
                get
                {
                    return GetFieldValue<char>("Dtmf");
                }
                set
                {
                    SetFieldValue<char>("Dtmf", value);
                }
            }

            public int MinValue
            {
                get
                {
                    return GetFieldValue<int>("MinValue");
                }
                set
                {
                    SetFieldValue<int>("MinValue", value);
                }
            }

            public int MaxValue
            {
                get
                {
                    return GetFieldValue<int>("MaxValue");
                }
                set
                {
                    SetFieldValue<int>("MaxValue", value);
                }
            }
        }

        public SimplePreprocessorConfig(AdminObject parent)
            : base(parent)
        {
        }

        public SimplePreprocessorConfig(AdminCore core)
            : base(core)
        {
        }

        public AdminObjectReference<Prompt> Welcome
        {
            get;
            internal set;
        }

        public bool AskLanguage
        {
            get
            {
                return GetFieldValue<bool>("AskLanguage");
            }
            set
            {
                SetFieldValue<bool>("AskLanguage", value);
            }
        }

        public bool AskMenu
        {
            get
            {
                return GetFieldValue<bool>("AskMenu");
            }
            set
            {
                SetFieldValue<bool>("AskMenu", value);
            }
        }

        public AdminObjectList<StdPreprocessorLanguagePrompt> LanguagesPrompts
        {
            get;
            internal set;
        }

        public AdminObjectList<StdPreprocessorMenuPrompt> MenuPrompts
        {
            get;
            internal set;
        }

        public override void DeserializeFromText(string settings)
        {
            if (settings != null)
            {
                StringReader sr = new StringReader(settings);
                string strTemp = null;
                string[] strArr = null;


                while ((strTemp = sr.ReadLine()) != null)
                {
                    if (strTemp.StartsWith("welcome="))
                    {
                        try
                        {
                            Welcome.TargetId = strTemp.Substring("welcome=".Length).Split('/')[1];
                        }
                        catch
                        {
                        }
                        Welcome.DoneLoading();
                    }
                    else if (strTemp.StartsWith("playlanguage="))
                    {
                        AskLanguage = Boolean.Parse(strTemp.Substring("playlanguage=".Length));
                    }
                    else if (strTemp.StartsWith("playmenu="))
                    {
                        AskMenu = Boolean.Parse(strTemp.Substring("playmenu=".Length));
                    }
                    else if (strTemp.StartsWith("language"))
                    {
                        if (strTemp.StartsWith("language_code"))
                        {
                            strTemp = strTemp.Substring("language_code".Length);
                            strArr = strTemp.Split('=');

                            StdPreprocessorLanguagePrompt language = null;

                            foreach (StdPreprocessorLanguagePrompt splp in LanguagesPrompts)
                            {
                                if (splp.Dtmf == strArr[0][0])
                                {
                                    language = splp;
                                }
                            }
                            if (language == null)
                            {
                                language = Core.Create<StdPreprocessorLanguagePrompt>(this);
                                language.Dtmf = strArr[0][0];
                                LanguagesPrompts.Add(language);
                                LanguagesPrompts.DoneLoading();
                                language.DoneLoading();
                            }

                            language.Language.TargetId = strArr[1];
                            language.Language.DoneLoading();

                        }
                        else if (strTemp.StartsWith("language_value"))
                        {
                            strTemp = strTemp.Substring("language_value".Length);
                            strArr = strTemp.Split('=');

                            StdPreprocessorLanguagePrompt language = null;

                            foreach (StdPreprocessorLanguagePrompt splp in LanguagesPrompts)
                            {
                                if (splp.Dtmf == strArr[0][0])
                                {
                                    language = splp;
                                }
                            }
                            if (language == null)
                            {
                                language = Core.Create<StdPreprocessorLanguagePrompt>(this);
                                language.Dtmf = strArr[0][0];
                                LanguagesPrompts.Add(language);
                                LanguagesPrompts.DoneLoading();
                                language.DoneLoading();
                            }

                            string[] levels = strArr[1].Split(' ');
                            language.MinValue = int.Parse(levels[2]);
                            language.MaxValue = int.Parse(levels[1]);
                        }
                        else
                        {
                            strTemp = strTemp.Substring("language".Length);
                            strArr = strTemp.Split('=');

                            StdPreprocessorLanguagePrompt language = null;

                            foreach (StdPreprocessorLanguagePrompt splp in LanguagesPrompts)
                            {
                                if (splp.Dtmf == strArr[0][0])
                                {
                                    language = splp;
                                }
                            }
                            if (language == null)
                            {
                                language = Core.Create<StdPreprocessorLanguagePrompt>(this);
                                language.Dtmf = strArr[0][0];
                                LanguagesPrompts.Add(language);
                                LanguagesPrompts.DoneLoading();
                                language.DoneLoading();
                            }
                            try
                            {
                                string strTmp = strArr[1].Split('/')[1];
                                if (!string.IsNullOrEmpty(strTmp))
                                {
                                    language.Prompt.TargetId = strTmp;
                                    language.Prompt.DoneLoading();
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    else if (strTemp.StartsWith("menu"))
                    {
                        if (strTemp.StartsWith("menu-"))
                        {
                            if (strTemp.StartsWith("menu-_"))
                            {
                                strTemp = strTemp.Substring("menu-_".Length);
                                strArr = strTemp.Split('=');

                                StdPreprocessorMenuPrompt menu = null;

                                foreach (StdPreprocessorMenuPrompt splp in MenuPrompts)
                                {
                                    if (splp.Dtmf == strArr[0][0])
                                    {
                                        menu = splp;
                                    }
                                }
                                if (menu == null)
                                {
                                    menu = Core.Create<StdPreprocessorMenuPrompt>(this);
                                    menu.Dtmf = strArr[0][0];
                                    MenuPrompts.Add(menu);
                                    MenuPrompts.DoneLoading();
                                    menu.DoneLoading();
                                }
                                try
                                {
                                    if (strArr[1].Contains('/'))
                                        menu.Prompt.TargetId = strArr[1].Split('/')[1];
                                    menu.Prompt.DoneLoading();
                                }
                                catch
                                {
                                }
                            }
                            else
                            {
                                strTemp = strTemp.Substring("menu-".Length);
                                strArr = strTemp.Split('_');

                                string[] str = strArr[1].Split('=');

                                StdPreprocessorMenuPrompt menu = null;

                                foreach (StdPreprocessorMenuPrompt splp in MenuPrompts)
                                {
                                    if (splp.Dtmf == str[0][0])
                                    {
                                        menu = splp;
                                    }
                                }
                                if (menu == null)
                                {
                                    menu = Core.Create<StdPreprocessorMenuPrompt>(this);
                                    menu.Dtmf = str[0][0];
                                    menu.DoneLoading();
                                    MenuPrompts.Add(menu);
                                    MenuPrompts.DoneLoading();
                                }

                                StdPreprocessorLanguagePrompt lp = Core.Create<StdPreprocessorLanguagePrompt>(this);
                                try
                                {
                                    lp.Prompt.TargetId = str[1].Split('/')[1];
                                    lp.Prompt.DoneLoading();
                                }
                                catch
                                {
                                }
                                lp.Language.TargetId = strArr[0];
                                lp.Language.DoneLoading();
                                menu.LanguagesPrompts.Add(lp);
                                menu.LanguagesPrompts.DoneLoading();
                            }
                        }
                        else
                        {
                            strTemp = strTemp.Substring("menu".Length);

                            strArr = strTemp.Split(new string[] { "_value=" }, StringSplitOptions.None);

                            char dtmfMenu = strArr[0][0];

                            strArr = strArr[1].Split(new char[] { ';',',' }, StringSplitOptions.None);

                            foreach (string str in strArr)
                            {
                                if (str.StartsWith("CRIVRskills:"))
                                {
                                    string tempstr = str.Substring("CRIVRskills:".Length);

                                    StdPreprocessorMenuPrompt menu = null;

                                    foreach (StdPreprocessorMenuPrompt splp in MenuPrompts)
                                    {
                                        if (splp.Dtmf == dtmfMenu)
                                        {
                                            menu = splp;
                                        }
                                    }
                                    if (menu == null)
                                    {
                                        menu = Core.Create<StdPreprocessorMenuPrompt>(this);
                                        menu.Dtmf = dtmfMenu;
                                        menu.DoneLoading();
                                        MenuPrompts.Add(menu);
                                        MenuPrompts.DoneLoading();
                                    }

                                    string[] levels = tempstr.Split(' ');
                                    if (!string.IsNullOrEmpty(levels[0]))
                                        menu.Skill.TargetId = levels[0];
                                    menu.Skill.DoneLoading();
                                    menu.MinValue = int.Parse(levels[2]);
                                    menu.MaxValue = int.Parse(levels[1]);
                                }
                                else if (str.StartsWith("CRIVRqueue:"))
                                {
                                    string tempstr = str.Substring("CRIVRqueue:".Length);

                                    StdPreprocessorMenuPrompt menu = null;

                                    foreach (StdPreprocessorMenuPrompt splp in MenuPrompts)
                                    {
                                        if (splp.Dtmf == dtmfMenu)
                                        {
                                            menu = splp;
                                        }
                                    }
                                    if (menu == null)
                                    {
                                        menu = Core.Create<StdPreprocessorMenuPrompt>(this);
                                        menu.Dtmf = dtmfMenu;
                                        menu.DoneLoading();
                                        MenuPrompts.Add(menu);
                                        MenuPrompts.DoneLoading();
                                    }

                                    menu.Queue.TargetId = tempstr;
                                    menu.Queue.DoneLoading();
                                }
                            }
                        }
                    }
                }
            }
            DoneLoading();
        }

        protected override string SerializeToText()
        {
            StringBuilder sb = new StringBuilder();

            if (Welcome.HasTarget)
                sb.AppendFormat("welcome={0}\n", Welcome.Target.RelativePath);


            sb.AppendFormat("playlanguage={0}\n", AskLanguage);

            if (AskLanguage)
            {
                foreach (StdPreprocessorLanguagePrompt splp in LanguagesPrompts.OrderBy((a) => (a.Dtmf)))
                {
                    sb.AppendFormat("language{0}={1}\n", splp.Dtmf, splp.Prompt.HasTarget ? splp.Prompt.Target.RelativePath : string.Empty);
                    sb.AppendFormat("language_code{0}={1}\n", splp.Dtmf, splp.Language.TargetId);
                    sb.AppendFormat("language_value{0}=CRIVRlan:{1} {2:0} {3:0}\n", splp.Dtmf, splp.Language.TargetId, splp.MaxValue, splp.MinValue);
                }
            }

            sb.AppendFormat("playmenu={0}\n", AskMenu);

            if (AskMenu)
            {
                foreach (StdPreprocessorMenuPrompt spmp in MenuPrompts.OrderBy((a) => (a.Dtmf)))
                {
                    if (spmp.Queue.HasTarget && spmp.Skill.HasTarget)
                    {
                        sb.AppendFormat("menu{0}_value=CRIVRskills:{1} {2:0} {3:0};CRIVRqueue:{4}\n", spmp.Dtmf, spmp.Skill.TargetId, spmp.MaxValue, spmp.MinValue, spmp.Queue.TargetId);

                    }
                    else if (spmp.Queue.HasTarget)
                    {
                        sb.AppendFormat("menu{0}_value=CRIVRqueue:{1}\n", spmp.Dtmf, spmp.Queue.TargetId);
                    }
                    else if (spmp.Skill.HasTarget)
                    {
                        sb.AppendFormat("menu{0}_value=CRIVRskills:{1} {2:0} {3:0}\n", spmp.Dtmf, spmp.Skill.TargetId, spmp.MaxValue, spmp.MinValue);
                    }
                    else
                    {
                        sb.AppendFormat("menu{0}_value=\n", spmp.Dtmf);
                    }
                    if (AskLanguage)
                    {
                        foreach (StdPreprocessorLanguagePrompt splp in spmp.LanguagesPrompts.OrderBy((a) => (a.Language.TargetId)))
                        {
                            sb.AppendFormat("menu-{0}_{1}={2}\n", splp.Language.TargetId, spmp.Dtmf, splp.Prompt.HasTarget ? splp.Prompt.Target.RelativePath : string.Empty);
                        }
                    }
                    else
                    {
                        sb.AppendFormat("menu-_{0}={1}\n", spmp.Dtmf, spmp.Prompt.HasTarget ? spmp.Prompt.Target.RelativePath : string.Empty);
                    }
                }

            }

            return sb.ToString();
        }
    }

    public class CIComparer: IEqualityComparer<string>
    {
        public bool Equals(string x, string y)
        {
            return string.Equals(x, y, StringComparison.InvariantCulture);
        }

        public int GetHashCode(string obj)
        {
            return obj.GetHashCode();
        }
    }

    public static class Extensions
    {
        public static XmlDocument Decapsulate(this XmlDocument doc)
        {
            XmlDocument newDoc = new XmlDocument();

            System.Xml.XmlDeclaration decl = newDoc.CreateXmlDeclaration("1.0", Encoding.UTF8.WebName, "yes");

            newDoc.AppendChild(decl);

            newDoc.AppendChild(newDoc.ImportNode(doc.DocumentElement.FirstChild, true));

            return newDoc;

        }

    }

}

